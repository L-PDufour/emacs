;;; Elfeed Database Index (version 4)

;; Dummy index for backwards compatablity:
(:version "0.0.3" :feeds #s(hash-table test equal) :entries #s(hash-table test equal) :index [cl-struct-avl-tree- [nil nil nil 0] elfeed-db-compare])

;; Real index:
(:version 4 :feeds #s(hash-table test equal data ("http://orgmode.org" #s(elfeed-feed "http://orgmode.org" nil nil nil (:title "Org Mode Links supported as well" :last-modified "Wed, 30 Jul 2025 00:01:47 GMT" :etag "W/\"688960eb-6ef2\"" :canonical-url "https://orgmode.org/" :failures 1)) "https://blog.tecosaur.com/tmio/rss.xml" #s(elfeed-feed "https://blog.tecosaur.com/tmio/rss.xml" "https://blog.tecosaur.com/tmio/rss.xml" "This Month in Org" nil (:last-modified "Wed, 01 Jun 2022 16:57:13 GMT")) "https://irreal.org/blog/?feed=rss2" #s(elfeed-feed "https://irreal.org/blog/?feed=rss2" "https://irreal.org/blog/?feed=rss2" "Irreal" nil (:last-modified "Sun, 05 Oct 2025 15:12:55 GMT")) "http://feeds.feedburner.com/symfony/blog" #s(elfeed-feed "http://feeds.feedburner.com/symfony/blog" "http://feeds.feedburner.com/symfony/blog" "Symfony Blog" nil (:last-modified "Sun, 5 Oct 2025 22:21:01 GMT")) "https://kernelnewbies.org/RecentChanges?action=rss_rc&ddiffs=1" #s(elfeed-feed "https://kernelnewbies.org/RecentChanges?action=rss_rc&ddiffs=1" "https://kernelnewbies.org/RecentChanges?action=rss_rc&ddiffs=1" "Linux Kernel Newbies" nil (:etag "1759663602-15-0-1-0-20-0")) "https://emacsredux.com/atom.xml" #s(elfeed-feed "https://emacsredux.com/atom.xml" "https://emacsredux.com/atom.xml" "Emacs Redux" ((:name "Bozhidar Batsov")) (:last-modified "Tue, 03 Jun 2025 20:59:10 GMT" :etag "W/\"683f621e-1ef7e\"")) "https://linuxcommand.org/index.xml" #s(elfeed-feed "https://linuxcommand.org/index.xml" nil nil nil (:failures 5)) "https://lwn.net/headlines/rss" #s(elfeed-feed "https://lwn.net/headlines/rss" "https://lwn.net/headlines/rss" "LWN.net" nil nil) "https://blog.erratasec.com/feeds/posts/default?alt=rss" #s(elfeed-feed "https://blog.erratasec.com/feeds/posts/default?alt=rss" nil nil nil (:failures 4)) "https://without.boats/index.xml" #s(elfeed-feed "https://without.boats/index.xml" "https://without.boats/index.xml" "Without boats, dreams dry up" nil (:last-modified "Mon, 27 Jan 2025 00:05:58 GMT" :etag "W/\"6796cde6-1d057\"")) "http://www.terminally-incoherent.com/blog/feed" #s(elfeed-feed "http://www.terminally-incoherent.com/blog/feed" "http://www.terminally-incoherent.com/blog/feed" "Terminally Incoherent" nil (:etag "\"f044f4d95c9d95d3766a9439cb1398fc-ssl-df\"" :canonical-url "https://www.terminally-incoherent.com/blog/feed")) "https://protesilaos.com/master.xml" #s(elfeed-feed "https://protesilaos.com/master.xml" "https://protesilaos.com/master.xml" "Protesilaos Stavrou: Master feed with all updates" nil (:last-modified "Sun, 05 Oct 2025 15:15:10 GMT" :etag "\"755a0a476eef29b3bceaa8fc5cd522098c189bad8ba13f92d72ea3f253f19a29\"")) "http://feeds.feedburner.com/qooxdoo/blog/content" #s(elfeed-feed "http://feeds.feedburner.com/qooxdoo/blog/content" "http://feeds.feedburner.com/qooxdoo/blog/content" "Qooxdoo News - Medium" nil (:last-modified "Sat, 4 Oct 2025 12:07:43 GMT")) "http://git-annex.branchable.com/design/assistant/blog/index.rss" #s(elfeed-feed "http://git-annex.branchable.com/design/assistant/blog/index.rss" "http://git-annex.branchable.com/design/assistant/blog/index.rss" "design/assistant/blog" nil (:last-modified "Mon, 29 Sep 2025 16:59:13 GMT" :etag "\"4954-63ff38e12095a-gzip\"" :canonical-url "https://git-annex.branchable.com/design/assistant/blog/index.rss")) "https://blog.regehr.org/feed" #s(elfeed-feed "https://blog.regehr.org/feed" "https://blog.regehr.org/feed" "Embedded in Academia" nil (:last-modified "Wed, 04 Sep 2024 18:29:03 GMT" :etag "\"741f51297110259690c3f378d42f7214\"")) "https://karthinks.com/index.xml" #s(elfeed-feed "https://karthinks.com/index.xml" "https://karthinks.com/index.xml" "Karthinks" nil (:etag "\"96d12ef249c669543d0e66140cf00331-ssl-df\"")) "https://lambda-the-ultimate.org/rss.xml" #s(elfeed-feed "https://lambda-the-ultimate.org/rss.xml" nil nil nil (:failures 5)) "https://www.masteringemacs.org/feed" #s(elfeed-feed "https://www.masteringemacs.org/feed" "https://www.masteringemacs.org/feed" "Mastering Emacs" nil nil) "https://planet.emacslife.com/atom.xml" #s(elfeed-feed "https://planet.emacslife.com/atom.xml" "https://planet.emacslife.com/atom.xml" "Planet Emacslife" ((:name "Various authors")) (:last-modified "Sun, 05 Oct 2025 22:32:02 GMT" :etag "\"68e2f1e2-6a64c\"")) "https://blog.rust-lang.org/feed.xml" #s(elfeed-feed "https://blog.rust-lang.org/feed.xml" "https://blog.rust-lang.org/feed.xml" "Rust Blog" ((:name "Maintained by the Rust Teams." :uri "https://github.com/rust-lang/blog.rust-lang.org/")) (:last-modified "Fri, 12 Sep 2025 16:31:55 GMT" :etag "W/\"68c44afb-5512a\"")) "https://fasterthanli.me/index.xml" #s(elfeed-feed "https://fasterthanli.me/index.xml" "https://fasterthanli.me/index.xml" "fasterthanli.me" ((:name "Amos Wenger" :uri "https://fasterthanli.me")) nil) "https://www.rahuljuliato.com/rss.xml" #s(elfeed-feed "https://www.rahuljuliato.com/rss.xml" "https://www.rahuljuliato.com/rss.xml" "Rahul's Blog | RSS Feed" nil (:last-modified "Thu, 25 Sep 2025 09:25:22 GMT" :etag "\"226875b59a750ac157e8305430178457\"")) "https://johnregehr.com/feed/" #s(elfeed-feed "https://johnregehr.com/feed/" nil nil nil (:failures 5)) "https://buttondown.email/hillelwayne/rss" #s(elfeed-feed "https://buttondown.email/hillelwayne/rss" "https://buttondown.email/hillelwayne/rss" "Computer Things" nil (:last-modified "Thu, 25 Sep 2025 16:50:58 GMT" :canonical-url "https://buttondown.com/hillelwayne/rss")) "https://blog.sigplan.org/feed/" #s(elfeed-feed "https://blog.sigplan.org/feed/" "https://blog.sigplan.org/feed/" "SIGPLAN Blog" nil (:last-modified "Tue, 16 Sep 2025 13:09:36 GMT" :etag "\"b81c3faae47c51f5ae61264528cd420b\"")) "https://danluu.com/atom.xml" #s(elfeed-feed "https://danluu.com/atom.xml" "https://danluu.com/atom.xml" "" nil (:last-modified "Tue, 17 Dec 2024 04:31:28 GMT" :etag "W/\"6760fea0-5fbb28\"")) "https://gustedt.wordpress.com/feed/" #s(elfeed-feed "https://gustedt.wordpress.com/feed/" "https://gustedt.wordpress.com/feed/" "Jens Gustedt's Blog" nil (:last-modified "Fri, 26 Sep 2025 12:57:02 GMT")) "https://sachachua.com/blog/category/emacs/feed/" #s(elfeed-feed "https://sachachua.com/blog/category/emacs/feed/" "https://sachachua.com/blog/category/emacs/feed/" "Sacha Chua - category - emacs" nil (:last-modified "Thu, 02 Oct 2025 18:06:47 GMT" :etag "W/\"68debf37-2099f\"")) "https://whatacoldwinter.com/feed.xml" #s(elfeed-feed "https://whatacoldwinter.com/feed.xml" nil nil nil (:failures 5)) "http://planet.phpunit.de/atom.xml" #s(elfeed-feed "http://planet.phpunit.de/atom.xml" nil nil nil (:failures 4)) "http://nullprogram.com/feed" #s(elfeed-feed "http://nullprogram.com/feed" "http://nullprogram.com/feed" "null program" ((:name "Christopher Wellons" :uri "https://nullprogram.com/" :email "wellons@nullprogram.com")) (:last-modified "Tue, 30 Sep 2025 12:40:19 GMT" :etag "W/\"68dbcfb3-3905e\"" :canonical-url "https://nullprogram.com/feed")) "https://jvns.ca/atom.xml" #s(elfeed-feed "https://jvns.ca/atom.xml" "https://jvns.ca/atom.xml" "Julia Evans" ((:name "Julia Evans")) (:etag "\"632f639caff67bfdf1bf070dce8d873f-ssl-df\"")) "http://feeds.feedburner.com/InformationIsBeautiful" #s(elfeed-feed "http://feeds.feedburner.com/InformationIsBeautiful" "http://feeds.feedburner.com/InformationIsBeautiful" "Information is Beautiful" nil (:last-modified "Sun, 28 Sep 2025 06:28:34 GMT")) "https://www.youtube.com/feeds/videos.xml?channel_id=UCUyeluBRhGPCW4rPe_UvBZQ" #s(elfeed-feed "https://www.youtube.com/feeds/videos.xml?channel_id=UCUyeluBRhGPCW4rPe_UvBZQ" "https://www.youtube.com/feeds/videos.xml?channel_id=UCUyeluBRhGPCW4rPe_UvBZQ" "ThePrimeTime" ((:name "ThePrimeTime" :uri "https://www.youtube.com/channel/UCUyeluBRhGPCW4rPe_UvBZQ")) nil) "https://www.youtube.com/feeds/videos.xml?channel_id=UC0uTPqBCFIpZxlz_Lv1tk_g" #s(elfeed-feed "https://www.youtube.com/feeds/videos.xml?channel_id=UC0uTPqBCFIpZxlz_Lv1tk_g" "https://www.youtube.com/feeds/videos.xml?channel_id=UC0uTPqBCFIpZxlz_Lv1tk_g" "Protesilaos Stavrou" ((:name "Protesilaos Stavrou" :uri "https://www.youtube.com/channel/UC0uTPqBCFIpZxlz_Lv1tk_g")) nil) "https://www.youtube.com/feeds/videos.xml?channel_id=UCYO_jab_esuFRV4b17AJtAw" #s(elfeed-feed "https://www.youtube.com/feeds/videos.xml?channel_id=UCYO_jab_esuFRV4b17AJtAw" "https://www.youtube.com/feeds/videos.xml?channel_id=UCYO_jab_esuFRV4b17AJtAw" "3Blue1Brown" ((:name "3Blue1Brown" :uri "https://www.youtube.com/channel/UCYO_jab_esuFRV4b17AJtAw")) nil) "https://www.youtube.com/feeds/videos.xml?channel_id=UC2eYFnH61tmytImy1mTYvhA" #s(elfeed-feed "https://www.youtube.com/feeds/videos.xml?channel_id=UC2eYFnH61tmytImy1mTYvhA" "https://www.youtube.com/feeds/videos.xml?channel_id=UC2eYFnH61tmytImy1mTYvhA" "Luke Smith" ((:name "Luke Smith" :uri "https://www.youtube.com/channel/UC2eYFnH61tmytImy1mTYvhA")) nil) "https://www.youtube.com/feeds/videos.xml?channel_id=UCsBjURrPoezykLs9EqgamOA" #s(elfeed-feed "https://www.youtube.com/feeds/videos.xml?channel_id=UCsBjURrPoezykLs9EqgamOA" "https://www.youtube.com/feeds/videos.xml?channel_id=UCsBjURrPoezykLs9EqgamOA" "Fireship" ((:name "Fireship" :uri "https://www.youtube.com/channel/UCsBjURrPoezykLs9EqgamOA")) nil) "https://www.youtube.com/feeds/videos.xml?channel_id=UCAiiOTio8Yu69c3XnR7nQBQ" #s(elfeed-feed "https://www.youtube.com/feeds/videos.xml?channel_id=UCAiiOTio8Yu69c3XnR7nQBQ" "https://www.youtube.com/feeds/videos.xml?channel_id=UCAiiOTio8Yu69c3XnR7nQBQ" "System Crafters" ((:name "System Crafters" :uri "https://www.youtube.com/channel/UCAiiOTio8Yu69c3XnR7nQBQ")) nil))) :entries #s(hash-table test equal data (("blog.rust-lang.org" . "https://blog.rust-lang.org/2025/09/01/rust-lld-on-1.90.0-stable/") #s(elfeed-entry ("blog.rust-lang.org" . "https://blog.rust-lang.org/2025/09/01/rust-lld-on-1.90.0-stable/") "Faster linking times with 1.90.0 stable on Linux using the LLD linker" "https://blog.rust-lang.org/2025/09/01/rust-lld-on-1.90.0-stable/" 1756684800.0 #s(elfeed-ref "f1294a4471a86196aa58b5cf64fefc3e588fcde5") html nil (dev systems unread) "https://blog.rust-lang.org/feed.xml" (:authors ((:name "Rémy Rakic")))) ("blog.rust-lang.org" . "https://blog.rust-lang.org/2025/08/19/demoting-x86-64-apple-darwin-to-tier-2-with-host-tools/") #s(elfeed-entry ("blog.rust-lang.org" . "https://blog.rust-lang.org/2025/08/19/demoting-x86-64-apple-darwin-to-tier-2-with-host-tools/") "Demoting x86_64-apple-darwin to Tier 2 with host tools" "https://blog.rust-lang.org/2025/08/19/demoting-x86-64-apple-darwin-to-tier-2-with-host-tools/" 1755561600.0 #s(elfeed-ref "7bb2329a2d2d8474ec7069a8c72b84df70b87e71") html nil (dev systems unread) "https://blog.rust-lang.org/feed.xml" (:authors ((:name "Jake Goulding")))) ("blog.rust-lang.org" . "https://blog.rust-lang.org/2025/08/07/Rust-1.89.0/") #s(elfeed-entry ("blog.rust-lang.org" . "https://blog.rust-lang.org/2025/08/07/Rust-1.89.0/") "Announcing Rust 1.89.0" "https://blog.rust-lang.org/2025/08/07/Rust-1.89.0/" 1754524800.0 #s(elfeed-ref "ded6398ce2131368067c0d46ff2aed42a259e7ff") html nil (dev systems unread) "https://blog.rust-lang.org/feed.xml" (:authors ((:name "The Rust Release Team")))) ("blog.rust-lang.org" . "https://blog.rust-lang.org/2025/08/05/july-project-goals-update/") #s(elfeed-entry ("blog.rust-lang.org" . "https://blog.rust-lang.org/2025/08/05/july-project-goals-update/") "Project goals update — July 2025" "https://blog.rust-lang.org/2025/08/05/july-project-goals-update/" 1754352000.0 #s(elfeed-ref "cafd31958584fb423b33afc66201ae0661e0fd8f") html nil (dev systems unread) "https://blog.rust-lang.org/feed.xml" (:authors ((:name "Tomas Sedovic")))) ("blog.rust-lang.org" . "https://blog.rust-lang.org/2025/07/11/crates-io-development-update-2025-07/") #s(elfeed-entry ("blog.rust-lang.org" . "https://blog.rust-lang.org/2025/07/11/crates-io-development-update-2025-07/") "crates.io: development update" "https://blog.rust-lang.org/2025/07/11/crates-io-development-update-2025-07/" 1752192000.0 #s(elfeed-ref "b0fc34752a23bb0be89a12e5247bc5ffbe3dabc0") html nil (dev systems unread) "https://blog.rust-lang.org/feed.xml" (:authors ((:name "Tobias Bieniek")))) ("blog.rust-lang.org" . "https://blog.rust-lang.org/2025/07/03/stabilizing-naked-functions/") #s(elfeed-entry ("blog.rust-lang.org" . "https://blog.rust-lang.org/2025/07/03/stabilizing-naked-functions/") "Stabilizing naked functions" "https://blog.rust-lang.org/2025/07/03/stabilizing-naked-functions/" 1751500800.0 #s(elfeed-ref "f683ddddee4321ab2de84d24d878e4a8605c7a5e") html nil (dev systems unread) "https://blog.rust-lang.org/feed.xml" (:authors ((:name "Folkert de Vries")))) ("blog.rust-lang.org" . "https://blog.rust-lang.org/2025/06/26/Rust-1.88.0/") #s(elfeed-entry ("blog.rust-lang.org" . "https://blog.rust-lang.org/2025/06/26/Rust-1.88.0/") "Announcing Rust 1.88.0" "https://blog.rust-lang.org/2025/06/26/Rust-1.88.0/" 1750896000.0 #s(elfeed-ref "c77b892a6e02027686fd898b0c8bdfdb1755ce75") html nil (dev systems unread) "https://blog.rust-lang.org/feed.xml" (:authors ((:name "The Rust Release Team")))) ("blog.rust-lang.org" . "https://blog.rust-lang.org/2025/06/20/may-project-goals-update/") #s(elfeed-entry ("blog.rust-lang.org" . "https://blog.rust-lang.org/2025/06/20/may-project-goals-update/") "May Project Goals Update" "https://blog.rust-lang.org/2025/06/20/may-project-goals-update/" 1750377600.0 #s(elfeed-ref "d5aac37411d95221c0b2e47089d69ea26f3f048c") html nil (dev systems unread) "https://blog.rust-lang.org/feed.xml" (:authors ((:name "Tomas Sedovic")))) ("blog.rust-lang.org" . "https://blog.rust-lang.org/2025/06/16/rust-compiler-performance-survey-2025/") #s(elfeed-entry ("blog.rust-lang.org" . "https://blog.rust-lang.org/2025/06/16/rust-compiler-performance-survey-2025/") "Rust compiler performance survey 2025" "https://blog.rust-lang.org/2025/06/16/rust-compiler-performance-survey-2025/" 1750032000.0 #s(elfeed-ref "5ce7783c2e38049236ec5c40ec54f934954de76e") html nil (dev systems unread) "https://blog.rust-lang.org/feed.xml" (:authors ((:name "Jakub Beránek")))) ("blog.rust-lang.org" . "https://blog.rust-lang.org/2025/05/26/demoting-i686-pc-windows-gnu/") #s(elfeed-entry ("blog.rust-lang.org" . "https://blog.rust-lang.org/2025/05/26/demoting-i686-pc-windows-gnu/") "Demoting i686-pc-windows-gnu to Tier 2" "https://blog.rust-lang.org/2025/05/26/demoting-i686-pc-windows-gnu/" 1748217600.0 #s(elfeed-ref "62c205815413c8bc923011b14b4f99e2e6135415") html nil (dev systems unread) "https://blog.rust-lang.org/feed.xml" (:authors ((:name "Noratrieb")))) ("git-annex.branchable.com" . "http://git-annex.branchable.com/devblog/day_652-664__git-remote-annex/") #s(elfeed-entry ("git-annex.branchable.com" . "http://git-annex.branchable.com/devblog/day_652-664__git-remote-annex/") "day 652-664 git-remote-annex" "http://git-annex.branchable.com/devblog/day_652-664__git-remote-annex/" 1715880222.0 #s(elfeed-ref "4c4ccb36d0e51b0a687a7f84dc70cbebf1082880") html nil (mustread unread) "http://git-annex.branchable.com/design/assistant/blog/index.rss" nil) ("git-annex.branchable.com" . "http://git-annex.branchable.com/devblog/day_651__a_major_release__and_a_conference/") #s(elfeed-entry ("git-annex.branchable.com" . "http://git-annex.branchable.com/devblog/day_651__a_major_release__and_a_conference/") "day 651 a major release and a conference" "http://git-annex.branchable.com/devblog/day_651__a_major_release__and_a_conference/" 1687794823.0 #s(elfeed-ref "442b77f5bc49064d1494c566611d0d17a0b55b9c") html nil (mustread unread) "http://git-annex.branchable.com/design/assistant/blog/index.rss" nil) ("git-annex.branchable.com" . "http://git-annex.branchable.com/devblog/day_649-650__speeding_up_repeated_imports/") #s(elfeed-entry ("git-annex.branchable.com" . "http://git-annex.branchable.com/devblog/day_649-650__speeding_up_repeated_imports/") "day 649-650 speeding up repeated imports" "http://git-annex.branchable.com/devblog/day_649-650__speeding_up_repeated_imports/" 1685659413.0 #s(elfeed-ref "d602711f92f7559d3a5b598f1b1c314f68a4cbad") html nil (mustread unread) "http://git-annex.branchable.com/design/assistant/blog/index.rss" nil) ("git-annex.branchable.com" . "http://git-annex.branchable.com/devblog/day_644-648__terminal_escape_sequences/") #s(elfeed-entry ("git-annex.branchable.com" . "http://git-annex.branchable.com/devblog/day_644-648__terminal_escape_sequences/") "day 644-648 terminal escape sequences" "http://git-annex.branchable.com/devblog/day_644-648__terminal_escape_sequences/" 1681326190.0 #s(elfeed-ref "510bb9a9c51febe80287041b29fdfafe677fb4e4") html nil (mustread unread) "http://git-annex.branchable.com/design/assistant/blog/index.rss" nil) ("git-annex.branchable.com" . "http://git-annex.branchable.com/devblog/day_643__adjusted_view_branches/") #s(elfeed-entry ("git-annex.branchable.com" . "http://git-annex.branchable.com/devblog/day_643__adjusted_view_branches/") "day 643 adjusted view branches" "http://git-annex.branchable.com/devblog/day_643__adjusted_view_branches/" 1677529708.0 #s(elfeed-ref "780b833376e91993dbc9b1159ebb06a898a62aae") html nil (mustread unread) "http://git-annex.branchable.com/design/assistant/blog/index.rss" nil) ("git-annex.branchable.com" . "http://git-annex.branchable.com/devblog/day_642__cost_model/") #s(elfeed-entry ("git-annex.branchable.com" . "http://git-annex.branchable.com/devblog/day_642__cost_model/") "day 642 cost model" "http://git-annex.branchable.com/devblog/day_642__cost_model/" 1636402868.0 #s(elfeed-ref "2a13db52095b7c51d68e918e3756d5a0a33f7146") html nil (mustread unread) "http://git-annex.branchable.com/design/assistant/blog/index.rss" nil) ("git-annex.branchable.com" . "http://git-annex.branchable.com/devblog/day_641__an_alternative_smudge_filter/") #s(elfeed-entry ("git-annex.branchable.com" . "http://git-annex.branchable.com/devblog/day_641__an_alternative_smudge_filter/") "day 641 an alternative smudge filter" "http://git-annex.branchable.com/devblog/day_641__an_alternative_smudge_filter/" 1635970023.0 #s(elfeed-ref "abb5b216f496e42c546fca8785423aedb0bcb134") html nil (mustread unread) "http://git-annex.branchable.com/design/assistant/blog/index.rss" nil) ("emacsredux.com" . "https://emacsredux.com/blog/2025/06/03/tree-sitter-powered-code-completion") #s(elfeed-entry ("emacsredux.com" . "https://emacsredux.com/blog/2025/06/03/tree-sitter-powered-code-completion") "Tree-sitter powered code completion" "https://emacsredux.com/blog/2025/06/03/tree-sitter-powered-code-completion/" 1748956860.0 #s(elfeed-ref "66312ac0651ed6ed907ac13afd180253a36c8638") html nil (dev emacs mustread unread) "https://emacsredux.com/atom.xml" (:authors ((:name "Bozhidar Batsov")) :categories ("Tree-sitter" "Completion"))) ("emacsredux.com" . "https://emacsredux.com/blog/2025/06/03/little-known-macos-keybindings") #s(elfeed-entry ("emacsredux.com" . "https://emacsredux.com/blog/2025/06/03/little-known-macos-keybindings") "Little known macOS keybindings" "https://emacsredux.com/blog/2025/06/03/little-known-macos-keybindings/" 1748933280.0 #s(elfeed-ref "fbf81e0a314466b46840ae17639a4a98d583a8ef") html nil (dev emacs mustread unread) "https://emacsredux.com/atom.xml" (:authors ((:name "Bozhidar Batsov")))) ("emacsredux.com" . "https://emacsredux.com/blog/2025/06/01/let-s-make-keyboard-quit-smarter") #s(elfeed-entry ("emacsredux.com" . "https://emacsredux.com/blog/2025/06/01/let-s-make-keyboard-quit-smarter") "Let’s make keyboard-quit smarter" "https://emacsredux.com/blog/2025/06/01/let-s-make-keyboard-quit-smarter/" 1748810340.0 #s(elfeed-ref "36d8696a7302c7266e7b5beed2c7a15665edccb1") html nil (dev emacs mustread unread) "https://emacsredux.com/atom.xml" (:authors ((:name "Bozhidar Batsov")) :categories ("crux" "utils"))) ("emacsredux.com" . "https://emacsredux.com/blog/2025/04/06/goodbye-setq-hello-setopt") #s(elfeed-entry ("emacsredux.com" . "https://emacsredux.com/blog/2025/04/06/goodbye-setq-hello-setopt") "Goodbye setq, hello setopt!" "https://emacsredux.com/blog/2025/04/06/goodbye-setq-hello-setopt/" 1743956040.0 #s(elfeed-ref "cb214b90711f1c5515ed032d4df56aa08c361f04") html nil (dev emacs mustread unread) "https://emacsredux.com/atom.xml" (:authors ((:name "Bozhidar Batsov")) :categories ("Customize" "Emacs 29"))) ("emacsredux.com" . "https://emacsredux.com/blog/2025/03/31/essential-flyspell") #s(elfeed-entry ("emacsredux.com" . "https://emacsredux.com/blog/2025/03/31/essential-flyspell") "Essential Flyspell" "https://emacsredux.com/blog/2025/03/31/essential-flyspell/" 1743450720.0 #s(elfeed-ref "10ae444c09362062b73c4c16986bf2b51050618c") html nil (dev emacs mustread unread) "https://emacsredux.com/atom.xml" (:authors ((:name "Bozhidar Batsov")) :categories ("Flyspell"))) ("emacsredux.com" . "https://emacsredux.com/blog/2025/03/28/speed-up-emacs-startup-by-tweaking-the-gc-settings") #s(elfeed-entry ("emacsredux.com" . "https://emacsredux.com/blog/2025/03/28/speed-up-emacs-startup-by-tweaking-the-gc-settings") "Speed up Emacs Startup by Tweaking the GC Settings" "https://emacsredux.com/blog/2025/03/28/speed-up-emacs-startup-by-tweaking-the-gc-settings/" 1743149160.0 #s(elfeed-ref "a95e36498e0c2f2e9b3489a5497f2f6fa52d174d") html nil (dev emacs mustread unread) "https://emacsredux.com/atom.xml" (:authors ((:name "Bozhidar Batsov")) :categories ("Startup"))) ("emacsredux.com" . "https://emacsredux.com/blog/2025/03/19/relative-line-numbers") #s(elfeed-entry ("emacsredux.com" . "https://emacsredux.com/blog/2025/03/19/relative-line-numbers") "Relative Line Numbers" "https://emacsredux.com/blog/2025/03/19/relative-line-numbers/" 1742384940.0 #s(elfeed-ref "8d659089cdc01610df4b697237f8b0938734d69a") html nil (dev emacs mustread unread) "https://emacsredux.com/atom.xml" (:authors ((:name "Bozhidar Batsov")) :categories ("Configuration" "Built-ins"))) ("emacsredux.com" . "https://emacsredux.com/blog/2025/03/18/you-have-no-idea-how-powerful-isearch-is") #s(elfeed-entry ("emacsredux.com" . "https://emacsredux.com/blog/2025/03/18/you-have-no-idea-how-powerful-isearch-is") "You have no idea how powerful isearch is!" "https://emacsredux.com/blog/2025/03/18/you-have-no-idea-how-powerful-isearch-is/" 1742316420.0 #s(elfeed-ref "2a86603ef1eabac8a7a7597187bf30197a3d566c") html nil (dev emacs mustread unread) "https://emacsredux.com/atom.xml" (:authors ((:name "Bozhidar Batsov")) :categories ("Built-ins" "isearch"))) ("emacsredux.com" . "https://emacsredux.com/blog/2025/03/03/the-role-of-the-escape-key-in-emacs") #s(elfeed-entry ("emacsredux.com" . "https://emacsredux.com/blog/2025/03/03/the-role-of-the-escape-key-in-emacs") "The role of the Escape key in Emacs" "https://emacsredux.com/blog/2025/03/03/the-role-of-the-escape-key-in-emacs/" 1740988200.0 #s(elfeed-ref "6a44898e124b5222fd0920cc9ef302fda472fdbf") html nil (dev emacs mustread unread) "https://emacsredux.com/atom.xml" (:authors ((:name "Bozhidar Batsov")) :categories ("Keybindings"))) ("emacsredux.com" . "https://emacsredux.com/blog/2025/03/01/debugging-errors-in-emacs") #s(elfeed-entry ("emacsredux.com" . "https://emacsredux.com/blog/2025/03/01/debugging-errors-in-emacs") "Debugging Errors in Emacs" "https://emacsredux.com/blog/2025/03/01/debugging-errors-in-emacs/" 1740846960.0 #s(elfeed-ref "d5e794c373699b30dbc268020f9244642ae46c13") html nil (dev emacs mustread unread) "https://emacsredux.com/atom.xml" (:authors ((:name "Bozhidar Batsov")) :categories ("Debugging"))) ("sachachua.com" . "https://sachachua.com/blog/2025/09/2025-09-01-emacs-news/") #s(elfeed-entry ("sachachua.com" . "https://sachachua.com/blog/2025/09/2025-09-01-emacs-news/") "2025-09-01 Emacs news" "https://sachachua.com/blog/2025/09/2025-09-01-emacs-news/" 1756737589.0 #s(elfeed-ref "947156dce3faf06a43c0a9a1d792f08283d8a302") html nil (dev emacs mustread unread) "https://sachachua.com/blog/category/emacs/feed/" (:authors ((:name "Sacha Chua")) :categories ("emacs" "emacs-news"))) ("sachachua.com" . "https://sachachua.com/blog/2025/08/emacs-elevator-pitch-tinkerers-unite/") #s(elfeed-entry ("sachachua.com" . "https://sachachua.com/blog/2025/08/emacs-elevator-pitch-tinkerers-unite/") "Emacs elevator pitch: tinkerers unite" "https://sachachua.com/blog/2025/08/emacs-elevator-pitch-tinkerers-unite/" 1756660293.0 #s(elfeed-ref "5052bf9e6076d06798ef14d32b8d3f5e1055f886") html nil (dev emacs mustread unread) "https://sachachua.com/blog/category/emacs/feed/" (:authors ((:name "Sacha Chua")) :categories ("emacs" "community"))) ("sachachua.com" . "https://sachachua.com/blog/2025/08/2025-08-25-emacs-news/") #s(elfeed-entry ("sachachua.com" . "https://sachachua.com/blog/2025/08/2025-08-25-emacs-news/") "2025-08-25 Emacs news" "https://sachachua.com/blog/2025/08/2025-08-25-emacs-news/" 1756121435.0 #s(elfeed-ref "40e360459611a03f98f63237b6cc7e260b6f8b10") html nil (dev emacs mustread unread) "https://sachachua.com/blog/category/emacs/feed/" (:authors ((:name "Sacha Chua")) :categories ("emacs" "emacs-news"))) ("sachachua.com" . "https://sachachua.com/blog/2025/08/2025-08-18-emacs-news/") #s(elfeed-entry ("sachachua.com" . "https://sachachua.com/blog/2025/08/2025-08-18-emacs-news/") "2025-08-18 Emacs news" "https://sachachua.com/blog/2025/08/2025-08-18-emacs-news/" 1755556530.0 #s(elfeed-ref "4bb8e39dc1fda8d2497760c77611152bfa636049") html nil (dev emacs mustread unread) "https://sachachua.com/blog/category/emacs/feed/" (:authors ((:name "Sacha Chua")) :categories ("emacs" "emacs-news"))) ("sachachua.com" . "https://sachachua.com/blog/2025/08/2025-08-11-emacs-news/") #s(elfeed-entry ("sachachua.com" . "https://sachachua.com/blog/2025/08/2025-08-11-emacs-news/") "2025-08-11 Emacs news" "https://sachachua.com/blog/2025/08/2025-08-11-emacs-news/" 1754996570.0 #s(elfeed-ref "32cb1d7c268d29a2659fe51faaeba32d7c179996") html nil (dev emacs mustread unread) "https://sachachua.com/blog/category/emacs/feed/" (:authors ((:name "Sacha Chua")) :categories ("emacs" "emacs-news"))) ("sachachua.com" . "https://sachachua.com/blog/2025/08/2025-08-04-emacs-news/") #s(elfeed-entry ("sachachua.com" . "https://sachachua.com/blog/2025/08/2025-08-04-emacs-news/") "2025-08-04 Emacs news" "https://sachachua.com/blog/2025/08/2025-08-04-emacs-news/" 1754314873.0 #s(elfeed-ref "fc15e30bb2c6bf3cda5ec7326f942e469eaf2873") html nil (dev emacs mustread unread) "https://sachachua.com/blog/category/emacs/feed/" (:authors ((:name "Sacha Chua")) :categories ("emacs" "emacs-news"))) ("sachachua.com" . "https://sachachua.com/blog/2025/07/2025-07-28-emacs-news/") #s(elfeed-entry ("sachachua.com" . "https://sachachua.com/blog/2025/07/2025-07-28-emacs-news/") "2025-07-28 Emacs news" "https://sachachua.com/blog/2025/07/2025-07-28-emacs-news/" 1753741976.0 #s(elfeed-ref "6b9c06c720d61b926b9f64fc8dbc02051806d6de") html nil (dev emacs mustread unread) "https://sachachua.com/blog/category/emacs/feed/" (:authors ((:name "Sacha Chua")) :categories ("emacs" "emacs-news"))) ("irreal.org" . "https://irreal.org/blog/?p=13243") #s(elfeed-entry ("irreal.org" . "https://irreal.org/blog/?p=13243") "One Last Elevator Pitch" "https://irreal.org/blog/?p=13243" 1756825786.0 #s(elfeed-ref "c94b0a5db9855999c4fd8aab2fb32294ebc078f8") html nil (dev emacs mustread unread) "https://irreal.org/blog/?feed=rss2" (:authors ((:name "jcs")) :categories ("General" "Emacs"))) ("irreal.org" . "https://irreal.org/blog/?p=13241") #s(elfeed-entry ("irreal.org" . "https://irreal.org/blog/?p=13241") "A Quick Debugging Tip" "https://irreal.org/blog/?p=13241" 1756745331.0 #s(elfeed-ref "c2d48194a0024ebd742ddf10b459c8c6e938b007") html nil (dev emacs mustread unread) "https://irreal.org/blog/?feed=rss2" (:authors ((:name "jcs")) :categories ("General" "Emacs"))) ("irreal.org" . "https://irreal.org/blog/?p=13239") #s(elfeed-entry ("irreal.org" . "https://irreal.org/blog/?p=13239") "Ibuffer Configuration" "https://irreal.org/blog/?p=13239" 1756653660.0 #s(elfeed-ref "e5ce48457dc3978dc6e780db7a3dabe5c4033fa5") html nil (dev emacs mustread unread) "https://irreal.org/blog/?feed=rss2" (:authors ((:name "jcs")) :categories ("General" "Emacs"))) ("irreal.org" . "https://irreal.org/blog/?p=13237") #s(elfeed-entry ("irreal.org" . "https://irreal.org/blog/?p=13237") "Writing Instruction Manuals In Org Mode" "https://irreal.org/blog/?p=13237" 1756569876.0 #s(elfeed-ref "396d000508e5ab76964ea652a8ff5d605c22df51") html nil (dev emacs mustread unread) "https://irreal.org/blog/?feed=rss2" (:authors ((:name "jcs")) :categories ("General" "Emacs"))) ("irreal.org" . "https://irreal.org/blog/?p=13235") #s(elfeed-entry ("irreal.org" . "https://irreal.org/blog/?p=13235") "Disqus Problem Update" "https://irreal.org/blog/?p=13235" 1756498222.0 #s(elfeed-ref "13c4a0262e659251e384f6720ec0377fa4485c99") html nil (dev emacs mustread unread) "https://irreal.org/blog/?feed=rss2" (:authors ((:name "jcs")) :categories ("General"))) ("irreal.org" . "https://irreal.org/blog/?p=13231") #s(elfeed-entry ("irreal.org" . "https://irreal.org/blog/?p=13231") "🥩 Red Meat Friday: Hell On Earth" "https://irreal.org/blog/?p=13231" 1756481432.0 #s(elfeed-ref "e59e968b89606c700ea84df469204ea0aed31c60") html nil (dev emacs mustread unread) "https://irreal.org/blog/?feed=rss2" (:authors ((:name "jcs")) :categories ("General" "RMF" "Tech"))) ("irreal.org" . "https://irreal.org/blog/?p=13228") #s(elfeed-entry ("irreal.org" . "https://irreal.org/blog/?p=13228") "Fraga: Elevator Pitch" "https://irreal.org/blog/?p=13228" 1756396254.0 #s(elfeed-ref "70daa6bfaff2ee7bbc5a20ac384878dd18c752d9") html nil (dev emacs mustread unread) "https://irreal.org/blog/?feed=rss2" (:authors ((:name "jcs")) :categories ("General" "Emacs"))) ("irreal.org" . "https://irreal.org/blog/?p=13226") #s(elfeed-entry ("irreal.org" . "https://irreal.org/blog/?p=13226") "Eric MacAdie’s Elevator Pitch" "https://irreal.org/blog/?p=13226" 1756309811.0 #s(elfeed-ref "28ffe7564fe2bcf69215b03ddb3092bb58fe64df") html nil (dev emacs mustread unread) "https://irreal.org/blog/?feed=rss2" (:authors ((:name "jcs")) :categories ("General" "Emacs"))) ("irreal.org" . "https://irreal.org/blog/?p=13224") #s(elfeed-entry ("irreal.org" . "https://irreal.org/blog/?p=13224") "A Casual App For Gnuplot" "https://irreal.org/blog/?p=13224" 1756235663.0 #s(elfeed-ref "15eaac35dbe0ee1cc45a397a4664fb7161603f04") html nil (dev emacs mustread unread) "https://irreal.org/blog/?feed=rss2" (:authors ((:name "jcs")) :categories ("General" "Emacs"))) ("irreal.org" . "https://irreal.org/blog/?p=13221") #s(elfeed-entry ("irreal.org" . "https://irreal.org/blog/?p=13221") "Karl Voit: Why Markdown Is A Disaster" "https://irreal.org/blog/?p=13221" 1756135485.0 #s(elfeed-ref "1e657c320feaea9a944c6ae7ff53a78109197276") html nil (dev emacs mustread unread) "https://irreal.org/blog/?feed=rss2" (:authors ((:name "jcs")) :categories ("General" "Emacs" "Org-mode"))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=13243") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=13243") "Irreal: One Last Elevator Pitch" "https://irreal.org/blog/?p=13243" 1756825786.0 #s(elfeed-ref "422d6715d0acafc46dfc75b2bd762388e680c66e") html nil (dev emacs mustread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Irreal" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "https://so.nwalsh.com/2025/09/02-org-to-xml") #s(elfeed-entry ("planet.emacslife.com" . "https://so.nwalsh.com/2025/09/02-org-to-xml") "Norm: Org to XML (redux)" "https://so.nwalsh.com/2025/09/02-org-to-xml" 1756799530.0 #s(elfeed-ref "8216b0cc6876cbd44f01c158e7dff3833ceccd41") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Norm" :uri "https://so.nwalsh.com/")))) ("planet.emacslife.com" . "https://xenodium.com/diverted-mode") #s(elfeed-entry ("planet.emacslife.com" . "https://xenodium.com/diverted-mode") "Alvaro Ramirez: Diverted mode" "https://xenodium.com/diverted-mode" 1756771200.0 #s(elfeed-ref "64dc1288b577b458f91573ca14f468ba42e989a5") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Alvaro Ramirez" :uri "https://xenodium.com")))) ("planet.emacslife.com" . "https://mbork.pl/2025-09-01_Differentiating_between_C-c_C-c_and_C-c_C-k") #s(elfeed-entry ("planet.emacslife.com" . "https://mbork.pl/2025-09-01_Differentiating_between_C-c_C-c_and_C-c_C-k") "Marcin Borkowski: Differentiating between C-c C-c and C-c C-k" "https://mbork.pl/2025-09-01_Differentiating_between_C-c_C-c_and_C-c_C-k" 1756753916.0 #s(elfeed-ref "3ade6f3f8221988df8cc413f65e595edd7394e3b") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Marcin Borkowski" :uri "https://mbork.pl/Homepage")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=13241") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=13241") "Irreal: A Quick Debugging Tip" "https://irreal.org/blog/?p=13241" 1756745331.0 #s(elfeed-ref "b0dd907da8653b50c639dd92691269d0ccf420bb") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Irreal" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "https://sachachua.com/blog/2025/09/2025-09-01-emacs-news/") #s(elfeed-entry ("planet.emacslife.com" . "https://sachachua.com/blog/2025/09/2025-09-01-emacs-news/") "Sacha Chua: 2025-09-01 Emacs news" "https://sachachua.com/blog/2025/09/2025-09-01-emacs-news/" 1756737589.0 #s(elfeed-ref "d87c2526ecb819d7f841d70d5a1c7e797210da1e") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Sacha Chua" :uri "https://sachachua.com/blog/category/emacs/feed/index.xml")))) ("planet.emacslife.com" . "https://protesilaos.com/codelog/2025-09-01-emacs-doric-themes-0-4-0/") #s(elfeed-entry ("planet.emacslife.com" . "https://protesilaos.com/codelog/2025-09-01-emacs-doric-themes-0-4-0/") "Protesilaos Stavrou: Emacs: doric-themes version 0.4.0" "https://protesilaos.com/codelog/2025-09-01-emacs-doric-themes-0-4-0/" 1756684800.0 #s(elfeed-ref "c756864f957064ec3995c75ecbed077bea438844") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Protesilaos Stavrou" :uri "https://protesilaos.com/codelog")))) ("planet.emacslife.com" . "https://www.hristos.co/blog/enjoying-morrowind-on-linux-part-one-original-engine-revisited/") #s(elfeed-entry ("planet.emacslife.com" . "https://www.hristos.co/blog/enjoying-morrowind-on-linux-part-one-original-engine-revisited/") "Hristos N. Triantafillou: Enjoying Morrowind On Linux - Part One: The Original Engine Revisited" "https://www.hristos.co/blog/enjoying-morrowind-on-linux-part-one-original-engine-revisited/" 1756684800.0 #s(elfeed-ref "4d57b22c60578aebf88aefa389b3db1e548bf8ef") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Hristos N. Triantafillou")))) ("planet.emacslife.com" . "https://sachachua.com/blog/2025/08/emacs-elevator-pitch-tinkerers-unite/") #s(elfeed-entry ("planet.emacslife.com" . "https://sachachua.com/blog/2025/08/emacs-elevator-pitch-tinkerers-unite/") "Sacha Chua: Emacs elevator pitch: tinkerers unite" "https://sachachua.com/blog/2025/08/emacs-elevator-pitch-tinkerers-unite/" 1756660293.0 #s(elfeed-ref "fa306225a5123276163436b4ed7976bcf4854fd7") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Sacha Chua" :uri "https://sachachua.com/blog/category/emacs/feed/index.xml")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=13239") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=13239") "Irreal: Ibuffer Configuration" "https://irreal.org/blog/?p=13239" 1756653660.0 #s(elfeed-ref "ba2ad50f096f00b8e20da0472dbabaabe84d51a5") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Irreal" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "https://list.orgmode.org/87iki3epf9.fsf@gmail.com") #s(elfeed-entry ("planet.emacslife.com" . "https://list.orgmode.org/87iki3epf9.fsf@gmail.com") "Org Mode requests: [RFC] displaying the ':narrow' value in clocktable" "https://list.orgmode.org/87iki3epf9.fsf@gmail.com" 1756637517.0 #s(elfeed-ref "f05a873733ae5b2ccd8082e6454e5fb548caf1e3") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Org Mode requests" :uri "https://orgmode.org/")))) ("planet.emacslife.com" . "https://xenodium.com/who-moved-my-text") #s(elfeed-entry ("planet.emacslife.com" . "https://xenodium.com/who-moved-my-text") "Alvaro Ramirez: Who moved my text?" "https://xenodium.com/who-moved-my-text" 1756598400.0 #s(elfeed-ref "544f85a00900cae0ba117e50a57093dd396938ab") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Alvaro Ramirez" :uri "https://xenodium.com")))) ("planet.emacslife.com" . "https://zacromero.com/post/integrating-work-calendar-with-emacs/") #s(elfeed-entry ("planet.emacslife.com" . "https://zacromero.com/post/integrating-work-calendar-with-emacs/") "Zac Romero: Integrating Google Work Calendar With Emacs" "https://zacromero.com/post/integrating-work-calendar-with-emacs/" 1756576115.0 #s(elfeed-ref "f86d91e247da7104b51714c26912bb5450d628d0") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Zac Romero" :uri "https://zacromero.com/")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=13237") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=13237") "Irreal: Writing Instruction Manuals In Org Mode" "https://irreal.org/blog/?p=13237" 1756569876.0 #s(elfeed-ref "2ff2df54745bbc4147065c4e44af9dedc6b1e7c1") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Irreal" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "https://protesilaos.com/codelog/2025-08-30-prot-asks-alex-lsp-elisp-guix-cycling-philosophy-go-swaywm/") #s(elfeed-entry ("planet.emacslife.com" . "https://protesilaos.com/codelog/2025-08-30-prot-asks-alex-lsp-elisp-guix-cycling-philosophy-go-swaywm/") "Protesilaos Stavrou: Prot Asks: Alex about LSP, Elisp programming, Guix, cycling, Go game, philosophy, and SwayWM" "https://protesilaos.com/codelog/2025-08-30-prot-asks-alex-lsp-elisp-guix-cycling-philosophy-go-swaywm/" 1756512000.0 #s(elfeed-ref "073ca5f7ed94868bd8d461a9e8041b602fb7f5d1") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Protesilaos Stavrou" :uri "https://protesilaos.com/codelog")))) ("planet.emacslife.com" . "https://www.jamescherti.com/pre-commit-elisp-emacs-lisp-git/") #s(elfeed-entry ("planet.emacslife.com" . "https://www.jamescherti.com/pre-commit-elisp-emacs-lisp-git/") "James Cherti: pre-commit-elisp – Pre-commit hooks for Emacs Lisp (Elisp) Git repositories" "https://www.jamescherti.com/pre-commit-elisp-emacs-lisp-git/" 1756495110.0 #s(elfeed-ref "68dac132a45f33732b58d938e15a57bbc851653e") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "James Cherti" :uri "https://www.jamescherti.com")))) ("planet.emacslife.com" . "https://taonaw.com/2025/08/28/a-quick-overiew-about-how.html") #s(elfeed-entry ("planet.emacslife.com" . "https://taonaw.com/2025/08/28/a-quick-overiew-about-how.html") "TAONAW - Emacs and Org Mode: A quick rundown about how I write instructions in org-mode" "https://taonaw.com/2025/08/28/a-quick-overiew-about-how.html" 1756428972.0 #s(elfeed-ref "a58a70ed130e5954b0c8a1b9cd39aa7574b62b2c") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "TAONAW - Emacs and Org Mode" :uri "https://taonaw.com/categories/emacs-org-mode/")))) ("planet.emacslife.com" . "https://xenodium.com/dired-buffers-with-media-overlays") #s(elfeed-entry ("planet.emacslife.com" . "https://xenodium.com/dired-buffers-with-media-overlays") "Alvaro Ramirez: Dired buffers with media overlays" "https://xenodium.com/dired-buffers-with-media-overlays" 1756425600.0 #s(elfeed-ref "d27e4ada2c9a38cc744471b17189123fb4faecc4") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Alvaro Ramirez" :uri "https://xenodium.com")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=13228") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=13228") "Irreal: Fraga: Elevator Pitch" "https://irreal.org/blog/?p=13228" 1756396254.0 #s(elfeed-ref "9bd794dd18f3718c7f142c9268971605b6fabd68") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Irreal" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "https://christiantietze.de/posts/2025/08/clickable-swift-testing-failure-messages-in-emacs-compile-mode/") #s(elfeed-entry ("planet.emacslife.com" . "https://christiantietze.de/posts/2025/08/clickable-swift-testing-failure-messages-in-emacs-compile-mode/") "Christian Tietze: Clickable Swift Testing Failure Messages in Emacs compile-mode" "https://christiantietze.de/posts/2025/08/clickable-swift-testing-failure-messages-in-emacs-compile-mode/" 1756393619.0 #s(elfeed-ref "9d343fba13b74652dce94db0f786854236323ee8") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Christian Tietze" :uri "https://christiantietze.de/")))) ("planet.emacslife.com" . "https://olddeuteronomy.github.io/post/emacs-ibuffer-config/") #s(elfeed-entry ("planet.emacslife.com" . "https://olddeuteronomy.github.io/post/emacs-ibuffer-config/") "The Emacs Cat: My Emacs IBuffer Configuration" "https://olddeuteronomy.github.io/post/emacs-ibuffer-config/" 1756390275.0 #s(elfeed-ref "f08cfc93945abca5704328b679f173eeea3dd27a") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "The Emacs Cat" :uri "https://olddeuteronomy.github.io/")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=13226") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=13226") "Irreal: Eric MacAdie’s Elevator Pitch" "https://irreal.org/blog/?p=13226" 1756309811.0 #s(elfeed-ref "50acc653799eb85527d4c5d6ac278e847c144826") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Irreal" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "https://tusharhero.codeberg.page/emacs-elevator-pitch.html") #s(elfeed-entry ("planet.emacslife.com" . "https://tusharhero.codeberg.page/emacs-elevator-pitch.html") "tusharhero: Emacs Elevator Pitch" "https://tusharhero.codeberg.page/emacs-elevator-pitch.html" 1756267200.0 #s(elfeed-ref "18d543ba378d3d39fc66453051f814d586802714") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "tusharhero" :uri "https://tusharhero.codeberg.page/")))) ("planet.emacslife.com" . "https://www.cyan.sh/blog/posts/controlling-godot-with-emacs.html") #s(elfeed-entry ("planet.emacslife.com" . "https://www.cyan.sh/blog/posts/controlling-godot-with-emacs.html") "Jakub Nowak: Controlling Godot with Emacs" "https://www.cyan.sh/blog/posts/controlling-godot-with-emacs.html" 1756252800.0 #s(elfeed-ref "2be11c7d8245671ba78d0d66e389606da689874b") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Jakub Nowak" :uri "https://www.cyan.sh/blog/feed.xml")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=13224") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=13224") "Irreal: A Casual App For Gnuplot" "https://irreal.org/blog/?p=13224" 1756235663.0 #s(elfeed-ref "e8dd9bdf5a788f55917913d8372f2d5ae4eb35f8") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Irreal" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "https://emacs.dyerdwelling.family/emacs/20250826095622-emacs--a-better-way-to-indent-your-entire-buffer-in-emacs/") #s(elfeed-entry ("planet.emacslife.com" . "https://emacs.dyerdwelling.family/emacs/20250826095622-emacs--a-better-way-to-indent-your-entire-buffer-in-emacs/") "James Dyer: A Better Way to Indent Your Entire Buffer in Emacs?" "https://emacs.dyerdwelling.family/emacs/20250826095622-emacs--a-better-way-to-indent-your-entire-buffer-in-emacs/" 1756198560.0 #s(elfeed-ref "777303a00e597a947bdac306d1df6bbd96517446") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "James Dyer" :uri "https://emacs.dyerdwelling.family/tags/emacs/")))) ("planet.emacslife.com" . "https://macadie.info/2025/08/26/emacs-carnival-elevator-pitch-and-post-pitch-talking-points/") #s(elfeed-entry ("planet.emacslife.com" . "https://macadie.info/2025/08/26/emacs-carnival-elevator-pitch-and-post-pitch-talking-points/") "Eric MacAdie: Emacs Carnival: Elevator Pitch and Post-Pitch Talking Points" "https://macadie.info/2025/08/26/emacs-carnival-elevator-pitch-and-post-pitch-talking-points/" 1756187125.0 #s(elfeed-ref "826f2a33137a59b098fc3ee76a923d026e73b5ae") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Eric MacAdie" :uri "https://macadie.info")))) ("planet.emacslife.com" . "https://protesilaos.com/codelog/2025-08-26-emacs-show-font-0-4-0/") #s(elfeed-entry ("planet.emacslife.com" . "https://protesilaos.com/codelog/2025-08-26-emacs-show-font-0-4-0/") "Protesilaos Stavrou: Emacs: show-font version 0.4.0" "https://protesilaos.com/codelog/2025-08-26-emacs-show-font-0-4-0/" 1756166400.0 #s(elfeed-ref "3be41c8df2c61eed998fe720e42bb7d2b4c580a1") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Protesilaos Stavrou" :uri "https://protesilaos.com/codelog")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=13221") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=13221") "Irreal: Karl Voit: Why Markdown Is A Disaster" "https://irreal.org/blog/?p=13221" 1756135485.0 #s(elfeed-ref "39dcd71dfa4adbae82b871c38c1687d7ef7b23c9") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Irreal" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "https://willschenk.com/howto/2025/claude_code_in_emacs/") #s(elfeed-entry ("planet.emacslife.com" . "https://willschenk.com/howto/2025/claude_code_in_emacs/") "Will Schenk: Claude Code in Emacs" "https://willschenk.com/howto/2025/claude_code_in_emacs/" 1756122125.0 #s(elfeed-ref "5a7f065b0987770cd50738d6e21aec08ee58c8b4") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Will Schenk" :uri "https://willschenk.com/tags/emacs/")))) ("planet.emacslife.com" . "https://sachachua.com/blog/2025/08/2025-08-25-emacs-news/") #s(elfeed-entry ("planet.emacslife.com" . "https://sachachua.com/blog/2025/08/2025-08-25-emacs-news/") "Sacha Chua: 2025-08-25 Emacs news" "https://sachachua.com/blog/2025/08/2025-08-25-emacs-news/" 1756121435.0 #s(elfeed-ref "b116b367c622a9c685e377eaea9df063dc7c6602") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Sacha Chua" :uri "https://sachachua.com/blog/category/emacs/feed/index.xml")))) ("planet.emacslife.com" . "https://mbork.pl/2025-08-25_Counting_Org_mode_headlines") #s(elfeed-entry ("planet.emacslife.com" . "https://mbork.pl/2025-08-25_Counting_Org_mode_headlines") "Marcin Borkowski: Counting Org mode headlines" "https://mbork.pl/2025-08-25_Counting_Org_mode_headlines" 1756100500.0 #s(elfeed-ref "8ee7c699a3eef3ce2e21d6eaf420a4dc9e5bc5b5") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Marcin Borkowski" :uri "https://mbork.pl/Homepage")))) ("planet.emacslife.com" . "http://yummymelon.com/devnull/a-proof-of-concept-to-put-a-better-emacs-ui-on-top-of-gnuplot.html") #s(elfeed-entry ("planet.emacslife.com" . "http://yummymelon.com/devnull/a-proof-of-concept-to-put-a-better-emacs-ui-on-top-of-gnuplot.html") "Charles Choi: A proof of concept to put a better Emacs UI on top of Gnuplot" "http://yummymelon.com/devnull/a-proof-of-concept-to-put-a-better-emacs-ui-on-top-of-gnuplot.html" 1756083600.0 #s(elfeed-ref "de87b5233d41335ff6bbf2c13bdbf59d57985232") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Charles Choi" :uri "http://yummymelon.com/devnull/")))) ("planet.emacslife.com" . "https://xenodium.com/a-tiny-upgrade-to-the-llm-model-picker") #s(elfeed-entry ("planet.emacslife.com" . "https://xenodium.com/a-tiny-upgrade-to-the-llm-model-picker") "Alvaro Ramirez: A tiny upgrade to the LLM model picker" "https://xenodium.com/a-tiny-upgrade-to-the-llm-model-picker" 1756080000.0 #s(elfeed-ref "e5a8549892ee9559579e27068dbd5ae38f0c4d1f") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Alvaro Ramirez" :uri "https://xenodium.com")))) ("planet.emacslife.com" . "https://protesilaos.com/codelog/2025-08-25-prot-asks-ronnie-free-software-privacy-parenting-iraqi-kurdistan/") #s(elfeed-entry ("planet.emacslife.com" . "https://protesilaos.com/codelog/2025-08-25-prot-asks-ronnie-free-software-privacy-parenting-iraqi-kurdistan/") "Protesilaos Stavrou: Prot Asks: Ronnie about free software, privacy, parenting, and life in Iraqi Kurdistan" "https://protesilaos.com/codelog/2025-08-25-prot-asks-ronnie-free-software-privacy-parenting-iraqi-kurdistan/" 1756080000.0 #s(elfeed-ref "e7846020c2634134ccb240b4bad5b4038ba8feeb") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Protesilaos Stavrou" :uri "https://protesilaos.com/codelog")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=13217") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=13217") "Irreal: A Program That Molds To Your Needs II" "https://irreal.org/blog/?p=13217" 1756051715.0 #s(elfeed-ref "3571b9af4bfe2acee4d199ad405889e8d8036f31") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Irreal" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "https://randyridenour.net/posts/2025-08-23-creating-attendance-sheets-with-org-mode.html") #s(elfeed-entry ("planet.emacslife.com" . "https://randyridenour.net/posts/2025-08-23-creating-attendance-sheets-with-org-mode.html") "Randy Ridenour: Creating Attendance Sheets with Org Mode" "https://randyridenour.net/posts/2025-08-23-creating-attendance-sheets-with-org-mode.html" 1756039620.0 #s(elfeed-ref "e81619b2ed115910421bd5ca820e0c0877e9c638") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Randy Ridenour")))) ("planet.emacslife.com" . "https://flandrew.srht.site/listful/llamascii-art.html") #s(elfeed-entry ("planet.emacslife.com" . "https://flandrew.srht.site/listful/llamascii-art.html") "Listful Andrew: llamascii art" "https://flandrew.srht.site/listful/llamascii-art.html" 1756039500.0 #s(elfeed-ref "f466e1dd278ee151c474e1be609230f30bee917f") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Listful Andrew" :uri "https://flandrew.srht.site/listful")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=13215") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=13215") "Irreal: The Case For Markdown" "https://irreal.org/blog/?p=13215" 1755964511.0 #s(elfeed-ref "49a9c46efb2915c54bdac8669f7b54fb4f6d497f") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Irreal" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "https://emacs-apac.gitlab.io/announcements/august-2025/") #s(elfeed-entry ("planet.emacslife.com" . "https://emacs-apac.gitlab.io/announcements/august-2025/") "Emacs APAC: Announcing Emacs Asia-Pacific (APAC) virtual meetup, Saturday, August 23, 2025" "https://emacs-apac.gitlab.io/announcements/august-2025/" 1755896755.0 #s(elfeed-ref "d0a94cef5165bd37d6d06bafe9ce6e8fb507a449") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Emacs APAC" :uri "https://emacs-apac.gitlab.io/categories/event/")))) ("planet.emacslife.com" . "https://feyor.sh/blog/godbolt-in-emacs-with-disaster-and-zig/") #s(elfeed-entry ("planet.emacslife.com" . "https://feyor.sh/blog/godbolt-in-emacs-with-disaster-and-zig/") "George Huebner: disaster.el + zig cc = Budget godbolt" "https://feyor.sh/blog/godbolt-in-emacs-with-disaster-and-zig/" 1755875635.0 #s(elfeed-ref "734639e491f7a141ac13e008890b4a5cea855561") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "George Huebner")))) ("planet.emacslife.com" . "https://feyor.sh/blog/my-other-email-client-is-a-mail-daemon/") #s(elfeed-entry ("planet.emacslife.com" . "https://feyor.sh/blog/my-other-email-client-is-a-mail-daemon/") "George Huebner: My other email client is a daemon" "https://feyor.sh/blog/my-other-email-client-is-a-mail-daemon/" 1755830220.0 #s(elfeed-ref "27e1a1a2e6bcca1a01e6f0eba292746a59e7dac3") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "George Huebner")))) ("planet.emacslife.com" . "http://yitang.uk/emacs/2025/08/22/multiple-working-emacs/") #s(elfeed-entry ("planet.emacslife.com" . "http://yitang.uk/emacs/2025/08/22/multiple-working-emacs/") "Yi Tang: Multiple Working Emacs" "http://yitang.uk/emacs/2025/08/22/multiple-working-emacs/" 1755817200.0 #s(elfeed-ref "5429fbadc815e35065fcf5e06d7c3fae0b11f51d") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Yi Tang")))) ("planet.emacslife.com" . "https://kelar.org/~bandali/2025/08/20/lispy-gopher-climate.html") #s(elfeed-entry ("planet.emacslife.com" . "https://kelar.org/~bandali/2025/08/20/lispy-gopher-climate.html") "Amin Bandali: Lispy Gopher Climate with screwlisp" "https://kelar.org/~bandali/2025/08/20/lispy-gopher-climate.html" 1755746076.0 #s(elfeed-ref "f4c14c1684db988aee4f23f9f31a5ef1340e2ebc") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Amin Bandali" :uri "https://kelar.org/~bandali/")))) ("planet.emacslife.com" . "https://takeonrules.com/2025/08/20/elevator-pitches-for-emacs/") #s(elfeed-entry ("planet.emacslife.com" . "https://takeonrules.com/2025/08/20/elevator-pitches-for-emacs/") "Jeremy Friesen: Elevator Pitches for Emacs" "https://takeonrules.com/2025/08/20/elevator-pitches-for-emacs/" 1755743806.0 #s(elfeed-ref "150ded02e6a6b919cf8b048eb2d621ee371fe01d") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Jeremy Friesen" :uri "https://takeonrules.com/")))) ("planet.emacslife.com" . "https://www.cyan.sh/blog/posts/make-neotree-tab-local.html") #s(elfeed-entry ("planet.emacslife.com" . "https://www.cyan.sh/blog/posts/make-neotree-tab-local.html") "Jakub Nowak: Make Neotree \"Tab-Local\"" "https://www.cyan.sh/blog/posts/make-neotree-tab-local.html" 1755734400.0 #s(elfeed-ref "7b1687d9772bc51fde272c40ec30222ed0c7e2f1") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Jakub Nowak" :uri "https://www.cyan.sh/blog/feed.xml")))) ("planet.emacslife.com" . "https://macadie.info/2025/08/19/2025-08-austin-emacs-meetup/") #s(elfeed-entry ("planet.emacslife.com" . "https://macadie.info/2025/08/19/2025-08-austin-emacs-meetup/") "Eric MacAdie: 2025-08 Austin Emacs Meetup" "https://macadie.info/2025/08/19/2025-08-austin-emacs-meetup/" 1755652921.0 #s(elfeed-ref "41399fadccdfc887197fe16ba12cf814793b3eb3") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Eric MacAdie" :uri "https://macadie.info")))) ("planet.emacslife.com" . "https://xenodium.com/emacs-elevator-pitch") #s(elfeed-entry ("planet.emacslife.com" . "https://xenodium.com/emacs-elevator-pitch") "Alvaro Ramirez: Emacs elevator pitch" "https://xenodium.com/emacs-elevator-pitch" 1755648000.0 #s(elfeed-ref "c6dced29dcf6b07d5cd7f3a14c058a6f4afc14e3") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Alvaro Ramirez" :uri "https://xenodium.com")))) ("planet.emacslife.com" . "https://protesilaos.com/codelog/2025-08-20-prot-asks-dimos-emacs-interconenctedness-collective-work-conspiracies/") #s(elfeed-entry ("planet.emacslife.com" . "https://protesilaos.com/codelog/2025-08-20-prot-asks-dimos-emacs-interconenctedness-collective-work-conspiracies/") "Protesilaos Stavrou: Prot Asks: Dimos about Emacs interconnectedness, collective work, and The Conspiracy Club" "https://protesilaos.com/codelog/2025-08-20-prot-asks-dimos-emacs-interconenctedness-collective-work-conspiracies/" 1755648000.0 #s(elfeed-ref "77d2f631c9563df04fb31fa2fa60f9d434901a6d") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Protesilaos Stavrou" :uri "https://protesilaos.com/codelog")))) ("without.boats" . "https://without.boats/blog/generators-with-unpin-cell/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/generators-with-unpin-cell/") "Generators with UnpinCell" "https://without.boats/blog/generators-with-unpin-cell/" 1729814400.0 #s(elfeed-ref "4534b270def1d1186c646819e688775c239efb37") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/unpin-cell/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/unpin-cell/") "UnpinCell" "https://without.boats/blog/unpin-cell/" 1729036800.0 #s(elfeed-ref "1db53d5d166566dec15179599691194796fe1546") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/pinned-places/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/pinned-places/") "Pinned places" "https://without.boats/blog/pinned-places/" 1721692800.0 #s(elfeed-ref "05b6f4af75bfa144ea66c6d5f86799ca18fc7c66") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/pin/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/pin/") "Pin" "https://without.boats/blog/pin/" 1721347200.0 #s(elfeed-ref "4ff622814906bbfdbf6c997af97a481bb8a877e0") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/ownership/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/ownership/") "Ownership" "https://without.boats/blog/ownership/" 1719014400.0 #s(elfeed-ref "a680eb0438cc73ef6564268abf2cac012d29832b") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/references-are-like-jumps/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/references-are-like-jumps/") "References are like jumps" "https://without.boats/blog/references-are-like-jumps/" 1715558400.0 #s(elfeed-ref "60123e4c381f7b56c9eeff627a5015f277ad4927") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/coroutines-and-effects/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/coroutines-and-effects/") "Coroutines and effects" "https://without.boats/blog/coroutines-and-effects/" 1713571200.0 #s(elfeed-ref "b45e110292fbd83478e9fc1aca4cc7c90da49d14") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/iterators-and-traversables/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/iterators-and-traversables/") "Iterators and traversables" "https://without.boats/blog/iterators-and-traversables/" 1710288000.0 #s(elfeed-ref "765297aa5c8698d7980c345138ff083ebc8c8d23") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/asynchronous-clean-up/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/asynchronous-clean-up/") "Asynchronous clean-up" "https://without.boats/blog/asynchronous-clean-up/" 1708732800.0 #s(elfeed-ref "0d6f942edba410d1b627d0e29202bb471472ad4e") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/futures-unordered/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/futures-unordered/") "FuturesUnordered and the order of futures" "https://without.boats/blog/futures-unordered/" 1708214400.0 #s(elfeed-ref "ccc37251f1738cb7c5a5b418912472fbd5980ca2") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/let-futures-be-futures/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/let-futures-be-futures/") "Let futures be futures" "https://without.boats/blog/let-futures-be-futures/" 1706918400.0 #s(elfeed-ref "c2d38a68241a032c79e9c2501e2e3c8a98fb7081") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/poll-progress/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/poll-progress/") "poll_progress" "https://without.boats/blog/poll-progress/" 1702339200.0 #s(elfeed-ref "af4cd37c53cb0a73cee98c8f504df8158a6321cb") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/three-problems-of-pinning/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/three-problems-of-pinning/") "Three problems of pinning" "https://without.boats/blog/three-problems-of-pinning/" 1701302400.0 #s(elfeed-ref "90237a155aef6863332ca4c8402b13f44fb5dc32") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/coroutines-async-and-iter/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/coroutines-async-and-iter/") "Coroutines, asynchronous and iterative" "https://without.boats/blog/coroutines-async-and-iter/" 1701216000.0 #s(elfeed-ref "e34a3f4de3daab8413297499188cb40324c5c378") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/poll-next/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/poll-next/") "poll_next" "https://without.boats/blog/poll-next/" 1701043200.0 #s(elfeed-ref "086c348cc2db8f8fbc71e7b484281d953feab33d") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/a-four-year-plan/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/a-four-year-plan/") "A four year plan for async Rust" "https://without.boats/blog/a-four-year-plan/" 1699315200.0 #s(elfeed-ref "779873dc29f1acbb7db4845668a922c49cbe1874") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/why-async-rust/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/why-async-rust/") "Why async Rust?" "https://without.boats/blog/why-async-rust/" 1697328000.0 #s(elfeed-ref "7eab6d14837de0f22bd46bf7b37bae5b3ad0547f") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/thread-per-core/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/thread-per-core/") "Thread-per-core" "https://without.boats/blog/thread-per-core/" 1696550400.0 #s(elfeed-ref "66d6acab0f7d3c130d7433eebeb02091c4932e90") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/generic-trait-methods-and-new-auto-traits/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/generic-trait-methods-and-new-auto-traits/") "Generic trait methods and new auto traits" "https://without.boats/blog/generic-trait-methods-and-new-auto-traits/" 1695168000.0 #s(elfeed-ref "ea9bbc8a3ae438f2126c48f35713d784896823d0") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/follow-up-to-changing-the-rules-of-rust/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/follow-up-to-changing-the-rules-of-rust/") "Follow up to \"Changing the rules of Rust\"" "https://without.boats/blog/follow-up-to-changing-the-rules-of-rust/" 1694995200.0 #s(elfeed-ref "4c943fd115c736758a3ddcbba8e070bb65d6bb67") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/changing-the-rules-of-rust/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/changing-the-rules-of-rust/") "Changing the rules of Rust" "https://without.boats/blog/changing-the-rules-of-rust/" 1694908800.0 #s(elfeed-ref "cd65de9a43b89ce2ac8e18058fe5344e98f14493") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/if-you-can-keep-it/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/if-you-can-keep-it/") "A governance system, if you can keep it" "https://without.boats/blog/if-you-can-keep-it/" 1685145600.0 #s(elfeed-ref "028933055725db1ca24a8df4d81487dfd3c2cc31") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/iterator-generator/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/iterator-generator/") "Iterator, Generator" "https://without.boats/blog/iterator-generator/" 1683331200.0 #s(elfeed-ref "ece6a03955eaa2a68d870bc38ef4ad92dc56d3af") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/the-scoped-task-trilemma/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/the-scoped-task-trilemma/") "The Scoped Task trilemma" "https://without.boats/blog/the-scoped-task-trilemma/" 1680912000.0 #s(elfeed-ref "4e36a1830d1c86258d2a6628735328ce9ed56559") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/generators/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/generators/") "Generators" "https://without.boats/blog/generators/" 1679788800.0 #s(elfeed-ref "d6868b6634c67631a16d2b681f9ac36433217159") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/async-iterator/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/async-iterator/") "The AsyncIterator interface" "https://without.boats/blog/async-iterator/" 1679443200.0 #s(elfeed-ref "52dd270fdaa29146c48b15456b87ab3ee8b06c38") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/const-as-an-auto-trait/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/const-as-an-auto-trait/") "Const as an auto trait" "https://without.boats/blog/const-as-an-auto-trait/" 1678924800.0 #s(elfeed-ref "c00a31495cc57cd77ca8a1ac1e0b1578e3cf9560") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/patterns-and-abstractions/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/patterns-and-abstractions/") "Patterns & Abstractions" "https://without.boats/blog/patterns-and-abstractions/" 1678752000.0 #s(elfeed-ref "8ce873b40ee3aeacd7e6515fe5a61ade0ce1fcec") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/the-registers-of-rust/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/the-registers-of-rust/") "The registers of Rust" "https://without.boats/blog/the-registers-of-rust/" 1678233600.0 #s(elfeed-ref "d8c5142dfaca783804afafb2b1fcf5d1f9b3af2d") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/ringbahn-iii/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/ringbahn-iii/") "Ringbahn III: A deeper dive into drivers" "https://without.boats/blog/ringbahn-iii/" 1601510400.0 #s(elfeed-ref "2ceac2f6630d251a303f3d07687256337498f339") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/revisiting-a-smaller-rust/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/revisiting-a-smaller-rust/") "Revisiting a 'smaller Rust'" "https://without.boats/blog/revisiting-a-smaller-rust/" 1601424000.0 #s(elfeed-ref "89c4db863e17377036ca4628ed02658785b34bf5") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/iou-0-3/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/iou-0-3/") "iou version 0.3 released" "https://without.boats/blog/iou-0-3/" 1600732800.0 #s(elfeed-ref "674067257ec0cc74af176a173bf11be82713de6f") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/propane/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/propane/") "Propane: an experimental generator syntax for Rust" "https://without.boats/blog/propane/" 1596672000.0 #s(elfeed-ref "e038c3f738d534fbcec8c79835dea09e0cd94d7d") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/shipping-const-generics/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/shipping-const-generics/") "Shipping Const Generics in 2020" "https://without.boats/blog/shipping-const-generics/" 1594857600.0 #s(elfeed-ref "88d5e3fc65c73327fd815add50b4ad898886303d") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/ringbahn-ii/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/ringbahn-ii/") "Ringbahn II: the central state machine" "https://without.boats/blog/ringbahn-ii/" 1593648000.0 #s(elfeed-ref "3b6acbd993073f485c17972a4463c0254ac2bdf4") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/two-memory-bugs-from-ringbahn/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/two-memory-bugs-from-ringbahn/") "Two Memory Bugs From Ringbahn" "https://without.boats/blog/two-memory-bugs-from-ringbahn/" 1591747200.0 #s(elfeed-ref "4e7f64548da5d53a1a0336a8d5b61e66d96ba0f4") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/futures-and-segmented-stacks/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/futures-and-segmented-stacks/") "Futures and Segmented Stacks" "https://without.boats/blog/futures-and-segmented-stacks/" 1591574400.0 #s(elfeed-ref "e1c13e359e61f1ebbdba45fbbf723b34182d833f") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/ringbahn/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/ringbahn/") "Ringbahn: a safe, ergonomic API for io-uring in Rust" "https://without.boats/blog/ringbahn/" 1590537600.0 #s(elfeed-ref "fb80368761b81ef939f3b7d4e30e1c860efcf05f") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/io-uring/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/io-uring/") "Notes on io-uring" "https://without.boats/blog/io-uring/" 1588723200.0 #s(elfeed-ref "7a16c63f966a6ce7bdbdb973b184f21ba7ff7353") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/the-problem-of-effects/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/the-problem-of-effects/") "The problem of effects in Rust" "https://without.boats/blog/the-problem-of-effects/" 1586736000.0 #s(elfeed-ref "cace50268ab68fdeeba112293d1eb7eb5c207d5c") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/why-ok-wrapping/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/why-ok-wrapping/") "A brief apology of Ok-Wrapping" "https://without.boats/blog/why-ok-wrapping/" 1586217600.0 #s(elfeed-ref "a1497a04d200c4c5b6f697398b26e58500f69250") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/failure-to-fehler/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/failure-to-fehler/") "From failure to Fehler" "https://without.boats/blog/failure-to-fehler/" 1586131200.0 #s(elfeed-ref "059670a8269a1bd69de4f833f27eb032e1b827e4") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/vulnerabilities/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/vulnerabilities/") "What constitutes a vulnerability?" "https://without.boats/blog/vulnerabilities/" 1585699200.0 #s(elfeed-ref "fac136c7dc6517f39805b85163ca5a388674dbb4") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/waitmap/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/waitmap/") "waitmap - an async awaitable map" "https://without.boats/blog/waitmap/" 1583971200.0 #s(elfeed-ref "4bb5a1c3d81f08d81cae0c9db9b131b6369b6622") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/global-executors/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/global-executors/") "Global Executors" "https://without.boats/blog/global-executors/" 1573689600.0 #s(elfeed-ref "1fea029cf468e1c68838a3b291635f27e76c3691") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/iou/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/iou/") "iou: Rust bindings for liburing" "https://without.boats/blog/iou/" 1573171200.0 #s(elfeed-ref "0e721aa558b43ad52a8c97b425cc2b56e709f686") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/poll-drop/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/poll-drop/") "Asynchronous Destructors" "https://without.boats/blog/poll-drop/" 1571184000.0 #s(elfeed-ref "638806c010da4597c5bdbdf739b0b6fd0415e874") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/notes-on-a-smaller-rust/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/notes-on-a-smaller-rust/") "Notes on a smaller Rust" "https://without.boats/blog/notes-on-a-smaller-rust/" 1563321600.0 #s(elfeed-ref "1e8052a8ad40a3c0bf114c282b307bdd329b7f7b") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/await-decision-ii/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/await-decision-ii/") "Update on await syntax" "https://without.boats/blog/await-decision-ii/" 1559001600.0 #s(elfeed-ref "9b44aedd7c5fe359d1b6817e1a0e59b792682366") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/zero-cost-abstractions/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/zero-cost-abstractions/") "Zero Cost Abstractions" "https://without.boats/blog/zero-cost-abstractions/" 1557964800.0 #s(elfeed-ref "5b9d31cfeaff20e93268883a7634510f6160d044") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/await-decision/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/await-decision/") "A final proposal for await syntax" "https://without.boats/blog/await-decision/" 1557100800.0 #s(elfeed-ref "e7aac07738e5657b34378170a41c0af6de95f434") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/for-await-i/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/for-await-i/") "for await loops (Part I)" "https://without.boats/blog/for-await-i/" 1555286400.0 #s(elfeed-ref "6ba6996afc8d9ed3642a4b651d75090d48c4236d") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/generators-ii/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/generators-ii/") "Generators II: The Question Mark Problem" "https://without.boats/blog/generators-ii/" 1550448000.0 #s(elfeed-ref "20ce26c2485f58160eecd56844a3d8bdef343767") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/generators-i/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/generators-i/") "Generators I: Toward a minimum viable product" "https://without.boats/blog/generators-i/" 1549843200.0 #s(elfeed-ref "a55703b148bcb87039161528f69c18390d928241") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/wakers-ii/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/wakers-ii/") "The Waker API II: waking across threads" "https://without.boats/blog/wakers-ii/" 1547164800.0 #s(elfeed-ref "689df1f165a7484120e366a78b50db7ece325365") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/wakers-i/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/wakers-i/") "The Waker API I: what does a waker do?" "https://without.boats/blog/wakers-i/" 1546819200.0 #s(elfeed-ref "7e3568cc3375e9383b491e113f9ea2cea505ff70") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/rust-2019/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/rust-2019/") "Organizational Debt" "https://without.boats/blog/rust-2019/" 1544918400.0 #s(elfeed-ref "817a2a83165333bb2afbd76529f8eccd325830df") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/romio/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/romio/") "Wherefore art thou Romio?" "https://without.boats/blog/romio/" 1543968000.0 #s(elfeed-ref "3c684606c17ff8d33e5ae6bf54650a2320915ab9") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/await-syntax/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/await-syntax/") "Making progress in await syntax" "https://without.boats/blog/await-syntax/" 1541635200.0 #s(elfeed-ref "e424907f43a7d2aade4db4f16cc40c581a7ebb9e") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/anchored-uniform/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/anchored-uniform/") "Anchored and Uniform Paths" "https://without.boats/blog/anchored-uniform/" 1541116800.0 #s(elfeed-ref "4efb0c0116b89e61c1e97e048a45c42eff9698ad") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/shifgrethor-iv/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/shifgrethor-iv/") "Shifgrethor IV: Tracing" "https://without.boats/blog/shifgrethor-iv/" 1540944000.0 #s(elfeed-ref "a2ffdb254e748791e22a06dbc90ffe06a45c5c47") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/shifgrethor-iii/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/shifgrethor-iii/") "Shifgrethor III: Rooting" "https://without.boats/blog/shifgrethor-iii/" 1540339200.0 #s(elfeed-ref "fe8be9daed55fb62147f4bfd82bae439baa6310f") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/shifgrethor-ii/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/shifgrethor-ii/") "Shifgrethor II: Notes on tracing garbage collectors" "https://without.boats/blog/shifgrethor-ii/" 1540166400.0 #s(elfeed-ref "ec3d6d4fe8925b78b05d5956407596ea3a47b465") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/shifgrethor-i/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/shifgrethor-i/") "Shifgrethor I: Garbage collection as a Rust library" "https://without.boats/blog/shifgrethor-i/" 1539648000.0 #s(elfeed-ref "0eccf7009005292255cb8171a3588739956dc58a") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/the-hard-part-of-open-source/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/the-hard-part-of-open-source/") "The hard parts of talking about open source" "https://without.boats/blog/the-hard-part-of-open-source/" 1539648000.0 #s(elfeed-ref "c3173c26a5fceeb2ba92b66204e023dec2c3788c") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/pin-cell/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/pin-cell/") "New crate: pin-cell" "https://without.boats/blog/pin-cell/" 1539043200.0 #s(elfeed-ref "376da75ea18f06bc9459bb300371d945c445236b") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/names-and-scuba/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/names-and-scuba/") "Thinking about names, as well as scuba diving" "https://without.boats/blog/names-and-scuba/" 1536537600.0 #s(elfeed-ref "6b5609be3682544afce497e2630d8ead5eafead6") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/rethinking-pin/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/rethinking-pin/") "Another look at the pinning API" "https://without.boats/blog/rethinking-pin/" 1534896000.0 #s(elfeed-ref "227d9f779f1801935abf8d6db7e4325aadc130f4") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/my-experience-with-rust-2018/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/my-experience-with-rust-2018/") "My experience with the Rust 2018 preview" "https://without.boats/blog/my-experience-with-rust-2018/" 1532390400.0 #s(elfeed-ref "8c358cdc389dcd5008b5a794524ac6ba376ae8d8") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/signing-commits-without-gpg/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/signing-commits-without-gpg/") "Signing my git commits without GPG" "https://without.boats/blog/signing-commits-without-gpg/" 1532304000.0 #s(elfeed-ref "5757e70aebbdb1a54dae09c9e42cd08b37fc8dad") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/async-methods-ii/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/async-methods-ii/") "Async Methods II: object safety" "https://without.boats/blog/async-methods-ii/" 1528070400.0 #s(elfeed-ref "2ad0095372bef4aef2a574c05b7d6e7da6a8a1a9") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/async-methods-i/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/async-methods-i/") "Async Methods I: generic associated types" "https://without.boats/blog/async-methods-i/" 1527724800.0 #s(elfeed-ref "80b9fc2849a0aa98ec2be981b0d62c109b295a14") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/async-await-final/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/async-await-final/") "Async & Await in Rust: a full proposal" "https://without.boats/blog/async-await-final/" 1522972800.0 #s(elfeed-ref "50e3b71c79aa68d916694108ca65518405aff9cb") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/async-vi/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/async-vi/") "Async/Await VI: 6 weeks of great progress" "https://without.boats/blog/async-vi/" 1521504000.0 #s(elfeed-ref "726052bf031856bddbc72bffe6cc3992ff5e8b6c") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/failure-1.0/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/failure-1.0/") "Failure 1.0.0 on March 15" "https://without.boats/blog/failure-1.0/" 1519257600.0 #s(elfeed-ref "82db48139b834461e08b3bee8f270e599d0a54f3") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/async-v-getting-back-to-the-futures/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/async-v-getting-back-to-the-futures/") "Async/Await V: Getting back to the futures" "https://without.boats/blog/async-v-getting-back-to-the-futures/" 1518048000.0 #s(elfeed-ref "1d01229ac57b1a43ab83c678939730972b653cdf") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/async-iv-an-even-better-proposal/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/async-iv-an-even-better-proposal/") "Async/Await IV: An Even Better Proposal" "https://without.boats/blog/async-iv-an-even-better-proposal/" 1517961600.0 #s(elfeed-ref "7d612ef46b7b0f6fdff050a0afb4a1586e4a46bc") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/async-iii-moving-forward/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/async-iii-moving-forward/") "Async/Await III: Moving Forward with Something Shippable" "https://without.boats/blog/async-iii-moving-forward/" 1517702400.0 #s(elfeed-ref "12a3d683697461c1e8ef2131745a085af3717fcd") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/async-ii-narrowing-the-scope/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/async-ii-narrowing-the-scope/") "Async/Await II: Narrowing the Scope of the Problem" "https://without.boats/blog/async-ii-narrowing-the-scope/" 1517356800.0 #s(elfeed-ref "daa1bcfe876b5b11846377adb3e5aecf5a7fcde8") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/async-i-self-referential-structs/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/async-i-self-referential-structs/") "Async/Await I: Self-Referential Structs" "https://without.boats/blog/async-i-self-referential-structs/" 1516838400.0 #s(elfeed-ref "13bfebe9c990087c2fbbc419d3f375eb608c30ff") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/configure/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/configure/") "Announcing a new project: configure" "https://without.boats/blog/configure/" 1516233600.0 #s(elfeed-ref "b10ee4543b5e0676ad052708ac6522041fc0f9de") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/goals-for-rust/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/goals-for-rust/") "My Goals for Rust in 2018" "https://without.boats/blog/goals-for-rust/" 1515456000.0 #s(elfeed-ref "be6c4be941bb08de2233d888ee738a06ed8e78b9") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/unsafe-abstractions/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/unsafe-abstractions/") "Unsafe Abstractions" "https://without.boats/blog/unsafe-abstractions/" 1515024000.0 #s(elfeed-ref "7be9d84ea9e083d5a32eaffcba918c81f12f4350") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/things-explicit-is-not/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/things-explicit-is-not/") "Not Explicit" "https://without.boats/blog/things-explicit-is-not/" 1514332800.0 #s(elfeed-ref "4383c5b9c991bdc98ad74d6a92f115267da4177f") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/failure-0-1-1/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/failure-0-1-1/") "Failure 0.1.1 released" "https://without.boats/blog/failure-0-1-1/" 1512000000.0 #s(elfeed-ref "c16ba60c5ae290ad8f4e1ea9b0f9191a15c910ee") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/announcing-failure/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/announcing-failure/") "Announcing Failure" "https://without.boats/blog/announcing-failure/" 1510790400.0 #s(elfeed-ref "d84a220ef62717522e9f01cbf76b297ae5067de2") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/alternative-registries/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/alternative-registries/") "Alternative Registries" "https://without.boats/blog/alternative-registries/" 1508793021.0 #s(elfeed-ref "3522336c207efb9142bd75d485c4002f9dffa054") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/blogging-with-gitlab-and-hugo/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/blogging-with-gitlab-and-hugo/") "Blogging With GitLab and Hugo" "https://without.boats/blog/blogging-with-gitlab-and-hugo/" 1506556800.0 #s(elfeed-ref "16f0ed75a4043ca86a1f104c985aad7ca7da2cdb") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/handshake-patterns/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/handshake-patterns/") "Handshake Patterns" "https://without.boats/blog/handshake-patterns/" 1484956800.0 #s(elfeed-ref "e440e96ef8ba63c6aa70f5cebb5bcf7bfa735824") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/blog/the-rust-module-system-is-too-confusing/") #s(elfeed-entry ("without.boats" . "https://without.boats/blog/the-rust-module-system-is-too-confusing/") "The Rust module system is too confusing" "https://without.boats/blog/the-rust-module-system-is-too-confusing/" 1483488000.0 #s(elfeed-ref "9f4726e321e22bc7f0b4fb2d148e72f7244af350") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("without.boats" . "https://without.boats/404.html") #s(elfeed-entry ("without.boats" . "https://without.boats/404.html") "404 Page Not Found" "https://without.boats/404.html" 978307200.0 #s(elfeed-ref "035a4945fab72775e5aa54f1ec1de05d0fb6526b") html nil (dev systems unread) "https://without.boats/index.xml" nil) ("blog.sigplan.org" . "https://blog.sigplan.org/?p=3026") #s(elfeed-entry ("blog.sigplan.org" . "https://blog.sigplan.org/?p=3026") "AI Models Need a Virtual Machine" "https://blog.sigplan.org/2025/08/29/ai-models-need-a-virtual-machine/" 1756458039.0 #s(elfeed-ref "eae5b6747bf8e23971af5b9beec22efb14e2724a") html nil (dev theory unread) "https://blog.sigplan.org/feed/" (:authors ((:name "Ben Zorn")) :categories ("Uncategorized"))) ("blog.sigplan.org" . "https://blog.sigplan.org/?p=3018") #s(elfeed-entry ("blog.sigplan.org" . "https://blog.sigplan.org/?p=3018") "The Academic Pipeline Stall: Why Industry Must Stand for Academia" "https://blog.sigplan.org/2025/05/19/the-academic-pipeline-stall-why-industry-must-stand-for-academia/" 1747662218.0 #s(elfeed-ref "51df08ebb67382d11d2a8b9cbd5c0b7edd881cfe") html nil (dev theory unread) "https://blog.sigplan.org/feed/" (:authors ((:name "Adrian Sampson")) :categories ("Process" "culture" "funding"))) ("blog.sigplan.org" . "https://blog.sigplan.org/?p=3005") #s(elfeed-entry ("blog.sigplan.org" . "https://blog.sigplan.org/?p=3005") "How to Give a Good Talk" "https://blog.sigplan.org/2025/03/31/how-to-give-a-good-talk/" 1743426003.0 #s(elfeed-ref "9e9fc900146a4b70d185cd1f51722e9db71306a8") html nil (dev theory unread) "https://blog.sigplan.org/feed/" (:authors ((:name "Michael Greenberg")) :categories ("Process"))) ("blog.sigplan.org" . "https://blog.sigplan.org/?p=2973") #s(elfeed-entry ("blog.sigplan.org" . "https://blog.sigplan.org/?p=2973") "Testing AI Software Isn’t Like Testing Plain Old Software" "https://blog.sigplan.org/2025/03/20/testing-ai-software-isnt-like-testing-plain-old-software/" 1742487696.0 #s(elfeed-ref "a5180ff363f53e177542763b39f4e9879790f6d5") html nil (dev theory unread) "https://blog.sigplan.org/feed/" (:authors ((:name "Ben Zorn")) :categories ("Programming" "Research" "artificial intelligence" "prompt engineering" "software engineering" "testing"))) ("blog.sigplan.org" . "https://blog.sigplan.org/?p=2905") #s(elfeed-entry ("blog.sigplan.org" . "https://blog.sigplan.org/?p=2905") "Parametric Subtyping for Structural Parametric Polymorphism" "https://blog.sigplan.org/2025/01/29/parametric-subtyping-for-structural-parametric-polymorphism/" 1738155602.0 #s(elfeed-ref "94eee5e7160323fec26c67db81059a53caf64a8e") html nil (dev theory unread) "https://blog.sigplan.org/feed/" (:authors ((:name "Andreia Mordido")) :categories ("Research" "parametric polymorphism" "saturation-based algorithms" "structural subtyping"))) ("blog.sigplan.org" . "https://blog.sigplan.org/?p=2890") #s(elfeed-entry ("blog.sigplan.org" . "https://blog.sigplan.org/?p=2890") "The Missing Mentoring Pillar" "https://blog.sigplan.org/2025/01/13/the-missing-mentoring-pillar/" 1736776831.0 #s(elfeed-ref "ecd2ca7b948657a305306f3db468fa0cc3068a12") html nil (dev theory unread) "https://blog.sigplan.org/feed/" (:authors ((:name "Rachit Nigam")) :categories ("Announcement" "Education"))) ("blog.sigplan.org" . "https://blog.sigplan.org/?p=2881") #s(elfeed-entry ("blog.sigplan.org" . "https://blog.sigplan.org/?p=2881") "“Should PLDI return to in-person Program Committee meetings?” – Survey results" "https://blog.sigplan.org/2025/01/02/should-pldi-return-to-in-person-program-committee-meetings-survey-results/" 1735822844.0 #s(elfeed-ref "f6674b3e1d570d8c0cdc28d40b20cd49fcc95b50") html nil (dev theory unread) "https://blog.sigplan.org/feed/" (:authors ((:name "Alastair Donaldson")) :categories ("Announcement" "Education"))) ("blog.sigplan.org" . "https://blog.sigplan.org/?p=2870") #s(elfeed-entry ("blog.sigplan.org" . "https://blog.sigplan.org/?p=2870") "Evaluating Human Factors Beyond Lines of Code" "https://blog.sigplan.org/2024/11/21/evaluating-human-factors-beyond-lines-of-code/" 1732202561.0 #s(elfeed-ref "ffb00b98738de7fe7b5300f4638e8d9bb7fb9826") html nil (dev theory unread) "https://blog.sigplan.org/feed/" (:authors ((:name "Will Crichton")) :categories ("Uncategorized" "human factors" "language design" "Measurements"))) ("blog.sigplan.org" . "https://blog.sigplan.org/?p=2861") #s(elfeed-entry ("blog.sigplan.org" . "https://blog.sigplan.org/?p=2861") "Evaluating the new ASPLOS review process" "https://blog.sigplan.org/2024/11/04/evaluating-the-new-asplos-review-process/" 1730763763.0 #s(elfeed-ref "d4cfbf535583f4413dc5b6628a61246766adac05") html nil (dev theory unread) "https://blog.sigplan.org/feed/" (:authors ((:name "Tor Aamodt")) :categories ("Uncategorized"))) ("blog.sigplan.org" . "https://blog.sigplan.org/?p=2837") #s(elfeed-entry ("blog.sigplan.org" . "https://blog.sigplan.org/?p=2837") "Prompts are Programs" "https://blog.sigplan.org/2024/10/22/prompts-are-programs/" 1729610003.0 #s(elfeed-ref "454c9e0e0a62559ed46d74defbc0fc7292763f09") html nil (dev theory unread) "https://blog.sigplan.org/feed/" (:authors ((:name "Ben Zorn")) :categories ("Programming" "Research" "Uncategorized"))) ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/nvim-tabline") #s(elfeed-entry ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/nvim-tabline") "Building a Custom Tabline in Neovim with Lua" "https://rahuljuliato.com/posts/nvim-tabline" 1755634200.0 #s(elfeed-ref "15002a53a77e0cd5f96072e45efad83a36cfb37c") html nil (dev emacs mustread unread) "https://www.rahuljuliato.com/rss.xml" nil) ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/react-workers") #s(elfeed-entry ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/react-workers") "Unlocking Web Workers with React: A Step-by-Step Guide" "https://rahuljuliato.com/posts/react-workers" 1754340295.0 #s(elfeed-ref "45393b8a10d9d0c3f4870496f228567162539215") html nil (dev emacs mustread unread) "https://www.rahuljuliato.com/rss.xml" nil) ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/emacs-kick-0-3-0") #s(elfeed-entry ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/emacs-kick-0-3-0") "Emacs Kick 0.3.0: Floating Docs, Snappy Completion, and Corfu Goodness" "https://rahuljuliato.com/posts/emacs-kick-0-3-0" 1753801200.0 #s(elfeed-ref "ab6f167c8c3d461b50fb432b5b909797ff244d2e") html nil (dev emacs mustread unread) "https://www.rahuljuliato.com/rss.xml" nil) ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/emacs-tab-bar-groups") #s(elfeed-entry ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/emacs-tab-bar-groups") "Setting up Emacs native tab-bar and tab-bar-groups for a tmux-like experience" "https://rahuljuliato.com/posts/emacs-tab-bar-groups" 1750795200.0 #s(elfeed-ref "0729255e54de134b5747083bbd8b4edda5b65275") html nil (dev emacs mustread unread) "https://www.rahuljuliato.com/rss.xml" nil) ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/emacs-clipboard-terminal") #s(elfeed-entry ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/emacs-clipboard-terminal") "Minimal Clipboard Support in Terminal Emacs" "https://rahuljuliato.com/posts/emacs-clipboard-terminal" 1750276800.0 #s(elfeed-ref "b0199bc6af164cfe6f7737f792c8fa11312c215c") html nil (dev emacs mustread unread) "https://www.rahuljuliato.com/rss.xml" nil) ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/jj-cheat-sheet") #s(elfeed-entry ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/jj-cheat-sheet") "Jujutsu VCS: My Personal Cheat Sheet" "https://rahuljuliato.com/posts/jj-cheat-sheet" 1748721600.0 #s(elfeed-ref "8ef921adc2ee49e9b95b971adbae6ba006a465db") html nil (dev emacs mustread unread) "https://www.rahuljuliato.com/rss.xml" nil) ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/dired-enhanced") #s(elfeed-entry ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/dired-enhanced") "Improving Dired in Emacs Solo: Git Status and File Icons" "https://rahuljuliato.com/posts/dired-enhanced" 1746053880.0 #s(elfeed-ref "6b6c50a8ad2de87a8ba0276a372d9a5f5e99fe43") html nil (dev emacs mustread unread) "https://www.rahuljuliato.com/rss.xml" nil) ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/emacs-solo-demo") #s(elfeed-entry ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/emacs-solo-demo") "Emacs Solo: A Surprise System Crafters Live Demo" "https://rahuljuliato.com/posts/emacs-solo-demo" 1743046327.0 #s(elfeed-ref "185b5e40d0a656b84faf86121ab0e582127bc83d") html nil (dev emacs mustread unread) "https://www.rahuljuliato.com/rss.xml" nil) ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/vc-git-functions") #s(elfeed-entry ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/vc-git-functions") "Custom VC-Focused Emacs Functions I Created to Enhance My Git Workflow" "https://rahuljuliato.com/posts/vc-git-functions" 1742515320.0 #s(elfeed-ref "a5800682e5fcaa685f42b86804b06e7858950807") html nil (dev emacs mustread unread) "https://www.rahuljuliato.com/rss.xml" nil) ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/compiling_emacs_30_1") #s(elfeed-entry ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/compiling_emacs_30_1") "Compiling Emacs 30.1 from the source on Debian" "https://rahuljuliato.com/posts/compiling_emacs_30_1" 1740268920.0 #s(elfeed-ref "ffc4100b76e265d354fc69d0cbea4060774f0b39") html nil (dev emacs mustread unread) "https://www.rahuljuliato.com/rss.xml" nil) ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/nvim-0x0") #s(elfeed-entry ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/nvim-0x0") "nvim-0x0 – Upload files, yanks, and selections to 0x0.st" "https://rahuljuliato.com/posts/nvim-0x0" 1738936800.0 #s(elfeed-ref "3a5d81db20fc2ed620b27a8bb05cd5270a932fa8") html nil (dev emacs mustread unread) "https://www.rahuljuliato.com/rss.xml" nil) ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/in-buffer-icomplete-2") #s(elfeed-entry ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/in-buffer-icomplete-2") "Enhancing icomplete-vertical-mode in Emacs: A Follow-Up" "https://rahuljuliato.com/posts/in-buffer-icomplete-2" 1737640800.0 #s(elfeed-ref "e2a2fc85bc0999756af6d39d6a1057702c6ee2fe") html nil (dev emacs mustread unread) "https://www.rahuljuliato.com/rss.xml" nil) ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/in-buffer-icomplete") #s(elfeed-entry ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/in-buffer-icomplete") "Enhancing icomplete-vertical-mode in Emacs" "https://rahuljuliato.com/posts/in-buffer-icomplete" 1734616800.0 #s(elfeed-ref "fadbc6b728c00c36ff6540b41a7b9f02dce915d4") html nil (dev emacs mustread unread) "https://www.rahuljuliato.com/rss.xml" nil) ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/multiple-eln-cache") #s(elfeed-entry ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/multiple-eln-cache") "How to Share Your Emacs Configuration Between Different Machines (and Architectures) with Native Compilation" "https://rahuljuliato.com/posts/multiple-eln-cache" 1734454800.0 #s(elfeed-ref "552fabc72f464eec23386495c3bfe85ebfd7a285") html nil (dev emacs mustread unread) "https://www.rahuljuliato.com/rss.xml" nil) ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/emacs-docker-podman") #s(elfeed-entry ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/emacs-docker-podman") "Using Emacs for Container Development: Configuring Emacs for Podman and Docker Support" "https://rahuljuliato.com/posts/emacs-docker-podman" 1730678520.0 #s(elfeed-ref "b1865571e772f20a9269a987fbbf55297f07d6c2") html nil (dev emacs mustread unread) "https://www.rahuljuliato.com/rss.xml" nil) ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/emacs-kick") #s(elfeed-entry ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/emacs-kick") "Emacs-Kick: A Neovim User’s Friendly Start to Emacs" "https://rahuljuliato.com/posts/emacs-kick" 1728432120.0 #s(elfeed-ref "abcbb5a6023279bf02fb658fdffc569bf08ae1ea") html nil (dev emacs mustread unread) "https://www.rahuljuliato.com/rss.xml" nil) ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/golang_debian") #s(elfeed-entry ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/golang_debian") "Setting up Go Lang on Debian" "https://rahuljuliato.com/posts/golang_debian" 1723593720.0 #s(elfeed-ref "243f244fb6d4a18da8ec1bc484ec5440a0391b08") html nil (dev emacs mustread unread) "https://www.rahuljuliato.com/rss.xml" nil) ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/eslint-on-emacs") #s(elfeed-entry ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/eslint-on-emacs") "Making Emacs Work with Project's ESLint" "https://rahuljuliato.com/posts/eslint-on-emacs" 1720177200.0 #s(elfeed-ref "111e1e68c9c4d1bca1c6d03a5d624c746ec66f47") html nil (dev emacs mustread unread) "https://www.rahuljuliato.com/rss.xml" nil) ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/react-game-of-life") #s(elfeed-entry ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/react-game-of-life") "Creating Conway's Game of Life with React and TypeScript" "https://rahuljuliato.com/posts/react-game-of-life" 1719745200.0 #s(elfeed-ref "c12c2f760dc0d3c3b5ca16c246ffb33fa2398072") html nil (dev emacs mustread unread) "https://www.rahuljuliato.com/rss.xml" nil) ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/github_to_codeberg") #s(elfeed-entry ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/github_to_codeberg") "Github to Codeberg Bulk Migration Script" "https://rahuljuliato.com/posts/github_to_codeberg" 1715385600.0 #s(elfeed-ref "f6c8087377f87270c7b47c71afef6aa6d6faea04") html nil (dev emacs mustread unread) "https://www.rahuljuliato.com/rss.xml" nil) ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/nerd-fonts") #s(elfeed-entry ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/nerd-fonts") "Nerd Fonts Installer" "https://rahuljuliato.com/posts/nerd-fonts" 1714262400.0 #s(elfeed-ref "5efb7ce3cd5428931e997e2ce0efcab6736e7fe7") html nil (dev emacs mustread unread) "https://www.rahuljuliato.com/rss.xml" nil) ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/zod-tutorial") #s(elfeed-entry ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/zod-tutorial") "Zod Quick Tutorial" "https://rahuljuliato.com/posts/zod-tutorial" 1710892920.0 #s(elfeed-ref "6ef302d26238e30dae3bfa61af6e3624d966a8ca") html nil (dev emacs mustread unread) "https://www.rahuljuliato.com/rss.xml" nil) ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/lemacs") #s(elfeed-entry ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/lemacs") "My personal Emacs Config (LEmacs - L(ionyx)Emacs)" "https://rahuljuliato.com/posts/lemacs" 1709078520.0 #s(elfeed-ref "02654b029d476ef49e86648fba48f090a5092055") html nil (dev emacs mustread unread) "https://www.rahuljuliato.com/rss.xml" nil) ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/compiling_emacs_29_2") #s(elfeed-entry ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/compiling_emacs_29_2") "Compiling Emacs 29.2 from the source on Debian" "https://rahuljuliato.com/posts/compiling_emacs_29_2" 1705881720.0 #s(elfeed-ref "2acae9eb196f57145927dc1e3adea03fe7d77873") html nil (dev emacs mustread unread) "https://www.rahuljuliato.com/rss.xml" nil) ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/rahuls-lab") #s(elfeed-entry ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/rahuls-lab") "Rahul's Lab Archives: Navigating Tech and Education" "https://rahuljuliato.com/posts/rahuls-lab" 1705104120.0 #s(elfeed-ref "bb896c8029981921e6eee353e2845db1f1fe6dd6") html nil (dev emacs mustread unread) "https://www.rahuljuliato.com/rss.xml" nil) ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/pyradio-m3u") #s(elfeed-entry ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/pyradio-m3u") "Spicing Up Your PyRadio: Easy Peasy Online Radio Playlists Integration" "https://rahuljuliato.com/posts/pyradio-m3u" 1699660920.0 #s(elfeed-ref "de97daa7d4da38ba99e991e8deec0c0a12ce3e6d") html nil (dev emacs mustread unread) "https://www.rahuljuliato.com/rss.xml" nil) ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/ellama") #s(elfeed-entry ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/ellama") "Ollama on Emacs with Ellama" "https://rahuljuliato.com/posts/ellama" 1698537720.0 #s(elfeed-ref "eace937f4ce4b711ac3ce212b15d0e71e4a8d948") html nil (dev emacs mustread unread) "https://www.rahuljuliato.com/rss.xml" nil) ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/auto-dark-catppuccin") #s(elfeed-entry ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/auto-dark-catppuccin") "Catppuccin Themes with Auto-Dark in Emacs" "https://rahuljuliato.com/posts/auto-dark-catppuccin" 1697241720.0 #s(elfeed-ref "7ccc661a9bc5f1e851ab6220f2789349e7cff77b") html nil (dev emacs mustread unread) "https://www.rahuljuliato.com/rss.xml" nil) ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/grub-os-probe") #s(elfeed-entry ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/grub-os-probe") "Restoring the \"Windows\" entry in GRUB" "https://rahuljuliato.com/posts/grub-os-probe" 1696723320.0 #s(elfeed-ref "59e74e4508adcca5dfd53a91dc259b2c45526732") html nil (dev emacs mustread unread) "https://www.rahuljuliato.com/rss.xml" nil) ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/c-cedilla") #s(elfeed-entry ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/c-cedilla") "Resolving Ç (Cedilla) Issue on Debian 12" "https://rahuljuliato.com/posts/c-cedilla" 1696464120.0 #s(elfeed-ref "6c08427efe48f768138c493b9b879fd4c181eae6") html nil (dev emacs mustread unread) "https://www.rahuljuliato.com/rss.xml" nil) ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/basic-emacs-alias") #s(elfeed-entry ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/basic-emacs-alias") "Launching Emacs: A Simplified Approach" "https://rahuljuliato.com/posts/basic-emacs-alias" 1696377720.0 #s(elfeed-ref "26af484005dc2fc907e53b96a64baaf199f8de41") html nil (dev emacs mustread unread) "https://www.rahuljuliato.com/rss.xml" nil) ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/launching-emacs-terminal") #s(elfeed-entry ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/launching-emacs-terminal") "Quick Tip: Launching Emacs from the Terminal Like a Pro" "https://rahuljuliato.com/posts/launching-emacs-terminal" 1696377600.0 #s(elfeed-ref "77e7e083f89b7b829f18ef4e87088b657757739f") html nil (dev emacs mustread unread) "https://www.rahuljuliato.com/rss.xml" nil) ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/mindful-upgrades") #s(elfeed-entry ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/mindful-upgrades") "Upgrade with Yarn Mindfully" "https://rahuljuliato.com/posts/mindful-upgrades" 1696204800.0 #s(elfeed-ref "d97e5e0cd53dc3dec0c2f2f7381e222f4e039b56") html nil (dev emacs mustread unread) "https://www.rahuljuliato.com/rss.xml" nil) ("www.terminally-incoherent.com" . "http://www.terminally-incoherent.com/blog/?p=18752") #s(elfeed-entry ("www.terminally-incoherent.com" . "http://www.terminally-incoherent.com/blog/?p=18752") "Rockets and Rayguns" "http://www.terminally-incoherent.com/blog/2016/03/08/rockets-and-rayguns/" 1457492698.0 #s(elfeed-ref "8131ad9feb7cfa6477465fedff972f1b5b7496c1") html nil (dev emacs mustread unread) "http://www.terminally-incoherent.com/blog/feed" (:authors ((:name "Luke Maciak")) :categories ("random stuff" "rpg and tabletop"))) ("www.terminally-incoherent.com" . "http://www.terminally-incoherent.com/blog/?p=18695") #s(elfeed-entry ("www.terminally-incoherent.com" . "http://www.terminally-incoherent.com/blog/?p=18695") "Warmachine Resources" "http://www.terminally-incoherent.com/blog/2015/10/10/warmachine-resources/" 1444523319.0 #s(elfeed-ref "06c3a7d0167dd8ff2c7529296e0104c9147af15c") html nil (dev emacs mustread unread) "http://www.terminally-incoherent.com/blog/feed" (:authors ((:name "Luke Maciak")) :categories ("rpg and tabletop" "warmachine"))) ("www.terminally-incoherent.com" . "http://www.terminally-incoherent.com/blog/?p=18659") #s(elfeed-entry ("www.terminally-incoherent.com" . "http://www.terminally-incoherent.com/blog/?p=18659") "Age of Sigmar and the End of Warhammer" "http://www.terminally-incoherent.com/blog/2015/07/04/age-of-sigmar-and-the-end-of-warhammer/" 1436056789.0 #s(elfeed-ref "34b632ddebdce718ed0967b1b5b5d13d4cf98a18") html nil (dev emacs mustread unread) "http://www.terminally-incoherent.com/blog/feed" (:authors ((:name "Luke Maciak")) :categories ("rpg and tabletop" "warhammer"))) ("www.terminally-incoherent.com" . "http://www.terminally-incoherent.com/blog/?p=18631") #s(elfeed-entry ("www.terminally-incoherent.com" . "http://www.terminally-incoherent.com/blog/?p=18631") "What does it mean to be a gamer in 2015?" "http://www.terminally-incoherent.com/blog/2015/06/24/what-does-it-mean-to-be-a-gamer-in-2015/" 1435174645.0 #s(elfeed-ref "5c71f5eebd1a1ddd42fa8e7d4cab4c3f84afdf12") html nil (dev emacs mustread unread) "http://www.terminally-incoherent.com/blog/feed" (:authors ((:name "Luke Maciak")) :categories ("video games"))) ("www.terminally-incoherent.com" . "http://www.terminally-incoherent.com/blog/?p=18587") #s(elfeed-entry ("www.terminally-incoherent.com" . "http://www.terminally-incoherent.com/blog/?p=18587") "Witcher 3 and Diversity" "http://www.terminally-incoherent.com/blog/2015/06/04/witcher-3-and-diversity/" 1433429421.0 #s(elfeed-ref "02dee8ec3df84b15d2f6863eb2d4817d23f9ab79") html nil (dev emacs mustread unread) "http://www.terminally-incoherent.com/blog/feed" (:authors ((:name "Luke Maciak")) :categories ("video games"))) ("www.terminally-incoherent.com" . "http://www.terminally-incoherent.com/blog/?p=18566") #s(elfeed-entry ("www.terminally-incoherent.com" . "http://www.terminally-incoherent.com/blog/?p=18566") "Mad Max: Fury Road" "http://www.terminally-incoherent.com/blog/2015/05/25/mad-max-fury-road/" 1432595241.0 #s(elfeed-ref "8e5607950a58195b9fc794c9b7f60ea17d365457") html nil (dev emacs mustread unread) "http://www.terminally-incoherent.com/blog/feed" (:authors ((:name "Luke Maciak")) :categories ("movies"))) ("www.terminally-incoherent.com" . "http://www.terminally-incoherent.com/blog/?p=18559") #s(elfeed-entry ("www.terminally-incoherent.com" . "http://www.terminally-incoherent.com/blog/?p=18559") "On YouTube rants…" "http://www.terminally-incoherent.com/blog/2015/05/16/on-youtube-rants/" 1431755606.0 #s(elfeed-ref "e4e9d269b022b1da241df7788c69a7e4c25fc83e") html nil (dev emacs mustread unread) "http://www.terminally-incoherent.com/blog/feed" (:authors ((:name "Luke Maciak")) :categories ("futuristic musings" "short"))) ("www.terminally-incoherent.com" . "http://www.terminally-incoherent.com/blog/?p=18509") #s(elfeed-entry ("www.terminally-incoherent.com" . "http://www.terminally-incoherent.com/blog/?p=18509") "Age of Ultron" "http://www.terminally-incoherent.com/blog/2015/05/05/age-of-ultron/" 1430800602.0 #s(elfeed-ref "374732d3567a279a0da831a5ca7b26fca7588e38") html nil (dev emacs mustread unread) "http://www.terminally-incoherent.com/blog/feed" (:authors ((:name "Luke Maciak")) :categories ("movies" "avengers" "marvel"))) ("www.terminally-incoherent.com" . "http://www.terminally-incoherent.com/blog/?p=18497") #s(elfeed-entry ("www.terminally-incoherent.com" . "http://www.terminally-incoherent.com/blog/?p=18497") "On Black Widow and that Bro-tastic interview…" "http://www.terminally-incoherent.com/blog/2015/04/26/on-black-widow-and-that-bro-tastic-interview/" 1430085578.0 #s(elfeed-ref "a1127da34523dbb68b03573feadb750863640242") html nil (dev emacs mustread unread) "http://www.terminally-incoherent.com/blog/feed" (:authors ((:name "Luke Maciak")) :categories ("entertainment" "avengers" "marvel"))) ("www.terminally-incoherent.com" . "http://www.terminally-incoherent.com/blog/?p=18483") #s(elfeed-entry ("www.terminally-incoherent.com" . "http://www.terminally-incoherent.com/blog/?p=18483") "Daredevil" "http://www.terminally-incoherent.com/blog/2015/04/13/daredevil/" 1428932540.0 #s(elfeed-ref "88a4b785dee01aee9ffa5bc0906526a1d8b97663") html nil (dev emacs mustread unread) "http://www.terminally-incoherent.com/blog/feed" (:authors ((:name "Luke Maciak")) :categories ("tv" "marvel"))) ("gustedt.wordpress.com" . "http://gustedt.wordpress.com/?p=4454") #s(elfeed-entry ("gustedt.wordpress.com" . "http://gustedt.wordpress.com/?p=4454") "The provenance memory model for C" "https://gustedt.wordpress.com/2025/06/30/the-provenance-memory-model-for-c/" 1751274989.0 #s(elfeed-ref "1416cb468677f2035f72adaaf434072109942832") html nil (c dev unread) "https://gustedt.wordpress.com/feed/" (:authors ((:name "Jens Gustedt")) :categories ("C17" "C23" "compiler optimization" "Modern C"))) ("gustedt.wordpress.com" . "http://gustedt.wordpress.com/?p=4413") #s(elfeed-entry ("gustedt.wordpress.com" . "http://gustedt.wordpress.com/?p=4413") "Make C string literals const?" "https://gustedt.wordpress.com/2025/04/06/make-c-string-literals-const/" 1743967323.0 #s(elfeed-ref "df3b2ac1b05ef31ddc65d7a5fd1716a23ea03812") html nil (c dev unread) "https://gustedt.wordpress.com/feed/" (:authors ((:name "Jens Gustedt")) :categories ("C2y"))) ("gustedt.wordpress.com" . "http://gustedt.wordpress.com/?p=4399") #s(elfeed-entry ("gustedt.wordpress.com" . "http://gustedt.wordpress.com/?p=4399") "A diagram of C23 basic types" "https://gustedt.wordpress.com/2025/03/29/a-diagram-of-c23-basic-types/" 1743259421.0 #s(elfeed-ref "1dace6c26be0344951ec62faa4d858adeed18c88") html nil (c dev unread) "https://gustedt.wordpress.com/feed/" (:authors ((:name "Jens Gustedt")) :categories ("C23" "integers"))) ("gustedt.wordpress.com" . "http://gustedt.wordpress.com/?p=4327") #s(elfeed-entry ("gustedt.wordpress.com" . "http://gustedt.wordpress.com/?p=4327") "Contracts for C" "https://gustedt.wordpress.com/2025/03/10/contracts-for-c/" 1741601764.0 #s(elfeed-ref "19b90b61d085ae747e84d89840fe07970f4dacd1") html nil (c dev unread) "https://gustedt.wordpress.com/feed/" (:authors ((:name "Jens Gustedt")) :categories ("C2x" "ellipsis" "eĿlipsis" "macros" "preprocessor" "syntax" "define"))) ("gustedt.wordpress.com" . "http://gustedt.wordpress.com/?p=4290") #s(elfeed-entry ("gustedt.wordpress.com" . "http://gustedt.wordpress.com/?p=4290") "Preprocessor meta-quotes with eĿlipsis" "https://gustedt.wordpress.com/2025/02/13/preprocessor-meta-quotes-with-ellipsis/" 1739443205.0 #s(elfeed-ref "45d438099ef61606cfd905f1f00a03724d74c693") html nil (c dev unread) "https://gustedt.wordpress.com/feed/" (:authors ((:name "Jens Gustedt")) :categories ("C23" "ellipsis" "eĿlipsis" "macros" "define"))) ("gustedt.wordpress.com" . "http://gustedt.wordpress.com/?p=4243") #s(elfeed-entry ("gustedt.wordpress.com" . "http://gustedt.wordpress.com/?p=4243") "Simple defer, ready to use" "https://gustedt.wordpress.com/2025/01/06/simple-defer-ready-to-use/" 1736177400.0 #s(elfeed-ref "eeff99b7bceb9c6ef892ebd82c5e2d5caabeb4ec") html nil (c dev unread) "https://gustedt.wordpress.com/feed/" (:authors ((:name "Jens Gustedt")) :categories ("C23" "C2x" "macros" "define"))) ("gustedt.wordpress.com" . "http://gustedt.wordpress.com/?p=4215") #s(elfeed-entry ("gustedt.wordpress.com" . "http://gustedt.wordpress.com/?p=4215") "The C23 edition of Modern C" "https://gustedt.wordpress.com/2024/10/15/the-c23-edition-of-modern-c/" 1729006697.0 #s(elfeed-ref "430caae0639d1e618f2c53ce7e0f9c4821bc9007") html nil (c dev unread) "https://gustedt.wordpress.com/feed/" (:authors ((:name "Jens Gustedt")) :categories ("C23" "integers" "language" "Modern C"))) ("gustedt.wordpress.com" . "http://gustedt.wordpress.com/?p=4172") #s(elfeed-entry ("gustedt.wordpress.com" . "http://gustedt.wordpress.com/?p=4172") "Braiding the spaghetti: implementing defer in the preprocessor" "https://gustedt.wordpress.com/2024/09/11/braiding-the-spaghetti-implementing-defer-in-the-preprocessor/" 1726086840.0 #s(elfeed-ref "800af86aa8b0968d6a920e8cb796cb9467d03cf8") html nil (c dev unread) "https://gustedt.wordpress.com/feed/" (:authors ((:name "Jens Gustedt")) :categories ("C23" "eĿlipsis" "preprocessor"))) ("gustedt.wordpress.com" . "http://gustedt.wordpress.com/?p=4143") #s(elfeed-entry ("gustedt.wordpress.com" . "http://gustedt.wordpress.com/?p=4143") "Tail recursion for macros in C" "https://gustedt.wordpress.com/2024/07/19/tail-recursion-for-macros-in-c/" 1721398664.0 #s(elfeed-ref "83c1b1ad2d2a710492c08d54881aec6e4cfca9ae") html nil (c dev unread) "https://gustedt.wordpress.com/feed/" (:authors ((:name "Jens Gustedt")) :categories ("C23" "eĿlipsis" "macros" "preprocessor" "syntax" "define"))) ("gustedt.wordpress.com" . "http://gustedt.wordpress.com/?p=4135") #s(elfeed-entry ("gustedt.wordpress.com" . "http://gustedt.wordpress.com/?p=4135") "EĿlipsis: a language independent preprocessor is released" "https://gustedt.wordpress.com/2024/06/09/ellipsis-a-language-independent-preprocessor-is-released/" 1717947748.0 #s(elfeed-ref "e5d7fc1055db400d6dbe42ed5a853d4dd89ce48f") html nil (c dev unread) "https://gustedt.wordpress.com/feed/" (:authors ((:name "Jens Gustedt")) :categories ("C23" "eĿlipsis" "linux" "Modern C" "preprocessor"))) ("www.masteringemacs.org" . "/article/combobulate-interactive-node-editing-treesitter") #s(elfeed-entry ("www.masteringemacs.org" . "/article/combobulate-interactive-node-editing-treesitter") "Combobulate: Interactive Node Editing with Tree-Sitter" "https://www.masteringemacs.org/article/combobulate-interactive-node-editing-treesitter?utm_source=newsletter&utm_medium=rss" 1711202678.0 #s(elfeed-ref "35951c6eea10c48b7cafb359289e6ded2eff1301") html nil (dev emacs mustread unread) "https://www.masteringemacs.org/feed" nil) ("www.masteringemacs.org" . "/article/the-emacs-29-edition-of-mastering-emacs-out-now") #s(elfeed-entry ("www.masteringemacs.org" . "/article/the-emacs-29-edition-of-mastering-emacs-out-now") "The Emacs 29 Edition of Mastering Emacs is out now" "https://www.masteringemacs.org/article/the-emacs-29-edition-of-mastering-emacs-out-now?utm_source=newsletter&utm_medium=rss" 1721657856.0 #s(elfeed-ref "414619bccf0730bdff8dbb72e5c7299a6e1e1cd8") html nil (dev emacs mustread unread) "https://www.masteringemacs.org/feed" nil) ("www.masteringemacs.org" . "/article/combobulate-bulk-editing-treesitter-nodes-multiple-cursors") #s(elfeed-entry ("www.masteringemacs.org" . "/article/combobulate-bulk-editing-treesitter-nodes-multiple-cursors") "Combobulate: Bulk Editing Tree-Sitter Nodes with Multiple Cursors" "https://www.masteringemacs.org/article/combobulate-bulk-editing-treesitter-nodes-multiple-cursors?utm_source=newsletter&utm_medium=rss" 1726736071.0 #s(elfeed-ref "d14b81d2c953bbd18e4651cbb1671f3bb2d070c6") html nil (dev emacs mustread unread) "https://www.masteringemacs.org/feed" nil) ("www.masteringemacs.org" . "/article/whats-new-in-emacs-301") #s(elfeed-entry ("www.masteringemacs.org" . "/article/whats-new-in-emacs-301") "What's New in Emacs 30.1?" "https://www.masteringemacs.org/article/whats-new-in-emacs-301?utm_source=newsletter&utm_medium=rss" 1740385721.0 #s(elfeed-ref "aa7000f7026d0c763ad3e1f43fdcf1f38e19a174") html nil (dev emacs mustread unread) "https://www.masteringemacs.org/feed" nil) ("www.masteringemacs.org" . "/article/replacing-tmux-gnu-screen-emacs") #s(elfeed-entry ("www.masteringemacs.org" . "/article/replacing-tmux-gnu-screen-emacs") "Replacing tmux and GNU screen with Emacs" "https://www.masteringemacs.org/article/replacing-tmux-gnu-screen-emacs?utm_source=newsletter&utm_medium=rss" 1741256810.0 #s(elfeed-ref "ba9cab92e4b14862013b91372ff4a9e03173ba3b") html nil (dev emacs mustread unread) "https://www.masteringemacs.org/feed" nil) ("blog.tecosaur.com" . "https://blog.tecosaur.com/tmio/2022-05-31-folding.html") #s(elfeed-entry ("blog.tecosaur.com" . "https://blog.tecosaur.com/tmio/2022-05-31-folding.html") "May 2022" "https://blog.tecosaur.com/tmio/2022-05-31-folding.html" 1654099200.0 #s(elfeed-ref "244e8e1e284152af7d43ac9b24bf352e382e1978") html nil (dev emacs mustread unread) "https://blog.tecosaur.com/tmio/rss.xml" (:authors ((:name "TEC" :email "tec@tecosaur.com")))) ("blog.tecosaur.com" . "https://blog.tecosaur.com/tmio/2022-04-01-confluence.html") #s(elfeed-entry ("blog.tecosaur.com" . "https://blog.tecosaur.com/tmio/2022-04-01-confluence.html") "Special Announcement" "https://blog.tecosaur.com/tmio/2022-04-01-confluence.html" 1648828800.0 #s(elfeed-ref "2edd4f71e9326ab70f710164c535f32d5b3220de") html nil (dev emacs mustread unread) "https://blog.tecosaur.com/tmio/rss.xml" (:authors ((:name "TEC" :email "tec@tecosaur.com")))) ("blog.tecosaur.com" . "https://blog.tecosaur.com/tmio/2022-02-30-orgnvim.html") #s(elfeed-entry ("blog.tecosaur.com" . "https://blog.tecosaur.com/tmio/2022-02-30-orgnvim.html") "February 2022" "https://blog.tecosaur.com/tmio/2022-02-30-orgnvim.html" 1646323200.0 #s(elfeed-ref "88b71231e793ca347266f878b5343bd409d2ab02") html nil (dev emacs mustread unread) "https://blog.tecosaur.com/tmio/rss.xml" (:authors ((:name "TEC" :email "tec@tecosaur.com")))) ("blog.tecosaur.com" . "https://blog.tecosaur.com/tmio/2022-01-31-caching.html") #s(elfeed-entry ("blog.tecosaur.com" . "https://blog.tecosaur.com/tmio/2022-01-31-caching.html") "January 2022" "https://blog.tecosaur.com/tmio/2022-01-31-caching.html" 1643644800.0 #s(elfeed-ref "55888e974ba637beeccd054a66b40acb7c4fe000") html nil (dev emacs mustread unread) "https://blog.tecosaur.com/tmio/rss.xml" (:authors ((:name "TEC" :email "tec@tecosaur.com")))) ("blog.tecosaur.com" . "https://blog.tecosaur.com/tmio/2021-12-31-retrospection.html") #s(elfeed-entry ("blog.tecosaur.com" . "https://blog.tecosaur.com/tmio/2021-12-31-retrospection.html") "December 2021" "https://blog.tecosaur.com/tmio/2021-12-31-retrospection.html" 1641052800.0 #s(elfeed-ref "51f37a9e5950ea75411d6e79a8cb8416e8f26891") html nil (dev emacs mustread unread) "https://blog.tecosaur.com/tmio/rss.xml" (:authors ((:name "TEC" :email "tec@tecosaur.com")))) ("blog.tecosaur.com" . "https://blog.tecosaur.com/tmio/2021-11-30-element.html") #s(elfeed-entry ("blog.tecosaur.com" . "https://blog.tecosaur.com/tmio/2021-11-30-element.html") "November 2021" "https://blog.tecosaur.com/tmio/2021-11-30-element.html" 1638374400.0 #s(elfeed-ref "4ef310f7439cf51e54dbd55e18c19ccc052e7fad") html nil (dev emacs mustread unread) "https://blog.tecosaur.com/tmio/rss.xml" (:authors ((:name "TEC" :email "tec@tecosaur.com")))) ("blog.tecosaur.com" . "https://blog.tecosaur.com/tmio/2021-05-31-async.html") #s(elfeed-entry ("blog.tecosaur.com" . "https://blog.tecosaur.com/tmio/2021-05-31-async.html") "May 2021" "https://blog.tecosaur.com/tmio/2021-05-31-async.html" 1638288000.0 #s(elfeed-ref "a7cba54ed6669dc6a7a93c2dfd4cc549e23f520c") html nil (dev emacs mustread unread) "https://blog.tecosaur.com/tmio/rss.xml" (:authors ((:name "TEC" :email "tec@tecosaur.com")))) ("blog.tecosaur.com" . "https://blog.tecosaur.com/tmio/2021-10-31-release.html") #s(elfeed-entry ("blog.tecosaur.com" . "https://blog.tecosaur.com/tmio/2021-10-31-release.html") "October 2021" "https://blog.tecosaur.com/tmio/2021-10-31-release.html" 1635696000.0 #s(elfeed-ref "19bff24adb297c25ace8d17f20bedc3fdc869fe0") html nil (dev emacs mustread unread) "https://blog.tecosaur.com/tmio/rss.xml" (:authors ((:name "TEC" :email "tec@tecosaur.com")))) ("blog.tecosaur.com" . "https://blog.tecosaur.com/tmio/2021-04-30-export-plot.html") #s(elfeed-entry ("blog.tecosaur.com" . "https://blog.tecosaur.com/tmio/2021-04-30-export-plot.html") "April 2021" "https://blog.tecosaur.com/tmio/2021-04-30-export-plot.html" 1632672000.0 #s(elfeed-ref "cb29f894afdbc3a71923ba51517707565a3e791c") html nil (dev emacs mustread unread) "https://blog.tecosaur.com/tmio/rss.xml" (:authors ((:name "TEC" :email "tec@tecosaur.com")))) ("blog.tecosaur.com" . "https://blog.tecosaur.com/tmio/2021-07-31-citations.html") #s(elfeed-entry ("blog.tecosaur.com" . "https://blog.tecosaur.com/tmio/2021-07-31-citations.html") "July 2021" "https://blog.tecosaur.com/tmio/2021-07-31-citations.html" 1632672000.0 #s(elfeed-ref "e6ef51febd11bf8cdedce02092e8ad43d16d6bd1") html nil (dev emacs mustread unread) "https://blog.tecosaur.com/tmio/rss.xml" (:authors ((:name "TEC" :email "tec@tecosaur.com")))) ("blog.tecosaur.com" . "https://blog.tecosaur.com/tmio/2021-08-38-roaming.html") #s(elfeed-entry ("blog.tecosaur.com" . "https://blog.tecosaur.com/tmio/2021-08-38-roaming.html") "August 2021" "https://blog.tecosaur.com/tmio/2021-08-38-roaming.html" 1631030400.0 #s(elfeed-ref "a5d0483f46dc52cabb47bda8511ac494f7fe15b1") html nil (dev emacs mustread unread) "https://blog.tecosaur.com/tmio/rss.xml" (:authors ((:name "TEC" :email "tec@tecosaur.com")))) ("blog.tecosaur.com" . "https://blog.tecosaur.com/tmio/2021-06-34-relaxed.html") #s(elfeed-entry ("blog.tecosaur.com" . "https://blog.tecosaur.com/tmio/2021-06-34-relaxed.html") "June 2021" "https://blog.tecosaur.com/tmio/2021-06-34-relaxed.html" 1627833600.0 #s(elfeed-ref "309e69193d5028bd4bd7214f245a922938ab3cad") html nil (dev emacs mustread unread) "https://blog.tecosaur.com/tmio/rss.xml" (:authors ((:name "TEC" :email "tec@tecosaur.com")))) ("blog.tecosaur.com" . "https://blog.tecosaur.com/tmio/2021-04-26-Welcome.html") #s(elfeed-entry ("blog.tecosaur.com" . "https://blog.tecosaur.com/tmio/2021-04-26-Welcome.html") "Welcome" "https://blog.tecosaur.com/tmio/2021-04-26-Welcome.html" 1619452800.0 #s(elfeed-ref "427142b9a125624d5978b8b1ef7d118ab6782472") html nil (dev emacs mustread unread) "https://blog.tecosaur.com/tmio/rss.xml" (:authors ((:name "TEC" :email "tec@tecosaur.com")))) ("kernelnewbies.org" . "http://kernelnewbies.org/MatthewWilcox/Memdescs/PageFlags?action=recall&rev=1") #s(elfeed-entry ("kernelnewbies.org" . "http://kernelnewbies.org/MatthewWilcox/Memdescs/PageFlags?action=recall&rev=1") "MatthewWilcox/Memdescs/PageFlags" "http://kernelnewbies.org/MatthewWilcox/Memdescs/PageFlags?action=recall&rev=1" 1755720852.0 #s(elfeed-ref "c523e2d09a7d7746f3927e7c23b69fcef3de74de") html nil (c dev unread) "https://kernelnewbies.org/RecentChanges?action=rss_rc&ddiffs=1" nil) ("kernelnewbies.org" . "http://kernelnewbies.org/MatthewWilcox/Memdescs/Path?action=diff&rev1=16&rev2=15") #s(elfeed-entry ("kernelnewbies.org" . "http://kernelnewbies.org/MatthewWilcox/Memdescs/Path?action=diff&rev1=16&rev2=15") "MatthewWilcox/Memdescs/Path" "http://kernelnewbies.org/MatthewWilcox/Memdescs/Path?action=diff&rev1=16&rev2=15" 1754713877.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (c dev unread) "https://kernelnewbies.org/RecentChanges?action=rss_rc&ddiffs=1" nil) ("kernelnewbies.org" . "http://kernelnewbies.org/DevelopmentStatistics?action=diff&rev1=71&rev2=70") #s(elfeed-entry ("kernelnewbies.org" . "http://kernelnewbies.org/DevelopmentStatistics?action=diff&rev1=71&rev2=70") "DevelopmentStatistics" "http://kernelnewbies.org/DevelopmentStatistics?action=diff&rev1=71&rev2=70" 1754495448.0 #s(elfeed-ref "891da17c81021dcc6f04d883833acd0beb989e03") html nil (c dev unread) "https://kernelnewbies.org/RecentChanges?action=rss_rc&ddiffs=1" nil) ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.16?action=diff&rev1=61&rev2=60") #s(elfeed-entry ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.16?action=diff&rev1=61&rev2=60") "Linux_6.16" "http://kernelnewbies.org/Linux_6.16?action=diff&rev1=61&rev2=60" 1753620056.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (c dev unread) "https://kernelnewbies.org/RecentChanges?action=rss_rc&ddiffs=1" nil) ("kernelnewbies.org" . "http://kernelnewbies.org/LinuxChanges?action=diff&rev1=407&rev2=406") #s(elfeed-entry ("kernelnewbies.org" . "http://kernelnewbies.org/LinuxChanges?action=diff&rev1=407&rev2=406") "LinuxChanges" "http://kernelnewbies.org/LinuxChanges?action=diff&rev1=407&rev2=406" 1753615630.0 #s(elfeed-ref "57353f66b20569c5f811089cf9971c539e26fa7d") html nil (c dev unread) "https://kernelnewbies.org/RecentChanges?action=rss_rc&ddiffs=1" nil) ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.16?action=diff&rev1=60&rev2=59") #s(elfeed-entry ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.16?action=diff&rev1=60&rev2=59") "Linux_6.16" "http://kernelnewbies.org/Linux_6.16?action=diff&rev1=60&rev2=59" 1753615209.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (c dev unread) "https://kernelnewbies.org/RecentChanges?action=rss_rc&ddiffs=1" nil) ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.16?action=diff&rev1=59&rev2=58") #s(elfeed-entry ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.16?action=diff&rev1=59&rev2=58") "Linux_6.16" "http://kernelnewbies.org/Linux_6.16?action=diff&rev1=59&rev2=58" 1753615126.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (c dev unread) "https://kernelnewbies.org/RecentChanges?action=rss_rc&ddiffs=1" nil) ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.16?action=diff&rev1=58&rev2=57") #s(elfeed-entry ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.16?action=diff&rev1=58&rev2=57") "Linux_6.16" "http://kernelnewbies.org/Linux_6.16?action=diff&rev1=58&rev2=57" 1753615017.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (c dev unread) "https://kernelnewbies.org/RecentChanges?action=rss_rc&ddiffs=1" nil) ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.16?action=diff&rev1=57&rev2=56") #s(elfeed-entry ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.16?action=diff&rev1=57&rev2=56") "Linux_6.16" "http://kernelnewbies.org/Linux_6.16?action=diff&rev1=57&rev2=56" 1753614833.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (c dev unread) "https://kernelnewbies.org/RecentChanges?action=rss_rc&ddiffs=1" nil) ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.16?action=diff&rev1=56&rev2=55") #s(elfeed-entry ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.16?action=diff&rev1=56&rev2=55") "Linux_6.16" "http://kernelnewbies.org/Linux_6.16?action=diff&rev1=56&rev2=55" 1753614453.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (c dev unread) "https://kernelnewbies.org/RecentChanges?action=rss_rc&ddiffs=1" nil) ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.16?action=diff&rev1=55&rev2=54") #s(elfeed-entry ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.16?action=diff&rev1=55&rev2=54") "Linux_6.16" "http://kernelnewbies.org/Linux_6.16?action=diff&rev1=55&rev2=54" 1753563333.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (c dev unread) "https://kernelnewbies.org/RecentChanges?action=rss_rc&ddiffs=1" nil) ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.16?action=diff&rev1=54&rev2=53") #s(elfeed-entry ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.16?action=diff&rev1=54&rev2=53") "Linux_6.16" "http://kernelnewbies.org/Linux_6.16?action=diff&rev1=54&rev2=53" 1753562828.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (c dev unread) "https://kernelnewbies.org/RecentChanges?action=rss_rc&ddiffs=1" nil) ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.16?action=diff&rev1=53&rev2=52") #s(elfeed-entry ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.16?action=diff&rev1=53&rev2=52") "Linux_6.16" "http://kernelnewbies.org/Linux_6.16?action=diff&rev1=53&rev2=52" 1753562339.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (c dev unread) "https://kernelnewbies.org/RecentChanges?action=rss_rc&ddiffs=1" nil) ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.16?action=diff&rev1=52&rev2=51") #s(elfeed-entry ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.16?action=diff&rev1=52&rev2=51") "Linux_6.16" "http://kernelnewbies.org/Linux_6.16?action=diff&rev1=52&rev2=51" 1753559936.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (c dev unread) "https://kernelnewbies.org/RecentChanges?action=rss_rc&ddiffs=1" nil) ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.16?action=diff&rev1=51&rev2=50") #s(elfeed-entry ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.16?action=diff&rev1=51&rev2=50") "Linux_6.16" "http://kernelnewbies.org/Linux_6.16?action=diff&rev1=51&rev2=50" 1753546546.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (c dev unread) "https://kernelnewbies.org/RecentChanges?action=rss_rc&ddiffs=1" nil) ("lwn.net" . "https://lwn.net/Articles/1035491/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1035491/") "[$] Removing Guix from Debian" "https://lwn.net/Articles/1035491/" 1756822821.0 #s(elfeed-ref "881c78a9da0fe69fd92fdd3b098ff7b60c647276") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "jzb")))) ("lwn.net" . "https://lwn.net/Articles/1036373/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1036373/") "The hidden vulnerabilities of open source (FastCode)" "https://lwn.net/Articles/1036373/" 1756821981.0 #s(elfeed-ref "e0a300b9684d52697ac3e7f3d78445c1526e72df") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "corbet")))) ("lwn.net" . "https://lwn.net/Articles/1036369/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1036369/") "Security updates for Tuesday" "https://lwn.net/Articles/1036369/" 1756820130.0 #s(elfeed-ref "63d44265364d8f86bcb7af88bf26b782316671f2") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "corbet")))) ("lwn.net" . "https://lwn.net/Articles/1036218/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1036218/") "GNOME loses another executive director" "https://lwn.net/Articles/1036218/" 1756757075.0 #s(elfeed-ref "e622511e9123649f6f6bd363a866f036ef7554a3") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "corbet")))) ("lwn.net" . "https://lwn.net/Articles/1035727/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1035727/") "[$] The future of 32-bit support in the kernel" "https://lwn.net/Articles/1035727/" 1756749089.0 #s(elfeed-ref "539c29d9625e3ea67212b72c83d4c5c5e62ce33a") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "corbet")))) ("lwn.net" . "https://lwn.net/Articles/1036084/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1036084/") "Security updates for Monday" "https://lwn.net/Articles/1036084/" 1756737774.0 #s(elfeed-ref "3d704290523917a7649ab8703d26191bd94c32d0") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "jake")))) ("lwn.net" . "https://lwn.net/Articles/1036041/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1036041/") "Kernel prepatch 6.17-rc4" "https://lwn.net/Articles/1036041/" 1756733391.0 #s(elfeed-ref "d9af08237b50e1154c1c268b66354d11878560e7") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "corbet")))) ("lwn.net" . "https://lwn.net/Articles/1035736/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1035736/") "Bcachefs goes to \"externally maintained\"" "https://lwn.net/Articles/1035736/" 1756487322.0 #s(elfeed-ref "ffe96a6d53b5d9ac74046c012de4c27b1d0e66bd") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "corbet")))) ("lwn.net" . "https://lwn.net/Articles/1034966/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1034966/") "[$] The challenge of maintaining curl" "https://lwn.net/Articles/1034966/" 1756480824.0 #s(elfeed-ref "352e3b13a4d52ae84ec6c9c3ba0c709e059b090b") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "corbet")))) ("lwn.net" . "https://lwn.net/Articles/1028275/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1028275/") "[$] Highlights from systemd v258: part one" "https://lwn.net/Articles/1028275/" 1756478855.0 #s(elfeed-ref "ced1af0bff46943957591b143d69713274990abf") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "jzb")))) ("lwn.net" . "https://lwn.net/Articles/1035724/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1035724/") "Security updates for Friday" "https://lwn.net/Articles/1035724/" 1756476236.0 #s(elfeed-ref "5193a63a0331d3c03c90b1fdbb3d755621e422aa") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "daroc")))) ("lwn.net" . "https://lwn.net/Articles/1035537/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1035537/") "Python: The Documentary" "https://lwn.net/Articles/1035537/" 1756417572.0 #s(elfeed-ref "3a79a182312153d5426c6d31748e1ce52e922409") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "jzb")))) ("lwn.net" . "https://lwn.net/Articles/1035512/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1035512/") "Seven stable kernels for Thursday" "https://lwn.net/Articles/1035512/" 1756395972.0 #s(elfeed-ref "79db905394b6b8eb5d8bacfc07443b22bca4ea26") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "jzb")))) ("lwn.net" . "https://lwn.net/Articles/1034684/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1034684/") "[$] Changing GNOME technical governance?" "https://lwn.net/Articles/1034684/" 1756371718.0 #s(elfeed-ref "ec85eaba6eaa3629f8ade577fd3eac465e3f8f34") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "jake")))) ("lwn.net" . "https://lwn.net/Articles/1035464/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1035464/") "Security updates for Thursday" "https://lwn.net/Articles/1035464/" 1756371694.0 #s(elfeed-ref "33cf8ededf2182176e294c4ae072f50ad74f9296") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "jake")))) ("jvns.ca" . "https://jvns.ca/blog/2025/06/24/new-zine--the-secret-rules-of-the-terminal/") #s(elfeed-entry ("jvns.ca" . "https://jvns.ca/blog/2025/06/24/new-zine--the-secret-rules-of-the-terminal/") "New zine: The Secret Rules of the Terminal" "https://jvns.ca/blog/2025/06/24/new-zine--the-secret-rules-of-the-terminal/" 1750896000.0 #s(elfeed-ref "85e317c7c5fd7ebca84bef42f9a5183e17930aff") html nil (dev systems unread) "https://jvns.ca/atom.xml" nil) ("jvns.ca" . "https://jvns.ca/blog/2025/06/10/how-to-compile-a-c-program/") #s(elfeed-entry ("jvns.ca" . "https://jvns.ca/blog/2025/06/10/how-to-compile-a-c-program/") "Using `make` to compile C programs (for non-C-programmers)" "https://jvns.ca/blog/2025/06/10/how-to-compile-a-c-program/" 1749513600.0 #s(elfeed-ref "efa86985aba5225e42aa7199ad1de3dad156f57d") html nil (dev systems unread) "https://jvns.ca/atom.xml" nil) ("jvns.ca" . "https://jvns.ca/blog/2025/03/07/escape-code-standards/") #s(elfeed-entry ("jvns.ca" . "https://jvns.ca/blog/2025/03/07/escape-code-standards/") "Standards for ANSI escape codes" "https://jvns.ca/blog/2025/03/07/escape-code-standards/" 1741305600.0 #s(elfeed-ref "4738ac002f60a5154afc0ae11791590deb268e15") html nil (dev systems unread) "https://jvns.ca/atom.xml" nil) ("jvns.ca" . "https://jvns.ca/blog/2025/02/13/how-to-add-a-directory-to-your-path/") #s(elfeed-entry ("jvns.ca" . "https://jvns.ca/blog/2025/02/13/how-to-add-a-directory-to-your-path/") "How to add a directory to your PATH" "https://jvns.ca/blog/2025/02/13/how-to-add-a-directory-to-your-path/" 1739449676.0 #s(elfeed-ref "085ce7f7f7fa38e164ccc349bf37ba0bd91b42b9") html nil (dev systems unread) "https://jvns.ca/atom.xml" nil) ("jvns.ca" . "https://jvns.ca/blog/2025/02/05/some-terminal-frustrations/") #s(elfeed-entry ("jvns.ca" . "https://jvns.ca/blog/2025/02/05/some-terminal-frustrations/") "Some terminal frustrations" "https://jvns.ca/blog/2025/02/05/some-terminal-frustrations/" 1738774620.0 #s(elfeed-ref "f4ed0b01e7e15849796ba39da0420b3ce344b7e2") html nil (dev systems unread) "https://jvns.ca/atom.xml" nil) ("jvns.ca" . "https://jvns.ca/blog/2025/01/11/getting-a-modern-terminal-setup/") #s(elfeed-entry ("jvns.ca" . "https://jvns.ca/blog/2025/01/11/getting-a-modern-terminal-setup/") "What's involved in getting a \"modern\" terminal setup?" "https://jvns.ca/blog/2025/01/11/getting-a-modern-terminal-setup/" 1736588761.0 #s(elfeed-ref "bf3930fa95ec80c574fe562f28b0be1e23fbd8a9") html nil (dev systems unread) "https://jvns.ca/atom.xml" nil) ("jvns.ca" . "https://jvns.ca/blog/2024/11/26/terminal-rules/") #s(elfeed-entry ("jvns.ca" . "https://jvns.ca/blog/2024/11/26/terminal-rules/") "\"Rules\" that terminal programs follow" "https://jvns.ca/blog/2024/11/26/terminal-rules/" 1733995702.0 #s(elfeed-ref "9a1de7845c9cf4993dab57abebd1b3ad474c22ff") html nil (dev systems unread) "https://jvns.ca/atom.xml" nil) ("jvns.ca" . "https://jvns.ca/blog/2024/11/29/why-pipes-get-stuck-buffering/") #s(elfeed-entry ("jvns.ca" . "https://jvns.ca/blog/2024/11/29/why-pipes-get-stuck-buffering/") "Why pipes sometimes get \"stuck\": buffering" "https://jvns.ca/blog/2024/11/29/why-pipes-get-stuck-buffering/" 1732868611.0 #s(elfeed-ref "f92df89c96e524ea39b15b6038d353d9199bb75b") html nil (dev systems unread) "https://jvns.ca/atom.xml" nil) ("jvns.ca" . "https://jvns.ca/blog/2024/11/18/how-to-import-a-javascript-library/") #s(elfeed-entry ("jvns.ca" . "https://jvns.ca/blog/2024/11/18/how-to-import-a-javascript-library/") "Importing a frontend Javascript library without a build system" "https://jvns.ca/blog/2024/11/18/how-to-import-a-javascript-library/" 1731922542.0 #s(elfeed-ref "33acb55128aa3184b6c0d6a70480bdc2e14c099a") html nil (dev systems unread) "https://jvns.ca/atom.xml" nil) ("jvns.ca" . "https://jvns.ca/blog/2024/11/09/new-microblog/") #s(elfeed-entry ("jvns.ca" . "https://jvns.ca/blog/2024/11/09/new-microblog/") "New microblog with TILs" "https://jvns.ca/blog/2024/11/09/new-microblog/" 1731144269.0 #s(elfeed-ref "5ddaa8ce81fb535721122b9b9325edae3296fc43") html nil (dev systems unread) "https://jvns.ca/atom.xml" nil) ("jvns.ca" . "https://jvns.ca/blog/2024/10/31/ascii-control-characters/") #s(elfeed-entry ("jvns.ca" . "https://jvns.ca/blog/2024/10/31/ascii-control-characters/") "ASCII control characters in my terminal" "https://jvns.ca/blog/2024/10/31/ascii-control-characters/" 1730361610.0 #s(elfeed-ref "0cd60c6d170a073b565e4babac58ec0dbc82b863") html nil (dev systems unread) "https://jvns.ca/atom.xml" nil) ("jvns.ca" . "https://jvns.ca/blog/2024/10/27/asn-ip-address-memory/") #s(elfeed-entry ("jvns.ca" . "https://jvns.ca/blog/2024/10/27/asn-ip-address-memory/") "Using less memory to look up IP addresses in Mess With DNS" "https://jvns.ca/blog/2024/10/27/asn-ip-address-memory/" 1730015224.0 #s(elfeed-ref "6f4c422751b99aea25756811144505f973c981d3") html nil (dev systems unread) "https://jvns.ca/atom.xml" nil) ("jvns.ca" . "https://jvns.ca/blog/2024/10/07/some-notes-on-upgrading-hugo/") #s(elfeed-entry ("jvns.ca" . "https://jvns.ca/blog/2024/10/07/some-notes-on-upgrading-hugo/") "Some notes on upgrading Hugo" "https://jvns.ca/blog/2024/10/07/some-notes-on-upgrading-hugo/" 1728292797.0 #s(elfeed-ref "b0bcc00f35f125962aa001347d78589ea8942f77") html nil (dev systems unread) "https://jvns.ca/atom.xml" nil) ("jvns.ca" . "https://jvns.ca/blog/2024/10/01/terminal-colours/") #s(elfeed-entry ("jvns.ca" . "https://jvns.ca/blog/2024/10/01/terminal-colours/") "Terminal colours are tricky" "https://jvns.ca/blog/2024/10/01/terminal-colours/" 1727776904.0 #s(elfeed-ref "12311d79c1fb802bd0e86d292e5352d9df76414c") html nil (dev systems unread) "https://jvns.ca/atom.xml" nil) ("jvns.ca" . "https://jvns.ca/blog/2024/09/27/some-go-web-dev-notes/") #s(elfeed-entry ("jvns.ca" . "https://jvns.ca/blog/2024/09/27/some-go-web-dev-notes/") "Some Go web dev notes" "https://jvns.ca/blog/2024/09/27/some-go-web-dev-notes/" 1727435760.0 #s(elfeed-ref "16bda6e1c5239394af63a31c8461b8dd9d658c50") html nil (dev systems unread) "https://jvns.ca/atom.xml" nil) ("jvns.ca" . "https://jvns.ca/blog/2024/09/12/reasons-i--still--love-fish/") #s(elfeed-entry ("jvns.ca" . "https://jvns.ca/blog/2024/09/12/reasons-i--still--love-fish/") "Reasons I still love the fish shell" "https://jvns.ca/blog/2024/09/12/reasons-i--still--love-fish/" 1726153752.0 #s(elfeed-ref "a27f518f15b7324f64cb14226f6cd0578747dc01") html nil (dev systems unread) "https://jvns.ca/atom.xml" nil) ("jvns.ca" . "https://jvns.ca/blog/2024/08/19/migrating-mess-with-dns-to-use-powerdns/") #s(elfeed-entry ("jvns.ca" . "https://jvns.ca/blog/2024/08/19/migrating-mess-with-dns-to-use-powerdns/") "Migrating Mess With DNS to use PowerDNS" "https://jvns.ca/blog/2024/08/19/migrating-mess-with-dns-to-use-powerdns/" 1724055328.0 #s(elfeed-ref "b1988ed4347345326508144ad618efa6476a6624") html nil (dev systems unread) "https://jvns.ca/atom.xml" nil) ("jvns.ca" . "https://jvns.ca/blog/2024/08/06/go-structs-copied-on-assignment/") #s(elfeed-entry ("jvns.ca" . "https://jvns.ca/blog/2024/08/06/go-structs-copied-on-assignment/") "Go structs are copied on assignment (and other things about Go I'd missed)" "https://jvns.ca/blog/2024/08/06/go-structs-copied-on-assignment/" 1722933515.0 #s(elfeed-ref "f7abae9ce3e3293aabd046c1e51fe7291686f02a") html nil (dev systems unread) "https://jvns.ca/atom.xml" nil) ("jvns.ca" . "https://jvns.ca/blog/2024/07/08/readline/") #s(elfeed-entry ("jvns.ca" . "https://jvns.ca/blog/2024/07/08/readline/") "Entering text in the terminal is complicated" "https://jvns.ca/blog/2024/07/08/readline/" 1720443615.0 #s(elfeed-ref "2071729f662835fd41db71e62d8d9d5b114404dd") html nil (dev systems unread) "https://jvns.ca/atom.xml" nil) ("jvns.ca" . "https://jvns.ca/blog/2024/07/03/reasons-to-use-job-control/") #s(elfeed-entry ("jvns.ca" . "https://jvns.ca/blog/2024/07/03/reasons-to-use-job-control/") "Reasons to use your shell's job control" "https://jvns.ca/blog/2024/07/03/reasons-to-use-job-control/" 1719993620.0 #s(elfeed-ref "bc723821685e84a564574e2279425055ae0b42e4") html nil (dev systems unread) "https://jvns.ca/atom.xml" nil) ("karthinks.com" . "https://karthinks.com/software/tool-use-with-gptel-looking-for-testers/") #s(elfeed-entry ("karthinks.com" . "https://karthinks.com/software/tool-use-with-gptel-looking-for-testers/") "Tool use with gptel: looking for testers!" "https://karthinks.com/software/tool-use-with-gptel-looking-for-testers/" 1735712460.0 #s(elfeed-ref "9cefef0ac54ae43a3ce0f06b361dedeb847b670b") html nil (dev emacs mustread unread) "https://karthinks.com/index.xml" nil) ("karthinks.com" . "https://karthinks.com/software/fringe-matters-finding-the-right-difference/") #s(elfeed-entry ("karthinks.com" . "https://karthinks.com/software/fringe-matters-finding-the-right-difference/") "Fringe Matters: Finding the Right Difference" "https://karthinks.com/software/fringe-matters-finding-the-right-difference/" 1735193460.0 #s(elfeed-ref "a6aac7b1cb6e27b51b1a39d97649af74c033d755") html nil (dev emacs mustread unread) "https://karthinks.com/index.xml" nil) ("karthinks.com" . "https://karthinks.com/software/emacs-window-management-almanac/") #s(elfeed-entry ("karthinks.com" . "https://karthinks.com/software/emacs-window-management-almanac/") "The Emacs Window Management Almanac" "https://karthinks.com/software/emacs-window-management-almanac/" 1715382780.0 #s(elfeed-ref "d73186c16824900a33c4b4bd6b9cb647fafa40e0") html nil (dev emacs mustread unread) "https://karthinks.com/index.xml" nil) ("karthinks.com" . "https://karthinks.com/software/reftex-in-org-mode/") #s(elfeed-entry ("karthinks.com" . "https://karthinks.com/software/reftex-in-org-mode/") "For Your Reference: RefTeX in Org Mode" "https://karthinks.com/software/reftex-in-org-mode/" 1708087680.0 #s(elfeed-ref "bb52f30ae9b709523f600c3cf8a402b735860ca1") html nil (dev emacs mustread unread) "https://karthinks.com/index.xml" nil) ("karthinks.com" . "https://karthinks.com/software/different-strokes-for-different-folks/") #s(elfeed-entry ("karthinks.com" . "https://karthinks.com/software/different-strokes-for-different-folks/") "Different Strokes For Different Folks" "https://karthinks.com/software/different-strokes-for-different-folks/" 1700867700.0 #s(elfeed-ref "0ff3baeb32fe8949f33807e45b3b1475eeabe31e") html nil (dev emacs mustread unread) "https://karthinks.com/index.xml" nil) ("karthinks.com" . "https://karthinks.com/software/cool-your-heels-emacs/") #s(elfeed-entry ("karthinks.com" . "https://karthinks.com/software/cool-your-heels-emacs/") "Cool your heels, Emacs" "https://karthinks.com/software/cool-your-heels-emacs/" 1692060840.0 #s(elfeed-ref "78eaa43eefb98de992322f0a510a1bc13665f154") html nil (dev emacs mustread unread) "https://karthinks.com/index.xml" nil) ("karthinks.com" . "https://karthinks.com/software/persistent-prefix-keymaps-in-emacs/") #s(elfeed-entry ("karthinks.com" . "https://karthinks.com/software/persistent-prefix-keymaps-in-emacs/") "Persistent prefix keymaps in Emacs" "https://karthinks.com/software/persistent-prefix-keymaps-in-emacs/" 1678058520.0 #s(elfeed-ref "53463677bc5965b484f449bdc53df946aee89501") html nil (dev emacs mustread unread) "https://karthinks.com/index.xml" nil) ("karthinks.com" . "https://karthinks.com/software/a-consistent-structural-editing-interface/") #s(elfeed-entry ("karthinks.com" . "https://karthinks.com/software/a-consistent-structural-editing-interface/") "A Consistent Structural Editing Interface" "https://karthinks.com/software/a-consistent-structural-editing-interface/" 1675573320.0 #s(elfeed-ref "eeaaf92a2a3fd35f67a096067686b6ff1d83c0d0") html nil (dev emacs mustread unread) "https://karthinks.com/index.xml" nil) ("karthinks.com" . "https://karthinks.com/software/notmuch-ado-about-nothing/") #s(elfeed-entry ("karthinks.com" . "https://karthinks.com/software/notmuch-ado-about-nothing/") "Notmuch Ado About Nothing" "https://karthinks.com/software/notmuch-ado-about-nothing/" 1658926920.0 #s(elfeed-ref "a0bb0949de045679572ffa9808f9e1ea2d878992") html nil (dev emacs mustread unread) "https://karthinks.com/index.xml" nil) ("karthinks.com" . "https://karthinks.com/software/it-bears-repeating/") #s(elfeed-entry ("karthinks.com" . "https://karthinks.com/software/it-bears-repeating/") "It Bears Repeating: Emacs 28 & Repeat Mode" "https://karthinks.com/software/it-bears-repeating/" 1657043220.0 #s(elfeed-ref "6713d815cee759ae6b51505694d9bcc2950edae4") html nil (dev emacs mustread unread) "https://karthinks.com/index.xml" nil) ("karthinks.com" . "https://karthinks.com/software/more-less-emacs/") #s(elfeed-entry ("karthinks.com" . "https://karthinks.com/software/more-less-emacs/") "more < less < emacs" "https://karthinks.com/software/more-less-emacs/" 1656280500.0 #s(elfeed-ref "b654defdb02dad95d4a2bc221e5c106e598491ef") html nil (dev emacs mustread unread) "https://karthinks.com/index.xml" nil) ("karthinks.com" . "https://karthinks.com/software/fast-latex-previews-in-org-mode/") #s(elfeed-entry ("karthinks.com" . "https://karthinks.com/software/fast-latex-previews-in-org-mode/") "Fast Latex previews in Org-mode" "https://karthinks.com/software/fast-latex-previews-in-org-mode/" 1646030520.0 #s(elfeed-ref "f726d366260f1419962fb802d2e3ff0de5e9c50b") html nil (dev emacs mustread unread) "https://karthinks.com/index.xml" nil) ("karthinks.com" . "https://karthinks.com/software/scaling-latex-previews-in-emacs/") #s(elfeed-entry ("karthinks.com" . "https://karthinks.com/software/scaling-latex-previews-in-emacs/") "Scaling Latex previews in Emacs" "https://karthinks.com/software/scaling-latex-previews-in-emacs/" 1645736940.0 #s(elfeed-ref "9ac77b358597e3d1239cec602beab63edceb681b") html nil (dev emacs mustread unread) "https://karthinks.com/index.xml" nil) ("karthinks.com" . "https://karthinks.com/software/dired-history-in-emacs/") #s(elfeed-entry ("karthinks.com" . "https://karthinks.com/software/dired-history-in-emacs/") "Dired history in Emacs" "https://karthinks.com/software/dired-history-in-emacs/" 1645695180.0 #s(elfeed-ref "d979eacda645580f29c40f65bb926adb40ed4d19") html nil (dev emacs mustread unread) "https://karthinks.com/index.xml" nil) ("karthinks.com" . "https://karthinks.com/software/a-tab-bar-menu-in-emacs/") #s(elfeed-entry ("karthinks.com" . "https://karthinks.com/software/a-tab-bar-menu-in-emacs/") "A Tab Bar Menu in Emacs" "https://karthinks.com/software/a-tab-bar-menu-in-emacs/" 1640798580.0 #s(elfeed-ref "434dfe88629aa7287bd1efcc92eaa55b66f20305") html nil (dev emacs mustread unread) "https://karthinks.com/index.xml" nil) ("karthinks.com" . "https://karthinks.com/software/simple-folding-with-hideshow/") #s(elfeed-entry ("karthinks.com" . "https://karthinks.com/software/simple-folding-with-hideshow/") "Simple folding with Hideshow" "https://karthinks.com/software/simple-folding-with-hideshow/" 1640014140.0 #s(elfeed-ref "fe362967cbc940b3f90be222d605cbfb1fbe0127") html nil (dev emacs mustread unread) "https://karthinks.com/index.xml" nil) ("karthinks.com" . "https://karthinks.com/software/latex-input-for-impatient-scholars/") #s(elfeed-entry ("karthinks.com" . "https://karthinks.com/software/latex-input-for-impatient-scholars/") "LaTeX Input for Impatient Scholars" "https://karthinks.com/software/latex-input-for-impatient-scholars/" 1635888240.0 #s(elfeed-ref "e493d413de66bae94ed2f8500291d6ae24e98ba2") html nil (dev emacs mustread unread) "https://karthinks.com/index.xml" nil) ("karthinks.com" . "https://karthinks.com/software/elmo-embark-live-mode-for-emacs/") #s(elfeed-entry ("karthinks.com" . "https://karthinks.com/software/elmo-embark-live-mode-for-emacs/") "ELMO - Embark Live Mode for Emacs" "https://karthinks.com/software/elmo-embark-live-mode-for-emacs/" 1635354120.0 #s(elfeed-ref "45706959926f4a0be9e39a1ada5f03505ad04177") html nil (dev emacs mustread unread) "https://karthinks.com/index.xml" nil) ("karthinks.com" . "https://karthinks.com/software/an-elisp-editing-tip/") #s(elfeed-entry ("karthinks.com" . "https://karthinks.com/software/an-elisp-editing-tip/") "An Elisp Editing Tip" "https://karthinks.com/software/an-elisp-editing-tip/" 1635064200.0 #s(elfeed-ref "72ce4f38321b13cd179c36b91d92eef9933ddd6f") html nil (dev emacs mustread unread) "https://karthinks.com/index.xml" nil) ("karthinks.com" . "https://karthinks.com/software/avy-can-do-anything/") #s(elfeed-entry ("karthinks.com" . "https://karthinks.com/software/avy-can-do-anything/") "Avy can do anything" "https://karthinks.com/software/avy-can-do-anything/" 1634808720.0 #s(elfeed-ref "8e3d6f1ad051c2227d3c5bbb2417a50c76e4edcd") html nil (dev emacs mustread unread) "https://karthinks.com/index.xml" nil) ("karthinks.com" . "https://karthinks.com/software/declickbait-elfeed/") #s(elfeed-entry ("karthinks.com" . "https://karthinks.com/software/declickbait-elfeed/") "Declickbait Elfeed" "https://karthinks.com/software/declickbait-elfeed/" 1633955220.0 #s(elfeed-ref "913d9895cabd66792c5f2c0381bba150c1382295") html nil (dev emacs mustread unread) "https://karthinks.com/index.xml" nil) ("karthinks.com" . "https://karthinks.com/software/popper-echo-mode-for-emacs/") #s(elfeed-entry ("karthinks.com" . "https://karthinks.com/software/popper-echo-mode-for-emacs/") "Popup buffer management with keyboard hints" "https://karthinks.com/software/popper-echo-mode-for-emacs/" 1633837560.0 #s(elfeed-ref "a4aca8471e3281bdb2359f8b104b924b93b5598a") html nil (dev emacs mustread unread) "https://karthinks.com/index.xml" nil) ("karthinks.com" . "https://karthinks.com/software/jumping-directories-in-eshell/") #s(elfeed-entry ("karthinks.com" . "https://karthinks.com/software/jumping-directories-in-eshell/") "Jumping directories in eshell" "https://karthinks.com/software/jumping-directories-in-eshell/" 1633739580.0 #s(elfeed-ref "c5a18c9d820392b668d3f6b882432282fd2ac266") html nil (dev emacs mustread unread) "https://karthinks.com/index.xml" nil) ("karthinks.com" . "https://karthinks.com/software/fifteen-ways-to-use-embark/") #s(elfeed-entry ("karthinks.com" . "https://karthinks.com/software/fifteen-ways-to-use-embark/") "Fifteen ways to use Embark" "https://karthinks.com/software/fifteen-ways-to-use-embark/" 1633524780.0 #s(elfeed-ref "9d9df88d8cf4010ba4a3d0ea705f5725ba8b13a0") html nil (dev emacs mustread unread) "https://karthinks.com/index.xml" nil) ("karthinks.com" . "https://karthinks.com/software/a-better-yank-pop-binding/") #s(elfeed-entry ("karthinks.com" . "https://karthinks.com/software/a-better-yank-pop-binding/") "A better yank-pop binding" "https://karthinks.com/software/a-better-yank-pop-binding/" 1621136460.0 #s(elfeed-ref "5c84da646f6d6d507f29fa851f419fb3dd0921d6") html nil (dev emacs mustread unread) "https://karthinks.com/index.xml" nil) ("karthinks.com" . "https://karthinks.com/software/bridging-islands-in-emacs-1/") #s(elfeed-entry ("karthinks.com" . "https://karthinks.com/software/bridging-islands-in-emacs-1/") "Bridging Islands in Emacs: re-builder and query-replace-regexp" "https://karthinks.com/software/bridging-islands-in-emacs-1/" 1619612700.0 #s(elfeed-ref "cd23f69bd44bd7126359cebcdee89ccdecf75176") html nil (dev emacs mustread unread) "https://karthinks.com/index.xml" nil) ("karthinks.com" . "https://karthinks.com/software/dealing-with-window-clutter-in-emacs/") #s(elfeed-entry ("karthinks.com" . "https://karthinks.com/software/dealing-with-window-clutter-in-emacs/") "Popper-mode: dealing with window clutter in Emacs" "https://karthinks.com/software/dealing-with-window-clutter-in-emacs/" 1615851960.0 #s(elfeed-ref "778d4e61f535909b461c2e3c4575605c8253c380") html nil (dev emacs mustread unread) "https://karthinks.com/index.xml" nil) ("karthinks.com" . "https://karthinks.com/software/persistent-project-switching-in-emacs/") #s(elfeed-entry ("karthinks.com" . "https://karthinks.com/software/persistent-project-switching-in-emacs/") "Persistent project switching in Emacs" "https://karthinks.com/software/persistent-project-switching-in-emacs/" 1612235460.0 #s(elfeed-ref "8fe6273a9115c1af12d6532eb4953f30da4e4156") html nil (dev emacs mustread unread) "https://karthinks.com/index.xml" nil) ("karthinks.com" . "https://karthinks.com/software/more-batteries-included-with-emacs/") #s(elfeed-entry ("karthinks.com" . "https://karthinks.com/software/more-batteries-included-with-emacs/") "More batteries included with emacs" "https://karthinks.com/software/more-batteries-included-with-emacs/" 1607743020.0 #s(elfeed-ref "a66a00c5960eb8bfacb2d16faad58c9aba637c4c") html nil (dev emacs mustread unread) "https://karthinks.com/index.xml" nil) ("karthinks.com" . "https://karthinks.com/software/batteries-included-with-emacs/") #s(elfeed-entry ("karthinks.com" . "https://karthinks.com/software/batteries-included-with-emacs/") "Batteries included with Emacs" "https://karthinks.com/software/batteries-included-with-emacs/" 1605675000.0 #s(elfeed-ref "bdc181631dcb85694d57d271646873d86de6ff13") html nil (dev emacs mustread unread) "https://karthinks.com/index.xml" nil) ("karthinks.com" . "https://karthinks.com/software/lazy-elfeed/") #s(elfeed-entry ("karthinks.com" . "https://karthinks.com/software/lazy-elfeed/") "Lazy Elfeed" "https://karthinks.com/software/lazy-elfeed/" 1590097800.0 #s(elfeed-ref "34fb7dea9324d54aaadb551788604b32b1057481") html nil (dev emacs mustread unread) "https://karthinks.com/index.xml" nil) ("karthinks.com" . "https://karthinks.com/about/") #s(elfeed-entry ("karthinks.com" . "https://karthinks.com/about/") "About" "https://karthinks.com/about/" 1570037318.0 #s(elfeed-ref "e7a386e0f8b88a13d8d1791a9bdf1df27074bee3") html nil (dev emacs mustread unread) "https://karthinks.com/index.xml" nil) ("karthinks.com" . "https://karthinks.com/blog/the-orphaning-of-ideas/") #s(elfeed-entry ("karthinks.com" . "https://karthinks.com/blog/the-orphaning-of-ideas/") "The Orphaning of Ideas" "https://karthinks.com/blog/the-orphaning-of-ideas/" 1557982413.0 #s(elfeed-ref "d93515807ab1a1eed160b0a54c22c049af809220") html nil (dev emacs mustread unread) "https://karthinks.com/index.xml" nil) ("karthinks.com" . "https://karthinks.com/blog/bodies/") #s(elfeed-entry ("karthinks.com" . "https://karthinks.com/blog/bodies/") "Bodies" "https://karthinks.com/blog/bodies/" 1554697784.0 #s(elfeed-ref "8fadba7cd680bf1e9f9f32881a52c82d8f8e8efc") html nil (dev emacs mustread unread) "https://karthinks.com/index.xml" nil) ("protesilaos.com" . "https://protesilaos.com/politics/2025-09-02-when-your-country-is-a-theme-park/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/politics/2025-09-02-when-your-country-is-a-theme-park/") "When your country is a theme park" "https://protesilaos.com/politics/2025-09-02-when-your-country-is-a-theme-park/" 1756771200.0 #s(elfeed-ref "228a9c773395a8fe76bb3b234de9817e9e9a137e") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/poems/2025-09-01-cowardice/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/poems/2025-09-01-cowardice/") "Poem: Cowardice" "https://protesilaos.com/poems/2025-09-01-cowardice/" 1756684800.0 #s(elfeed-ref "bfc9dbab7e7fafd03bd9f82d3bb613c03c86ae81") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/interpretations/2025-09-01-papakonstantinou-i-need/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/interpretations/2025-09-01-papakonstantinou-i-need/") "Interpretation of “I need” by Vasilis Papakonstantinou" "https://protesilaos.com/interpretations/2025-09-01-papakonstantinou-i-need/" 1756684800.0 #s(elfeed-ref "41e03e47360c2ed691cf191b88804a5a294bf1fa") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-09-01-emacs-doric-themes-0-4-0/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-09-01-emacs-doric-themes-0-4-0/") "Emacs: doric-themes version 0.4.0" "https://protesilaos.com/codelog/2025-09-01-emacs-doric-themes-0-4-0/" 1756684800.0 #s(elfeed-ref "16b4cb35403199cefde2b99727a0049c3ca52f94") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/news/2025-08-31-hut-another-balcony-door/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/news/2025-08-31-hut-another-balcony-door/") "Vlog: another balcony door at the hut" "https://protesilaos.com/news/2025-08-31-hut-another-balcony-door/" 1756598400.0 #s(elfeed-ref "746c8cc7d3598bde22d62f101f4b2f6023974be3") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-08-30-prot-asks-alex-lsp-elisp-guix-cycling-philosophy-go-swaywm/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-08-30-prot-asks-alex-lsp-elisp-guix-cycling-philosophy-go-swaywm/") "Prot Asks: Alex about LSP, Elisp programming, Guix, cycling, Go game, philosophy, and SwayWM" "https://protesilaos.com/codelog/2025-08-30-prot-asks-alex-lsp-elisp-guix-cycling-philosophy-go-swaywm/" 1756512000.0 #s(elfeed-ref "3b481275e671291d14f8dbe9b2acebc811ab2d05") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-08-26-emacs-show-font-0-4-0/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-08-26-emacs-show-font-0-4-0/") "Emacs: show-font version 0.4.0" "https://protesilaos.com/codelog/2025-08-26-emacs-show-font-0-4-0/" 1756166400.0 #s(elfeed-ref "21a95defd5d8bc21cb2baed1533028bd6f2c4510") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/interpretations/2025-08-25-penny-baltatzi-personally/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/interpretations/2025-08-25-penny-baltatzi-personally/") "Interpretation of “Personally” by Penny Baltatzi" "https://protesilaos.com/interpretations/2025-08-25-penny-baltatzi-personally/" 1756080000.0 #s(elfeed-ref "035748adf80ec0b44717b7ad07635ebf277f761f") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-08-25-prot-asks-ronnie-free-software-privacy-parenting-iraqi-kurdistan/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-08-25-prot-asks-ronnie-free-software-privacy-parenting-iraqi-kurdistan/") "Prot Asks: Ronnie about free software, privacy, parenting, and life in Iraqi Kurdistan" "https://protesilaos.com/codelog/2025-08-25-prot-asks-ronnie-free-software-privacy-parenting-iraqi-kurdistan/" 1756080000.0 #s(elfeed-ref "16173c3369dc2675fbf17d9d2157b01b1946ab40") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/commentary/2025-08-23-freedom-robust-constraints/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/commentary/2025-08-23-freedom-robust-constraints/") "Freedom within robust constraints" "https://protesilaos.com/commentary/2025-08-23-freedom-robust-constraints/" 1755907200.0 #s(elfeed-ref "be9992673c9c5dcdc9b055c17d63771cc619d398") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-08-20-prot-asks-dimos-emacs-interconenctedness-collective-work-conspiracies/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-08-20-prot-asks-dimos-emacs-interconenctedness-collective-work-conspiracies/") "Prot Asks: Dimos about Emacs interconnectedness, collective work, and The Conspiracy Club" "https://protesilaos.com/codelog/2025-08-20-prot-asks-dimos-emacs-interconenctedness-collective-work-conspiracies/" 1755648000.0 #s(elfeed-ref "8fc806d81bef878918ad6801d66a99ccce340e8f") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/news/2025-08-18-walk-burnt-cyprus-mountains/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/news/2025-08-18-walk-burnt-cyprus-mountains/") "Vlog: walk through the burnt Cyprus mountains" "https://protesilaos.com/news/2025-08-18-walk-burnt-cyprus-mountains/" 1755475200.0 #s(elfeed-ref "74cae24c1f672dde7f7828c222e0c6e2de3851de") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-08-17-prot-asks-erik-emacs-1990s-portland-oregon-podcasting/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-08-17-prot-asks-erik-emacs-1990s-portland-oregon-podcasting/") "Prot Asks: Erik about Emacs since the 1990s, Oregon and Portland, and podcasting" "https://protesilaos.com/codelog/2025-08-17-prot-asks-erik-emacs-1990s-portland-oregon-podcasting/" 1755388800.0 #s(elfeed-ref "9cf2c8cc45fe46dd8389e8130ab2891ecad2c180") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-08-17-emacs-doric-beach-and-doric-valley-themes/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-08-17-emacs-doric-beach-and-doric-valley-themes/") "Emacs: in-development ‘doric-beach’ and ‘doric-valley’ themes" "https://protesilaos.com/codelog/2025-08-17-emacs-doric-beach-and-doric-valley-themes/" 1755388800.0 #s(elfeed-ref "f6a4d289d6871cd879e9c61922501da56e5d806f") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-08-14-emacs-sxhkdrc-mode-1-2-0/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-08-14-emacs-sxhkdrc-mode-1-2-0/") "Emacs: sxhkdrc-mode version 1.2.0" "https://protesilaos.com/codelog/2025-08-14-emacs-sxhkdrc-mode-1-2-0/" 1755129600.0 #s(elfeed-ref "584bf66fa258ff1a178b383f7c31753281618f8e") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-08-13-prot-asks-arni-emacs-no-distractions-art/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-08-13-prot-asks-arni-emacs-no-distractions-art/") "Prot Asks: Arni about Emacs, no distractions, socialising, and self-expression through art" "https://protesilaos.com/codelog/2025-08-13-prot-asks-arni-emacs-no-distractions-art/" 1755043200.0 #s(elfeed-ref "2533061b4cd7dd734a9fb5037530f7b22faf9c25") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/poems/2025-08-11-unknown-journeyman/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/poems/2025-08-11-unknown-journeyman/") "Poem: To the unknown journeyman" "https://protesilaos.com/poems/2025-08-11-unknown-journeyman/" 1754870400.0 #s(elfeed-ref "048b3ad7a77e0fa0b200cd1ba8fc24623543b24b") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-08-11-emacs-doric-themes-0-3-0/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-08-11-emacs-doric-themes-0-3-0/") "Emacs: doric-themes version 0.3.0" "https://protesilaos.com/codelog/2025-08-11-emacs-doric-themes-0-3-0/" 1754870400.0 #s(elfeed-ref "4ffd38469986c3450a8544aefb784e9c46fdb874") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-08-10-prot-asks-pizzatorque-emacs-programming-linguistics-community-life/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-08-10-prot-asks-pizzatorque-emacs-programming-linguistics-community-life/") "Prot Asks: PizzaTorque about Emacs for programming, linguistics, art and community" "https://protesilaos.com/codelog/2025-08-10-prot-asks-pizzatorque-emacs-programming-linguistics-community-life/" 1754784000.0 #s(elfeed-ref "a75267f382d90754eec04ab758d6dbdce6a0482b") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-08-06-prot-asks-james-biology-teaching-emacs-free-software-politics/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-08-06-prot-asks-james-biology-teaching-emacs-free-software-politics/") "Prot Asks: James about biology teaching, Emacs, and free software politics" "https://protesilaos.com/codelog/2025-08-06-prot-asks-james-biology-teaching-emacs-free-software-politics/" 1754438400.0 #s(elfeed-ref "429e00c97da026787d2b9547d9d5fe02d4c9f309") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-08-06-emacs-writing-studio-book/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-08-06-emacs-writing-studio-book/") "I got the Emacs Writing Studio (EWS) book" "https://protesilaos.com/codelog/2025-08-06-emacs-writing-studio-book/" 1754438400.0 #s(elfeed-ref "ff396260170e9505bdf59e4dd588c09322d954ee") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-08-04-emacs-doric-oak-pine-themes/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-08-04-emacs-doric-oak-pine-themes/") "Emacs: new ‘oak’ and ‘pine’ doric-themes" "https://protesilaos.com/codelog/2025-08-04-emacs-doric-oak-pine-themes/" 1754265600.0 #s(elfeed-ref "631f3b0900f0b2282274ffc2614a684429e07144") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-08-02-prot-asks-diego-emacs-use-head-engineering-industry-combat-sports/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-08-02-prot-asks-diego-emacs-use-head-engineering-industry-combat-sports/") "Prot Asks: Diego about Emacs use, head of engineering, industry’s state, and combat sports" "https://protesilaos.com/codelog/2025-08-02-prot-asks-diego-emacs-use-head-engineering-industry-combat-sports/" 1754092800.0 #s(elfeed-ref "46370c7aa6c61cd0da2ceabcc39d95941d885626") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-08-01-linkarzu-chat-emacs-neovim-philosophy/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-08-01-linkarzu-chat-emacs-neovim-philosophy/") "Deep dive with @linkarzu about Emacs, NeoVim, Linux, keyboards, and philosophy" "https://protesilaos.com/codelog/2025-08-01-linkarzu-chat-emacs-neovim-philosophy/" 1754006400.0 #s(elfeed-ref "6dca5af19e48f94a39f0870b7073d99bc6630b00") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-07-30-prot-asks-rudy-emacs-game-dev-lisp-hacking-learning/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-07-30-prot-asks-rudy-emacs-game-dev-lisp-hacking-learning/") "Prot Asks: Rudy about Emacs for game development, Lisp hacking, and learning" "https://protesilaos.com/codelog/2025-07-30-prot-asks-rudy-emacs-game-dev-lisp-hacking-learning/" 1753833600.0 #s(elfeed-ref "e9dfa91a7a6f92d1e8b13cb87f6fd46f217c8615") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-07-29-videos-internet-archive/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-07-29-videos-internet-archive/") "All my videos are mirrored on the Internet Archive (thanks to Amin Bandali)" "https://protesilaos.com/codelog/2025-07-29-videos-internet-archive/" 1753747200.0 #s(elfeed-ref "754371234293343624c99c218cf196c8eb985be0") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-07-27-talk-emacs-linkarzu-youtube-channel/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-07-27-talk-emacs-linkarzu-youtube-channel/") "I will talk about Emacs on the @linkarzu YouTube channel" "https://protesilaos.com/codelog/2025-07-27-talk-emacs-linkarzu-youtube-channel/" 1753574400.0 #s(elfeed-ref "2ab0eb9ee3d33fe241525f3e641df012b0b1e6f9") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-07-26-prot-asks-ihor-emacs-org-maintainer-history-travel-material-science/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-07-26-prot-asks-ihor-emacs-org-maintainer-history-travel-material-science/") "Prot Asks: Ihor about maintaining Emacs Org mode, history, travels, and material science" "https://protesilaos.com/codelog/2025-07-26-prot-asks-ihor-emacs-org-maintainer-history-travel-material-science/" 1753488000.0 #s(elfeed-ref "8cc7f119ffe2edd55a511372ebe41a5fcb525080") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/news/2025-07-25-dealt-cyprus-wildfires/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/news/2025-07-25-dealt-cyprus-wildfires/") "Vlog: how I dealt with the Cyprus wildfires" "https://protesilaos.com/news/2025-07-25-dealt-cyprus-wildfires/" 1753401600.0 #s(elfeed-ref "e948f4520f44d59d60e635808cba9f377f150eb8") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/news/2025-07-24-wildfires-cyprus-me-okay/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/news/2025-07-24-wildfires-cyprus-me-okay/") "Wildfires in Cyprus; I am okay" "https://protesilaos.com/news/2025-07-24-wildfires-cyprus-me-okay/" 1753315200.0 #s(elfeed-ref "e63613ef8bf61583d4bcd38457b523433f697865") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-07-23-prot-asks-eric-emacs-lisp-music-aesthetics-minnesota/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-07-23-prot-asks-eric-emacs-lisp-music-aesthetics-minnesota/") "Prot Asks: Eric about Emacs, Lisp, music, aesthetics, and Minnesota" "https://protesilaos.com/codelog/2025-07-23-prot-asks-eric-emacs-lisp-music-aesthetics-minnesota/" 1753228800.0 #s(elfeed-ref "04d754a932c45ff0c80fd520afa880407667a2fd") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-07-22-emacs-cursory-1-2-0/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-07-22-emacs-cursory-1-2-0/") "Emacs: cursory version 1.2.0" "https://protesilaos.com/codelog/2025-07-22-emacs-cursory-1-2-0/" 1753142400.0 #s(elfeed-ref "54f13904d82e2a4337ea372dad28c3e155649183") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-07-19-prot-asks-gino-emacs-data-engineer-open-source-chile/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-07-19-prot-asks-gino-emacs-data-engineer-open-source-chile/") "Prot Asks: Gino about Emacs for data engineering, Open Source, and Chile" "https://protesilaos.com/codelog/2025-07-19-prot-asks-gino-emacs-data-engineer-open-source-chile/" 1752883200.0 #s(elfeed-ref "4a7821b30d7d817275a4ff30cf65e25005c233a2") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-07-18-emacs-dired-preview-0-6-0/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-07-18-emacs-dired-preview-0-6-0/") "Emacs: dired-preview version 0.6.0" "https://protesilaos.com/codelog/2025-07-18-emacs-dired-preview-0-6-0/" 1752796800.0 #s(elfeed-ref "ffe059457c6ac8c8289a25c9d3cbce15ca7fc1c5") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-07-16-prot-asks-thomas-emacs-bjj-sport-cult-manga/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-07-16-prot-asks-thomas-emacs-bjj-sport-cult-manga/") "Prot Asks: Thomas about Emacs writing, Brazilian Jiu Jitsu, sport culture, and manga" "https://protesilaos.com/codelog/2025-07-16-prot-asks-thomas-emacs-bjj-sport-cult-manga/" 1752624000.0 #s(elfeed-ref "e9e0ac68beee05fe33d0d5d2289c9aeea5bdb13e") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-07-14-common-questions-about-prot-asks-videos-emacs-life/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-07-14-common-questions-about-prot-asks-videos-emacs-life/") "Common questions about the ‘Prot Asks’ videos on Emacs and Life" "https://protesilaos.com/codelog/2025-07-14-common-questions-about-prot-asks-videos-emacs-life/" 1752451200.0 #s(elfeed-ref "829647f9bdcf3594ba30551312e6b6db117ac820") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-07-12-prot-asks-carlos-emacs-engineering-life-spain/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-07-12-prot-asks-carlos-emacs-engineering-life-spain/") "Prot Asks: Carlos about Emacs for engineering, free software, and Spain" "https://protesilaos.com/codelog/2025-07-12-prot-asks-carlos-emacs-engineering-life-spain/" 1752278400.0 #s(elfeed-ref "851d677a1b16c64b342c963052e7e1eb41d3f026") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-07-10-prot-asks-chats-videos-proposal/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-07-10-prot-asks-chats-videos-proposal/") "Join me for ‘Prot Asks’ public video calls about Emacs and life in general" "https://protesilaos.com/codelog/2025-07-10-prot-asks-chats-videos-proposal/" 1752105600.0 #s(elfeed-ref "047aaa15e020de7cec6251db9ab62a4ba6997793") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-07-09-emacs-denote-reorder-components/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-07-09-emacs-denote-reorder-components/") "Emacs: reorder Denote file name components" "https://protesilaos.com/codelog/2025-07-09-emacs-denote-reorder-components/" 1752019200.0 #s(elfeed-ref "77809dca8546ee01e67552c889a067311bbf5512") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-07-07-emacs-mct-1-1-0/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-07-07-emacs-mct-1-1-0/") "Emacs: mct version 1.1.0" "https://protesilaos.com/codelog/2025-07-07-emacs-mct-1-1-0/" 1751846400.0 #s(elfeed-ref "8d4bf1e47fcce932cea853bb579ec4d62ef61db3") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-07-05-emacs-doric-themes-0-2-0/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-07-05-emacs-doric-themes-0-2-0/") "Emacs: doric-themes version 0.2.0" "https://protesilaos.com/codelog/2025-07-05-emacs-doric-themes-0-2-0/" 1751673600.0 #s(elfeed-ref "c5a3a9fb903b4ae77c9313561ae27be34f22eafe") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/commentary/2025-07-04-take-puppies-from-mother/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/commentary/2025-07-04-take-puppies-from-mother/") "Re: how could you separate puppies from their mother?" "https://protesilaos.com/commentary/2025-07-04-take-puppies-from-mother/" 1751587200.0 #s(elfeed-ref "f9ff8292ed9be7b9feae008bf1b47c4890f5d7d0") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/news/2025-07-02-vlog-two-new-puppies-hut/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/news/2025-07-02-vlog-two-new-puppies-hut/") "Vlog: two new puppies at the hut (Meelon and Oreeon)" "https://protesilaos.com/news/2025-07-02-vlog-two-new-puppies-hut/" 1751414400.0 #s(elfeed-ref "25c4b06470b7727183dae1e08310b831b1d86d89") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/commentary/2025-06-29-audience-public-contributions/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/commentary/2025-06-29-audience-public-contributions/") "About building an audience and making public contributions" "https://protesilaos.com/commentary/2025-06-29-audience-public-contributions/" 1751155200.0 #s(elfeed-ref "b8ba262cac8a7be45794ca35383b6a330caa899a") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-06-28-emacs-beframe-1-4-0/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-06-28-emacs-beframe-1-4-0/") "Emacs: beframe version 1.4.0" "https://protesilaos.com/codelog/2025-06-28-emacs-beframe-1-4-0/" 1751068800.0 #s(elfeed-ref "adf4dba4ee906af16a201bdf4685160ee4dcb4aa") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/commentary/2025-06-27-feral-black-dog-wild-red-fox/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/commentary/2025-06-27-feral-black-dog-wild-red-fox/") "The feral black dog and the wild red fox" "https://protesilaos.com/commentary/2025-06-27-feral-black-dog-wild-red-fox/" 1750982400.0 #s(elfeed-ref "f52713af0bd55c1fa5cdbe2fe91a503d1b1a4ecc") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/commentary/2025-06-26-the-year-my-dogs-got-old/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/commentary/2025-06-26-the-year-my-dogs-got-old/") "The year my dogs got old" "https://protesilaos.com/commentary/2025-06-26-the-year-my-dogs-got-old/" 1750896000.0 #s(elfeed-ref "b9c27f7ead6d7d8eceea5e79e2207168a17654d4") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/books/2025-06-24-my-body-my-rules/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/books/2025-06-24-my-body-my-rules/") "Philosophy: is it “my body; my rules”?" "https://protesilaos.com/books/2025-06-24-my-body-my-rules/" 1750723200.0 #s(elfeed-ref "b1af53feec51c49d8018da1c187c58a9fb3bdb9b") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/commentary/2025-06-22-cool-uncle-archetype/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/commentary/2025-06-22-cool-uncle-archetype/") "The “cool uncle” archetype" "https://protesilaos.com/commentary/2025-06-22-cool-uncle-archetype/" 1750550400.0 #s(elfeed-ref "9ae69a3c87dbfd47a7161cc87c66e77c328ae0ac") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/politics/2025-06-19-america-interventionism-destiny/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/politics/2025-06-19-america-interventionism-destiny/") "America is destined to pursue interventionism" "https://protesilaos.com/politics/2025-06-19-america-interventionism-destiny/" 1750291200.0 #s(elfeed-ref "5fa16f2758b9df6330922e4d896017c1c43635a2") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/politics/2025-06-16-eu-strategic-weakness/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/politics/2025-06-16-eu-strategic-weakness/") "On the EU’s strategic weakness" "https://protesilaos.com/politics/2025-06-16-eu-strategic-weakness/" 1750032000.0 #s(elfeed-ref "652881890ce8f5357977e20c809ee61eb52df1d5") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/commentary/2025-06-13-between-humans-other-animals/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/commentary/2025-06-13-between-humans-other-animals/") "Between humans and other animals" "https://protesilaos.com/commentary/2025-06-13-between-humans-other-animals/" 1749772800.0 #s(elfeed-ref "d083b95456090dc83857aeb43a7e66b675f41bc5") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/commentary/2025-06-12-developing-through-crisis/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/commentary/2025-06-12-developing-through-crisis/") "Developing oneself through crisis" "https://protesilaos.com/commentary/2025-06-12-developing-through-crisis/" 1749686400.0 #s(elfeed-ref "8cfef809374a9545d987cf517020a75ec500e641") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-06-11-emacs-modus-themes-4-8-0/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-06-11-emacs-modus-themes-4-8-0/") "Emacs: modus-themes version 4.8.0" "https://protesilaos.com/codelog/2025-06-11-emacs-modus-themes-4-8-0/" 1749600000.0 #s(elfeed-ref "5ddc2b8020a0e578112d4cf41bb30a2e9a0269b9") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/commentary/2025-06-08-two-baby-foxes/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/commentary/2025-06-08-two-baby-foxes/") "Two baby foxes" "https://protesilaos.com/commentary/2025-06-08-two-baby-foxes/" 1749340800.0 #s(elfeed-ref "d78751f4c2ac33b15db62fd76c1b74dc9b43ca00") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/poems/2025-06-07-play-of-the-swallows/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/poems/2025-06-07-play-of-the-swallows/") "Poem: Play of the swallows" "https://protesilaos.com/poems/2025-06-07-play-of-the-swallows/" 1749254400.0 #s(elfeed-ref "b75cebb625acdaefcb3c89c4e98b184d1862c8fc") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/interpretations/2025-06-06-karapataki-alkaline-leaves/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/interpretations/2025-06-06-karapataki-alkaline-leaves/") "Interpretation of “Alkaline leaves” by Ioulia Karapataki" "https://protesilaos.com/interpretations/2025-06-06-karapataki-alkaline-leaves/" 1749168000.0 #s(elfeed-ref "dd4f3936d75b19c74bdb502280d02c736822932b") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/commentary/2025-06-05-find-sobriety-more-meaningful-psychedelics/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/commentary/2025-06-05-find-sobriety-more-meaningful-psychedelics/") "Finding sobriety more meaningful than psychedelics" "https://protesilaos.com/commentary/2025-06-05-find-sobriety-more-meaningful-psychedelics/" 1749081600.0 #s(elfeed-ref "d007508a1af9fe7cbed48f4af2cacdd75552847f") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-06-01-emacs-spacious-padding-0-7-0/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-06-01-emacs-spacious-padding-0-7-0/") "Emacs: spacious-padding version 0.7.0" "https://protesilaos.com/codelog/2025-06-01-emacs-spacious-padding-0-7-0/" 1748736000.0 #s(elfeed-ref "cd11ea303e2d67a50bf261aff4ed9ef518ce847f") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/poems/2025-05-31-mercenary-motive/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/poems/2025-05-31-mercenary-motive/") "Poem: The mercenary’s motive" "https://protesilaos.com/poems/2025-05-31-mercenary-motive/" 1748649600.0 #s(elfeed-ref "136312c04367b66204bd7ce893d2a6afddf5afe9") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/commentary/2025-05-30-shiny-pokemon-named-prot/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/commentary/2025-05-30-shiny-pokemon-named-prot/") "A shiny Pokemon named ‘Prot’" "https://protesilaos.com/commentary/2025-05-30-shiny-pokemon-named-prot/" 1748563200.0 #s(elfeed-ref "b53f8364a6d89e95f1ccf858d79e8a413543b2b3") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/news/2025-05-29-vlog-two-our-mountain-climb-natural-philosophy/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/news/2025-05-29-vlog-two-our-mountain-climb-natural-philosophy/") "Vlog: 2-hour mountain climb and natural philosophy" "https://protesilaos.com/news/2025-05-29-vlog-two-our-mountain-climb-natural-philosophy/" 1748476800.0 #s(elfeed-ref "f467f8cd0137d407142860d09fabf9dd3ddbd345") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/commentary/2025-05-28-rediscovering-jasmine/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/commentary/2025-05-28-rediscovering-jasmine/") "Rediscovering Jasmine" "https://protesilaos.com/commentary/2025-05-28-rediscovering-jasmine/" 1748390400.0 #s(elfeed-ref "e8327120d753549aa2ba2ef263d411541a9d158c") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/interpretations/2025-05-27-kleopas-ode-to-sun/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/interpretations/2025-05-27-kleopas-ode-to-sun/") "Interpretation of “Ode to the Sun” by Kleopas" "https://protesilaos.com/interpretations/2025-05-27-kleopas-ode-to-sun/" 1748304000.0 #s(elfeed-ref "4a97599927f4d4fdb6c35a17d89825e91c1a0265") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-05-27-emacs-doric-themes-0-1-0/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-05-27-emacs-doric-themes-0-1-0/") "Emacs: doric-themes version 0.1.0" "https://protesilaos.com/codelog/2025-05-27-emacs-doric-themes-0-1-0/" 1748304000.0 #s(elfeed-ref "b6a10c42e040fd12602f8ecc34755efa9448f1d8") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/books/2025-05-25-invisible-man/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/books/2025-05-25-invisible-man/") "The invisible man" "https://protesilaos.com/books/2025-05-25-invisible-man/" 1748131200.0 #s(elfeed-ref "9d08402b95328bf8353741b2dd22cc72264401d1") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/commentary/2025-05-23-garden-forest/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/commentary/2025-05-23-garden-forest/") "The garden and the forest" "https://protesilaos.com/commentary/2025-05-23-garden-forest/" 1747958400.0 #s(elfeed-ref "03b1a43951b0c0e6d6d40bf500c54923ca0826f1") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-05-21-emacs-live-denote-doric-themes/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-05-21-emacs-live-denote-doric-themes/") "Emacs: live package maintenance (denote, doric-themes, etc.) today 2025-05-21 at 11:00 Europe/Athens time" "https://protesilaos.com/codelog/2025-05-21-emacs-live-denote-doric-themes/" 1747785600.0 #s(elfeed-ref "795e2720fcd1307c7e30ee1a248ea3f79ed5a9e8") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/books/2025-05-19-even-gods-convinced-necessity/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/books/2025-05-19-even-gods-convinced-necessity/") "Philosophy: even the gods are convinced by necessity" "https://protesilaos.com/books/2025-05-19-even-gods-convinced-necessity/" 1747612800.0 #s(elfeed-ref "707c9c861bf4095a07f8b71735cbf2d5065541ba") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/keeb/2025-05-17-cherry-silent-black-switches-thoughts/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/keeb/2025-05-17-cherry-silent-black-switches-thoughts/") "Thoughts on the Cherry MX2A Silent Black switches" "https://protesilaos.com/keeb/2025-05-17-cherry-silent-black-switches-thoughts/" 1747440000.0 #s(elfeed-ref "0441faa1d2590d7e45a4f7b7cae8800aa2aa61d3") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/politics/2025-05-17-thoughts-adhd-politics/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/politics/2025-05-17-thoughts-adhd-politics/") "Thoughts on the experience of boyhood and politics of ADHD" "https://protesilaos.com/politics/2025-05-17-thoughts-adhd-politics/" 1747440000.0 #s(elfeed-ref "ba7324dbd14f9f58e63990dd67fd68a2711f5b83") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/commentary/2025-05-16-not-one-selfie/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/commentary/2025-05-16-not-one-selfie/") "Not one selfie" "https://protesilaos.com/commentary/2025-05-16-not-one-selfie/" 1747353600.0 #s(elfeed-ref "c1056902de05a54e3b3197aeffa7bbfc4767db92") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/poems/2025-05-15-what-you-seek/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/poems/2025-05-15-what-you-seek/") "What you seek (my poem)" "https://protesilaos.com/poems/2025-05-15-what-you-seek/" 1747267200.0 #s(elfeed-ref "10f39d56259e3b8dd82464dd4d7638cfb96e103a") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-05-13-emacs-doric-themes/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-05-13-emacs-doric-themes/") "Emacs: my new Doric themes" "https://protesilaos.com/codelog/2025-05-13-emacs-doric-themes/" 1747094400.0 #s(elfeed-ref "c81f0ed3285e708c336a74c4210b414f7160bbd4") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/commentary/2025-05-12-re-feeling-purposeless/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/commentary/2025-05-12-re-feeling-purposeless/") "Re: I am feeling purposeless these days" "https://protesilaos.com/commentary/2025-05-12-re-feeling-purposeless/" 1747008000.0 #s(elfeed-ref "58245e4d19d22b5bd019105684d8a4c1c5f6acab") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-05-09-live-stream-emacs-linux-life/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-05-09-live-stream-emacs-linux-life/") "Live @ 2025-05-11, 14:00 Europe/Athens: ‘Ask Me Anything’ about Emacs, Linux, and Life in general" "https://protesilaos.com/codelog/2025-05-09-live-stream-emacs-linux-life/" 1746748800.0 #s(elfeed-ref "682ea1d7ac4f7be834eee89579a21bfbdcf66159") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/commentary/2025-05-06-inspiration-willpower/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/commentary/2025-05-06-inspiration-willpower/") "Re: where do you find inspiration and willpower?" "https://protesilaos.com/commentary/2025-05-06-inspiration-willpower/" 1746489600.0 #s(elfeed-ref "c798dbb55c1d2a602ebd11087a6d7ee3120145a1") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/poems/2025-05-02-escape/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/poems/2025-05-02-escape/") "Escape (my poem)" "https://protesilaos.com/poems/2025-05-02-escape/" 1746144000.0 #s(elfeed-ref "4d99cdfbac65d76e802e3e6692acb168d161111c") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/poems/2025-04-30-late-bloomer/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/poems/2025-04-30-late-bloomer/") "Late bloomer (my poem)" "https://protesilaos.com/poems/2025-04-30-late-bloomer/" 1745971200.0 #s(elfeed-ref "5faef7bec632d7abf7c2fd0d128e73d9fa5385db") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-04-29-emacs-ef-themes-1-10-0/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-04-29-emacs-ef-themes-1-10-0/") "Emacs: ef-themes version 1.10.0" "https://protesilaos.com/codelog/2025-04-29-emacs-ef-themes-1-10-0/" 1745884800.0 #s(elfeed-ref "1f13d47c9018cd63fee24a8f7e21eb4331d722bb") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-04-27-aporetic-fonts-version-1-2-0/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-04-27-aporetic-fonts-version-1-2-0/") "Aporetic fonts version 1.2.0" "https://protesilaos.com/codelog/2025-04-27-aporetic-fonts-version-1-2-0/" 1745712000.0 #s(elfeed-ref "cf52ba7ef1aab9128d1b8d78af8ff4d736f09706") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-04-26-emacs-show-font-0-3-0/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-04-26-emacs-show-font-0-3-0/") "Emacs: show-font version 0.3.0" "https://protesilaos.com/codelog/2025-04-26-emacs-show-font-0-3-0/" 1745625600.0 #s(elfeed-ref "aa89bf6b59ac56ccaa57f30cd96f48227b6be10e") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/politics/2025-04-25-eu-indifference-palestinians/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/politics/2025-04-25-eu-indifference-palestinians/") "On the EU’s indifference towards the Palestinians" "https://protesilaos.com/politics/2025-04-25-eu-indifference-palestinians/" 1745539200.0 #s(elfeed-ref "395a98526edfc6f3d688c9644b90086dfa65cb35") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/commentary/2025-04-25-dealing-indecision-maintenance-adventure/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/commentary/2025-04-25-dealing-indecision-maintenance-adventure/") "Dealing with indecision with a sense of maintenance and adventure" "https://protesilaos.com/commentary/2025-04-25-dealing-indecision-maintenance-adventure/" 1745539200.0 #s(elfeed-ref "3cbaad2276f92799d65a3d06f5dac13bad1038a5") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/interpretations/2025-04-22-galani-just-two-days/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/interpretations/2025-04-22-galani-just-two-days/") "Interpretation of “Just two days” by Dimitra Galani" "https://protesilaos.com/interpretations/2025-04-22-galani-just-two-days/" 1745280000.0 #s(elfeed-ref "d23d87e76054a7502efb84baedee300710d4f032") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/commentary/2025-04-21-doing-it-alone-versus-others/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/commentary/2025-04-21-doing-it-alone-versus-others/") "Re: doing it alone VS doing it with others" "https://protesilaos.com/commentary/2025-04-21-doing-it-alone-versus-others/" 1745193600.0 #s(elfeed-ref "2045cdaa313f47aae797a85361691778ad3347d6") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/news/2025-04-20-vlog-tour-hut-back-side/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/news/2025-04-20-vlog-tour-hut-back-side/") "Vlog: tour of the hut’s back side" "https://protesilaos.com/news/2025-04-20-vlog-tour-hut-back-side/" 1745107200.0 #s(elfeed-ref "289589fff16c002d2737fb88172369e39fffea92") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/interpretations/2025-04-19-paschalidis-perseids/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/interpretations/2025-04-19-paschalidis-perseids/") "Interpretation of “Perseids” by Miltos Paschalidis" "https://protesilaos.com/interpretations/2025-04-19-paschalidis-perseids/" 1745020800.0 #s(elfeed-ref "349237d9825c446e590a22a73a4cc7455873555d") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-04-18-emacs-tmr-1-1-0/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-04-18-emacs-tmr-1-1-0/") "Emacs: tmr version 1.1.0" "https://protesilaos.com/codelog/2025-04-18-emacs-tmr-1-1-0/" 1744934400.0 #s(elfeed-ref "ccf0f126eea01deeab9637dd3ef3a778506cb9b9") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-04-17-emacs-modus-themes-4-7-0/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-04-17-emacs-modus-themes-4-7-0/") "Emacs: modus-themes version 4.7.0" "https://protesilaos.com/codelog/2025-04-17-emacs-modus-themes-4-7-0/" 1744848000.0 #s(elfeed-ref "fed31fa875f1606fa4b35229f24ce3a2cf9248b9") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/commentary/2025-04-17-concern-psychedelics/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/commentary/2025-04-17-concern-psychedelics/") "My concern with psychedelics" "https://protesilaos.com/commentary/2025-04-17-concern-psychedelics/" 1744848000.0 #s(elfeed-ref "869ebe53781d79adaa881c5126fd44a1aa2ddecc") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-04-15-emacs-denote-4-0-0/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-04-15-emacs-denote-4-0-0/") "Emacs: Denote version 4.0.0" "https://protesilaos.com/codelog/2025-04-15-emacs-denote-4-0-0/" 1744675200.0 #s(elfeed-ref "2405e51e2a5984943847d018eecbe98e56b39a40") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-04-12-emacs-lisp-elements-book/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-04-12-emacs-lisp-elements-book/") "Emacs: My new ‘Emacs Lisp Elements’ book" "https://protesilaos.com/codelog/2025-04-12-emacs-lisp-elements-book/" 1744416000.0 #s(elfeed-ref "764baac5ef6a7b7002e035a76a711a10d47132e4") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-04-09-emacs-dired-preview-0-5-0/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-04-09-emacs-dired-preview-0-5-0/") "Emacs: dired-preview version 0.5.0" "https://protesilaos.com/codelog/2025-04-09-emacs-dired-preview-0-5-0/" 1744156800.0 #s(elfeed-ref "2bb32f9898ba65b682ed7a89571b59415ffd7a5d") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-04-06-emacs-modus-tinted-refinements/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-04-06-emacs-modus-tinted-refinements/") "Emacs: stylistic refinements to the “tinted” Modus themes" "https://protesilaos.com/codelog/2025-04-06-emacs-modus-tinted-refinements/" 1743897600.0 #s(elfeed-ref "e049af8e4e4bfbc74e681b71ad63082b7774389b") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-03-31-emacs-denote-journal-calendar/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-03-31-emacs-denote-journal-calendar/") "Emacs: ‘denote-journal’ integration with ‘M-x calendar’" "https://protesilaos.com/codelog/2025-03-31-emacs-denote-journal-calendar/" 1743379200.0 #s(elfeed-ref "f3ac53f46e599b76a8f5d0cae064125f9a7acd1f") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/books/2025-03-29-so-smart-should-do-stuff/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/books/2025-03-29-so-smart-should-do-stuff/") "Philosophy: “Prot, you are so smart; you should be doing stuff!”" "https://protesilaos.com/books/2025-03-29-so-smart-should-do-stuff/" 1743206400.0 #s(elfeed-ref "fc67ed2dcad7aa6be178e78c8c9959d2106589c1") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-03-28-emacs-denote-query-links/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-03-28-emacs-denote-query-links/") "Emacs: Denote ‘query links’ (links that trigger a search)" "https://protesilaos.com/codelog/2025-03-28-emacs-denote-query-links/" 1743120000.0 #s(elfeed-ref "db6c8061fecf07ec7eb334e5c624d64bc766027c") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/news/2025-03-25-hut-manual-labour-avoid-distractions/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/news/2025-03-25-hut-manual-labour-avoid-distractions/") "Vlog: manual work at the hut and avoiding computer distractions" "https://protesilaos.com/news/2025-03-25-hut-manual-labour-avoid-distractions/" 1742860800.0 #s(elfeed-ref "f5721ff7ad89599259f461c99824bbef4157c7d6") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-03-24-emacs-denote-query-links/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-03-24-emacs-denote-query-links/") "Emacs: first look at query links for Denote version 4.0.0" "https://protesilaos.com/codelog/2025-03-24-emacs-denote-query-links/" 1742774400.0 #s(elfeed-ref "0c65f3b8ec632852e4588f0a7c5f7dcd730e49c6") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/logical-duals-in-software-engineering/") #s(elfeed-entry ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/logical-duals-in-software-engineering/") "Logical Duals in Software Engineering" "https://buttondown.com/hillelwayne/archive/logical-duals-in-software-engineering/" 1756322732.0 #s(elfeed-ref "fc243da3c284e5e5d05ea79d65ece865662cc52c") html nil (dev theory unread) "https://buttondown.email/hillelwayne/rss" nil) ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/sapir-whorf-does-not-apply-to-programming/") #s(elfeed-entry ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/sapir-whorf-does-not-apply-to-programming/") "Sapir-Whorf does not apply to Programming Languages" "https://buttondown.com/hillelwayne/archive/sapir-whorf-does-not-apply-to-programming/" 1755781200.0 #s(elfeed-ref "f98f8d650df14837ef159f6bb0922c920d9a7a72") html nil (dev theory unread) "https://buttondown.email/hillelwayne/rss" nil) ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/software-books-i-wish-i-could-read/") #s(elfeed-entry ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/software-books-i-wish-i-could-read/") "Software books I wish I could read" "https://buttondown.com/hillelwayne/archive/software-books-i-wish-i-could-read/" 1754485200.0 #s(elfeed-ref "c83148ab38de0454083961133b4bff2fba4194e5") html nil (dev theory unread) "https://buttondown.email/hillelwayne/rss" nil) ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/2000-words-about-arrays-and-tables/") #s(elfeed-entry ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/2000-words-about-arrays-and-tables/") "2000 words about arrays and tables" "https://buttondown.com/hillelwayne/archive/2000-words-about-arrays-and-tables/" 1753880400.0 #s(elfeed-ref "2cd57fe532686346298e45568fd3514e83baddd3") html nil (dev theory unread) "https://buttondown.email/hillelwayne/rss" nil) ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/programming-language-escape-hatches/") #s(elfeed-entry ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/programming-language-escape-hatches/") "Programming Language Escape Hatches" "https://buttondown.com/hillelwayne/archive/programming-language-escape-hatches/" 1753365600.0 #s(elfeed-ref "9b8b0d4e7b4a9c13597f36eee566a28cf90c49f8") html nil (dev theory unread) "https://buttondown.email/hillelwayne/rss" nil) ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/maybe-writing-speed-actually-is-a-bottleneck-for/") #s(elfeed-entry ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/maybe-writing-speed-actually-is-a-bottleneck-for/") "Maybe writing speed actually is a bottleneck for programming" "https://buttondown.com/hillelwayne/archive/maybe-writing-speed-actually-is-a-bottleneck-for/" 1752779307.0 #s(elfeed-ref "65c73a42cb0e63a55d0cd7d4c7c1a05794b1fcfe") html nil (dev theory unread) "https://buttondown.email/hillelwayne/rss" nil) ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/logic-for-programmers-turns-one/") #s(elfeed-entry ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/logic-for-programmers-turns-one/") "Logic for Programmers Turns One" "https://buttondown.com/hillelwayne/archive/logic-for-programmers-turns-one/" 1751998732.0 #s(elfeed-ref "123488b8a1cde1b9be5255d2561ef100d05f6404") html nil (dev theory unread) "https://buttondown.email/hillelwayne/rss" nil) ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/logical-quantifiers-in-software/") #s(elfeed-entry ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/logical-quantifiers-in-software/") "Logical Quantifiers in Software" "https://buttondown.com/hillelwayne/archive/logical-quantifiers-in-software/" 1751485462.0 #s(elfeed-ref "a784374972d8bd23223df5adfd66ee2f0034f3d0") html nil (dev theory unread) "https://buttondown.email/hillelwayne/rss" nil) ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/you-can-cheat-a-test-suite-with-a-big-enough/") #s(elfeed-entry ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/you-can-cheat-a-test-suite-with-a-big-enough/") "You can cheat a test suite with a big enough polynomial" "https://buttondown.com/hillelwayne/archive/you-can-cheat-a-test-suite-with-a-big-enough/" 1750782421.0 #s(elfeed-ref "14f451cf531d58f3c997ff022576f60fe0580c7a") html nil (dev theory unread) "https://buttondown.email/hillelwayne/rss" nil) ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/solving-linkedin-queens-with-smt/") #s(elfeed-entry ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/solving-linkedin-queens-with-smt/") "Solving LinkedIn Queens with SMT" "https://buttondown.com/hillelwayne/archive/solving-linkedin-queens-with-smt/" 1749743005.0 #s(elfeed-ref "d4cff7750e3383e11b5a449e0b89ab2dcc24cb03") html nil (dev theory unread) "https://buttondown.email/hillelwayne/rss" nil) ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/ai-is-a-gamechanger-for-tla-users/") #s(elfeed-entry ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/ai-is-a-gamechanger-for-tla-users/") "AI is a gamechanger for TLA+ users" "https://buttondown.com/hillelwayne/archive/ai-is-a-gamechanger-for-tla-users/" 1749135551.0 #s(elfeed-ref "b78f9d1b00a77f59a4b3af626b210d159431ce21") html nil (dev theory unread) "https://buttondown.email/hillelwayne/rss" nil) ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/what-does-undecidable-mean-anyway/") #s(elfeed-entry ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/what-does-undecidable-mean-anyway/") "What does \"Undecidable\" mean, anyway" "https://buttondown.com/hillelwayne/archive/what-does-undecidable-mean-anyway/" 1748460842.0 #s(elfeed-ref "884e3337019557a42d3a6873118402a9c7cd6c26") html nil (dev theory unread) "https://buttondown.email/hillelwayne/rss" nil) ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/finding-hard-24-puzzles-with-planner-programming/") #s(elfeed-entry ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/finding-hard-24-puzzles-with-planner-programming/") "Finding hard 24 puzzles with planner programming" "https://buttondown.com/hillelwayne/archive/finding-hard-24-puzzles-with-planner-programming/" 1747765261.0 #s(elfeed-ref "4a4be41a960861128332d65ddc7d19f3bd453e96") html nil (dev theory unread) "https://buttondown.email/hillelwayne/rss" nil) ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/modeling-awkward-social-situations-with-tla/") #s(elfeed-entry ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/modeling-awkward-social-situations-with-tla/") "Modeling Awkward Social Situations with TLA+" "https://buttondown.com/hillelwayne/archive/modeling-awkward-social-situations-with-tla/" 1747238541.0 #s(elfeed-ref "70f8cb26f7f0d8ac7ba0f9a0e572502d12dc385c") html nil (dev theory unread) "https://buttondown.email/hillelwayne/rss" nil) ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/write-the-most-clever-code-you-possibly-can/") #s(elfeed-entry ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/write-the-most-clever-code-you-possibly-can/") "Write the most clever code you possibly can" "https://buttondown.com/hillelwayne/archive/write-the-most-clever-code-you-possibly-can/" 1746716682.0 #s(elfeed-ref "440879b7bfcc430a961f423e89ce61d692f622fc") html nil (dev theory unread) "https://buttondown.email/hillelwayne/rss" nil) ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/requirements-change-until-they-dont/") #s(elfeed-entry ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/requirements-change-until-they-dont/") "Requirements change until they don't" "https://buttondown.com/hillelwayne/archive/requirements-change-until-they-dont/" 1745492400.0 #s(elfeed-ref "4ea59dd1b4cd2bf6f90aea09e5d9cb8a018ed96d") html nil (dev theory unread) "https://buttondown.email/hillelwayne/rss" nil) ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/the-halting-problem-is-a-terrible-example-of-np/") #s(elfeed-entry ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/the-halting-problem-is-a-terrible-example-of-np/") "The Halting Problem is a terrible example of NP-Harder" "https://buttondown.com/hillelwayne/archive/the-halting-problem-is-a-terrible-example-of-np/" 1744825163.0 #s(elfeed-ref "a34da93837ec4cb312b2506beb08b1c18c6a10b2") html nil (dev theory unread) "https://buttondown.email/hillelwayne/rss" nil) ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/a48fce5b-8a05-4302-b620-9b26f057f145/") #s(elfeed-entry ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/a48fce5b-8a05-4302-b620-9b26f057f145/") "Solving a \"Layton Puzzle\" with Prolog" "https://buttondown.com/hillelwayne/archive/a48fce5b-8a05-4302-b620-9b26f057f145/" 1744137290.0 #s(elfeed-ref "fadf029dae9958b42b4486e03565812c7b575760") html nil (dev theory unread) "https://buttondown.email/hillelwayne/rss" nil) ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/april-cools-gaming-games-for-non-gamers/") #s(elfeed-entry ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/april-cools-gaming-games-for-non-gamers/") "[April Cools] Gaming Games for Non-Gamers" "https://buttondown.com/hillelwayne/archive/april-cools-gaming-games-for-non-gamers/" 1743523499.0 #s(elfeed-ref "bf84ccf6da8b8e5230a0f03cee785dbf9ac4944f") html nil (dev theory unread) "https://buttondown.email/hillelwayne/rss" nil) ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/betteridges-law-of-software-engineering/") #s(elfeed-entry ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/betteridges-law-of-software-engineering/") "Betteridge's Law of Software Engineering Specialness" "https://buttondown.com/hillelwayne/archive/betteridges-law-of-software-engineering/" 1743014919.0 #s(elfeed-ref "6d8c91c5452223e4f14beb2f0ae26583c75c56f1") html nil (dev theory unread) "https://buttondown.email/hillelwayne/rss" nil) ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/verification-first-development/") #s(elfeed-entry ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/verification-first-development/") "Verification-First Development" "https://buttondown.com/hillelwayne/archive/verification-first-development/" 1742314940.0 #s(elfeed-ref "7882648427b2bc60c08cc277ab871feeed67eb05") html nil (dev theory unread) "https://buttondown.email/hillelwayne/rss" nil) ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/new-blog-post-a-perplexing-javascript-parsing/") #s(elfeed-entry ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/new-blog-post-a-perplexing-javascript-parsing/") "New Blog Post: \"A Perplexing Javascript Parsing Puzzle\"" "https://buttondown.com/hillelwayne/archive/new-blog-post-a-perplexing-javascript-parsing/" 1741790992.0 #s(elfeed-ref "27a0e4de455879d4fb19ec87d3a16a555d853ac4") html nil (dev theory unread) "https://buttondown.email/hillelwayne/rss" nil) ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/five-kinds-of-nondeterminism/") #s(elfeed-entry ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/five-kinds-of-nondeterminism/") "Five Kinds of Nondeterminism" "https://buttondown.com/hillelwayne/archive/five-kinds-of-nondeterminism/" 1739993877.0 #s(elfeed-ref "3c864853ebc1f2c061bc61380f6d2fb3a82dfafa") html nil (dev theory unread) "https://buttondown.email/hillelwayne/rss" nil) ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/are-efficiency-and-horizontal-scalability-at-odds/") #s(elfeed-entry ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/are-efficiency-and-horizontal-scalability-at-odds/") "Are Efficiency and Horizontal Scalability at odds?" "https://buttondown.com/hillelwayne/archive/are-efficiency-and-horizontal-scalability-at-odds/" 1739384780.0 #s(elfeed-ref "be1ce5893123b4dd373e7c26db714a9505d2d9f9") html nil (dev theory unread) "https://buttondown.email/hillelwayne/rss" nil) ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/what-hard-thing-does-your-tech-make-easy/") #s(elfeed-entry ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/what-hard-thing-does-your-tech-make-easy/") "What hard thing does your tech make easy?" "https://buttondown.com/hillelwayne/archive/what-hard-thing-does-your-tech-make-easy/" 1738174187.0 #s(elfeed-ref "d16091264774b218cc79436075ea15d01e0ef534") html nil (dev theory unread) "https://buttondown.email/hillelwayne/rss" nil) ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/the-jugglers-curse/") #s(elfeed-entry ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/the-jugglers-curse/") "The Juggler's Curse" "https://buttondown.com/hillelwayne/archive/the-jugglers-curse/" 1737571840.0 #s(elfeed-ref "e7b1c9edc36ee98052f44f40382ec5a1c17e679a") html nil (dev theory unread) "https://buttondown.email/hillelwayne/rss" nil) ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/what-are-the-rosettas-of-formal-specification/") #s(elfeed-entry ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/what-are-the-rosettas-of-formal-specification/") "What are the Rosettas of formal specification?" "https://buttondown.com/hillelwayne/archive/what-are-the-rosettas-of-formal-specification/" 1736962480.0 #s(elfeed-ref "3574b6d6218856b2a4b37fbb737e3e17f55c7f6f") html nil (dev theory unread) "https://buttondown.email/hillelwayne/rss" nil) ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/logic-for-programmers-project-update/") #s(elfeed-entry ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/logic-for-programmers-project-update/") "\"Logic for Programmers\" Project Update" "https://buttondown.com/hillelwayne/archive/logic-for-programmers-project-update/" 1736275780.0 #s(elfeed-ref "058a8feeaf408fee96cf33cf398c8ad3933e3709") html nil (dev theory unread) "https://buttondown.email/hillelwayne/rss" nil) ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/formally-modeling-dreidel-the-sequel/") #s(elfeed-entry ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/formally-modeling-dreidel-the-sequel/") "Formally modeling dreidel, the sequel" "https://buttondown.com/hillelwayne/archive/formally-modeling-dreidel-the-sequel/" 1734541139.0 #s(elfeed-ref "499aac3b06581debff2399c27c2b254f4a8d0f7f") html nil (dev theory unread) "https://buttondown.email/hillelwayne/rss" nil) ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/stroustrups-rule/") #s(elfeed-entry ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/stroustrups-rule/") "Stroustrup's Rule" "https://buttondown.com/hillelwayne/archive/stroustrups-rule/" 1733938373.0 #s(elfeed-ref "f99df50febe4795333c48d6ca8457c61ccfbd7b7") html nil (dev theory unread) "https://buttondown.email/hillelwayne/rss" nil) ("feeds.feedburner.com" . "https://symfony.com/blog/symfonycon-amsterdam-2025-practical-ai-integrations-with-symfony?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") #s(elfeed-entry ("feeds.feedburner.com" . "https://symfony.com/blog/symfonycon-amsterdam-2025-practical-ai-integrations-with-symfony?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") "SymfonyCon Amsterdam 2025: Practical AI Integrations with Symfony" "https://symfony.com/blog/symfonycon-amsterdam-2025-practical-ai-integrations-with-symfony?utm_source=Symfony%20Blog%20Feed&utm_medium=feed" 1756818000.0 #s(elfeed-ref "86e9a16fcda456c7e8ffbe61c4c6cd6ff5254d59") html nil (dev unread web) "http://feeds.feedburner.com/symfony/blog" (:authors ((:name " Paola Suárez ")))) ("feeds.feedburner.com" . "https://symfony.com/blog/a-week-of-symfony-974-august-25-31-2025?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") #s(elfeed-entry ("feeds.feedburner.com" . "https://symfony.com/blog/a-week-of-symfony-974-august-25-31-2025?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") "A Week of Symfony #974 (August 25–31, 2025)" "https://symfony.com/blog/a-week-of-symfony-974-august-25-31-2025?utm_source=Symfony%20Blog%20Feed&utm_medium=feed" 1756624560.0 #s(elfeed-ref "eacf041a92d874a2567965b65733e5e6b3196c31") html nil (dev unread web) "http://feeds.feedburner.com/symfony/blog" (:authors ((:name " Javier Eguiluz ")))) ("feeds.feedburner.com" . "https://symfony.com/blog/announcing-the-symfony-comic-book?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") #s(elfeed-entry ("feeds.feedburner.com" . "https://symfony.com/blog/announcing-the-symfony-comic-book?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") "Announcing the Symfony Comic Book" "https://symfony.com/blog/announcing-the-symfony-comic-book?utm_source=Symfony%20Blog%20Feed&utm_medium=feed" 1756467000.0 #s(elfeed-ref "9f4af848e6ddbf8ceb4b42b24e242e2613bfcaa7") html nil (dev unread web) "http://feeds.feedburner.com/symfony/blog" (:authors ((:name " Eloïse Charrier ")))) ("feeds.feedburner.com" . "https://symfony.com/blog/symfony-7-3-3-released?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") #s(elfeed-entry ("feeds.feedburner.com" . "https://symfony.com/blog/symfony-7-3-3-released?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") "Symfony 7.3.3 released" "https://symfony.com/blog/symfony-7-3-3-released?utm_source=Symfony%20Blog%20Feed&utm_medium=feed" 1756456094.0 #s(elfeed-ref "7198c68dbaeb702134a05fefc8a731a294b05234") html nil (dev unread web) "http://feeds.feedburner.com/symfony/blog" (:authors ((:name " Fabien Potencier ")))) ("feeds.feedburner.com" . "https://symfony.com/blog/symfony-6-4-25-released?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") #s(elfeed-entry ("feeds.feedburner.com" . "https://symfony.com/blog/symfony-6-4-25-released?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") "Symfony 6.4.25 released" "https://symfony.com/blog/symfony-6-4-25-released?utm_source=Symfony%20Blog%20Feed&utm_medium=feed" 1756455562.0 #s(elfeed-ref "e080e1a9fb26ae10e0735f1768bfe99263f46afc") html nil (dev unread web) "http://feeds.feedburner.com/symfony/blog" (:authors ((:name " Fabien Potencier ")))) ("feeds.feedburner.com" . "https://symfony.com/blog/remembering-ryan-weaver-teacher-core-team-member-friend?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") #s(elfeed-entry ("feeds.feedburner.com" . "https://symfony.com/blog/remembering-ryan-weaver-teacher-core-team-member-friend?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") "Remembering Ryan Weaver: Teacher, Core Team Member, Friend" "https://symfony.com/blog/remembering-ryan-weaver-teacher-core-team-member-friend?utm_source=Symfony%20Blog%20Feed&utm_medium=feed" 1756390020.0 #s(elfeed-ref "b9d60e63a7872a236e083b131ab7726e189d35c5") html nil (dev unread web) "http://feeds.feedburner.com/symfony/blog" (:authors ((:name " Kevin Bond ")))) ("feeds.feedburner.com" . "https://symfony.com/blog/symfonycon-amsterdam-2025-level-up-your-skills-with-our-workshops?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") #s(elfeed-entry ("feeds.feedburner.com" . "https://symfony.com/blog/symfonycon-amsterdam-2025-level-up-your-skills-with-our-workshops?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") "SymfonyCon Amsterdam 2025: Level up your skills with our workshops!" "https://symfony.com/blog/symfonycon-amsterdam-2025-level-up-your-skills-with-our-workshops?utm_source=Symfony%20Blog%20Feed&utm_medium=feed" 1756297800.0 #s(elfeed-ref "e49ee52c75f3af5934a9eabf6cab9dfa607826ee") html nil (dev unread web) "http://feeds.feedburner.com/symfony/blog" (:authors ((:name " Paola Suárez ")))) ("feeds.feedburner.com" . "https://symfony.com/blog/a-week-of-symfony-973-august-18-24-2025?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") #s(elfeed-entry ("feeds.feedburner.com" . "https://symfony.com/blog/a-week-of-symfony-973-august-18-24-2025?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") "A Week of Symfony #973 (August 18–24, 2025)" "https://symfony.com/blog/a-week-of-symfony-973-august-18-24-2025?utm_source=Symfony%20Blog%20Feed&utm_medium=feed" 1756020060.0 #s(elfeed-ref "feef90a195f5804c315bc1d2a5e774b9b7035090") html nil (dev unread web) "http://feeds.feedburner.com/symfony/blog" (:authors ((:name " Javier Eguiluz ")))) ("feeds.feedburner.com" . "https://symfony.com/blog/a-week-of-symfony-972-august-11-17-2025?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") #s(elfeed-entry ("feeds.feedburner.com" . "https://symfony.com/blog/a-week-of-symfony-972-august-11-17-2025?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") "A Week of Symfony #972 (August 11–17, 2025)" "https://symfony.com/blog/a-week-of-symfony-972-august-11-17-2025?utm_source=Symfony%20Blog%20Feed&utm_medium=feed" 1755416040.0 #s(elfeed-ref "3a37a4f797aad2f8bbd1252c57fbb37867465c0f") html nil (dev unread web) "http://feeds.feedburner.com/symfony/blog" (:authors ((:name " Javier Eguiluz ")))) ("feeds.feedburner.com" . "https://symfony.com/blog/let-s-build-the-symfony-ai-ecosystem-together?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") #s(elfeed-entry ("feeds.feedburner.com" . "https://symfony.com/blog/let-s-build-the-symfony-ai-ecosystem-together?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") "Let’s build the Symfony AI ecosystem together" "https://symfony.com/blog/let-s-build-the-symfony-ai-ecosystem-together?utm_source=Symfony%20Blog%20Feed&utm_medium=feed" 1755331320.0 #s(elfeed-ref "c8d3914484ef140a1011f4908139886a4d00ad94") html nil (dev unread web) "http://feeds.feedburner.com/symfony/blog" (:authors ((:name " Christopher Hertel ")))) ("feeds.feedburner.com" . "https://informationisbeautiful.net/?p=11036") #s(elfeed-entry ("feeds.feedburner.com" . "https://informationisbeautiful.net/?p=11036") "Peak Ages of Productivity for Authors, Painters, Musicians & Scientists" "https://informationisbeautiful.net/2025/peak-ages-of-productivity-for-authors-painters-musicians-scientists/" 1751636504.0 #s(elfeed-ref "fbf3697b030ac656f597d5eebb302ddb66aceb8a") html nil (unread) "http://feeds.feedburner.com/InformationIsBeautiful" (:authors ((:name "David McCandless")) :categories ("General Blog"))) ("feeds.feedburner.com" . "https://informationisbeautiful.net/?p=11023") #s(elfeed-entry ("feeds.feedburner.com" . "https://informationisbeautiful.net/?p=11023") "Information is Beautiful LIVE: London 30th June" "https://informationisbeautiful.net/2025/information-is-beautiful-live-london-30th-june/" 1750325122.0 #s(elfeed-ref "4e549ac48d272f6c58481fcb11c73f844dd283ff") html nil (unread) "http://feeds.feedburner.com/InformationIsBeautiful" (:authors ((:name "David McCandless")) :categories ("General Blog"))) ("feeds.feedburner.com" . "https://informationisbeautiful.net/?p=11019") #s(elfeed-entry ("feeds.feedburner.com" . "https://informationisbeautiful.net/?p=11019") "Information is Beautiful Awards: Winners!" "https://informationisbeautiful.net/2025/information-is-beautiful-awards-winners/" 1750150612.0 #s(elfeed-ref "3f46422e9edca3543f86e6dee0e514df3358ff43") html nil (unread) "http://feeds.feedburner.com/InformationIsBeautiful" (:authors ((:name "David McCandless")) :categories ("General Blog"))) ("feeds.feedburner.com" . "https://informationisbeautiful.net/?p=11016") #s(elfeed-entry ("feeds.feedburner.com" . "https://informationisbeautiful.net/?p=11016") "Making Data into Art – a microfilm with David McCandless" "https://informationisbeautiful.net/2025/making-data-into-art-a-microfilm-with-david-mccandless/" 1750066687.0 #s(elfeed-ref "7bbc426aa2eb48696d07303c88a93770aa7d49d5") html nil (unread) "http://feeds.feedburner.com/InformationIsBeautiful" (:authors ((:name "David McCandless")) :categories ("General Blog"))) ("feeds.feedburner.com" . "https://informationisbeautiful.net/?p=11010") #s(elfeed-entry ("feeds.feedburner.com" . "https://informationisbeautiful.net/?p=11010") "Common Mythconceptions – World’s Most Contagious Falsehoods" "https://informationisbeautiful.net/2025/common-mythconceptions-worlds-most-contagious-falsehoods-2/" 1749711037.0 #s(elfeed-ref "d65d1d96a422b35bbed3e46261d009daaf085d4c") html nil (unread) "http://feeds.feedburner.com/InformationIsBeautiful" (:authors ((:name "David McCandless")) :categories ("General Blog"))) ("feeds.feedburner.com" . "https://informationisbeautiful.net/?p=10982") #s(elfeed-entry ("feeds.feedburner.com" . "https://informationisbeautiful.net/?p=10982") "Vaccines & Autism: What Does the Evidence Say?" "https://informationisbeautiful.net/2025/vaccines-autism-what-does-the-evidence-say/" 1747234288.0 #s(elfeed-ref "aa5c4b61d1f6c1fc850695d7362dd9fcee02a9e3") html nil (unread) "http://feeds.feedburner.com/InformationIsBeautiful" (:authors ((:name "David McCandless")) :categories ("General Blog"))) ("feeds.feedburner.com" . "https://informationisbeautiful.net/?p=10974") #s(elfeed-entry ("feeds.feedburner.com" . "https://informationisbeautiful.net/?p=10974") "Dataviz of the month Apr 2025" "https://informationisbeautiful.net/2025/dataviz-of-the-month-apr-2025/" 1746702934.0 #s(elfeed-ref "332c8c885265ecca07b87ece74fa462d846232ba") html nil (unread) "http://feeds.feedburner.com/InformationIsBeautiful" (:authors ((:name "David McCandless")) :categories ("General Blog"))) ("feeds.feedburner.com" . "https://informationisbeautiful.net/?p=10946") #s(elfeed-entry ("feeds.feedburner.com" . "https://informationisbeautiful.net/?p=10946") "ANNOUNCING: Information is Beautiful Awards shortlist" "https://informationisbeautiful.net/2025/announcing-information-is-beautiful-awards-shortlist/" 1746110488.0 #s(elfeed-ref "bc9bf4ad522f90d0493c770a79137869ec1908a3") html nil (unread) "http://feeds.feedburner.com/InformationIsBeautiful" (:authors ((:name "David McCandless")) :categories ("General Blog"))) ("feeds.feedburner.com" . "https://informationisbeautiful.net/?p=10935") #s(elfeed-entry ("feeds.feedburner.com" . "https://informationisbeautiful.net/?p=10935") "New workshop dates. New two half days format and new data-storytelling component. Plus rare NYC in-person session." "https://informationisbeautiful.net/2025/create-impactful-infographics-trainings-2025/" 1745414530.0 #s(elfeed-ref "f2245ab4f9bcfd921a5e6aa0e701a48cbb320d4e") html nil (unread) "http://feeds.feedburner.com/InformationIsBeautiful" (:authors ((:name "David McCandless")) :categories ("General Blog"))) ("feeds.feedburner.com" . "https://informationisbeautiful.net/?p=10927") #s(elfeed-entry ("feeds.feedburner.com" . "https://informationisbeautiful.net/?p=10927") "Announcing: Information Is Beautiful Awards Longlist 2025" "https://informationisbeautiful.net/2025/announcing-information-is-beautiful-awards-longlist-2025/" 1742577535.0 #s(elfeed-ref "8a14d8a34c3f60d56432f4fb4c822319d8595da8") html nil (unread) "http://feeds.feedburner.com/InformationIsBeautiful" (:authors ((:name "David McCandless")) :categories ("General Blog"))) ("feeds.feedburner.com" . "https://medium.com/p/e4273bfee211") #s(elfeed-entry ("feeds.feedburner.com" . "https://medium.com/p/e4273bfee211") "Jsx in Qooxdoo: What it can do and how to utilize it" "https://news.qooxdoo.org/jsx-in-qooxdoo-what-it-can-do-and-how-to-utilize-it-e4273bfee211?source=rss----be22e96d183a---4" 1711198679.0 #s(elfeed-ref "0ba26db51b4759fc32ba6a52b44d126ef0e0719d") html nil (dev unread web) "http://feeds.feedburner.com/qooxdoo/blog/content" (:authors ((:name "Willster Johnson")) :categories ("qooxdoo" "javascript" "jsx"))) ("feeds.feedburner.com" . "https://medium.com/p/24cc14d7a1d9") #s(elfeed-entry ("feeds.feedburner.com" . "https://medium.com/p/24cc14d7a1d9") "Qooxdoo 7.1 – easy integration of npm packages" "https://news.qooxdoo.org/qooxdoo-7-1-24cc14d7a1d9?source=rss----be22e96d183a---4" 1650010084.0 #s(elfeed-ref "b66fa1976b4ae7be7e9ca9ec4a344c9c920b0fb9") html nil (dev unread web) "http://feeds.feedburner.com/qooxdoo/blog/content" (:authors ((:name "Tobias Oetiker")) :categories ("qooxdoo" "javascript" "single-page-applications" "npm"))) ("feeds.feedburner.com" . "https://medium.com/p/99e20b57220e") #s(elfeed-entry ("feeds.feedburner.com" . "https://medium.com/p/99e20b57220e") "Qooxdoo 7.0" "https://news.qooxdoo.org/qooxdoo-7-0-99e20b57220e?source=rss----be22e96d183a---4" 1645829059.0 #s(elfeed-ref "f68842275ceba5778cd5c4f9640b10daa12517d6") html nil (dev unread web) "http://feeds.feedburner.com/qooxdoo/blog/content" (:authors ((:name "Tobias Oetiker")) :categories ("javascript" "framework" "full-stack" "single-page-applications" "software-development"))) ("feeds.feedburner.com" . "https://medium.com/p/74bf5e43393c") #s(elfeed-entry ("feeds.feedburner.com" . "https://medium.com/p/74bf5e43393c") "Qooxdoo 6.0 — The JavaScript framework for people who love coding" "https://news.qooxdoo.org/qooxdoo-6-0-the-javascript-framework-for-people-who-love-coding-74bf5e43393c?source=rss----be22e96d183a---4" 1612774479.0 #s(elfeed-ref "233525ab9c03f14d1813849f6251faef0ffdac27") html nil (dev unread web) "http://feeds.feedburner.com/qooxdoo/blog/content" (:authors ((:name "Tobias Oetiker")) :categories ("single-page-applications" "javascript" "progressive-web-app"))) ("feeds.feedburner.com" . "https://medium.com/p/939348406c73") #s(elfeed-entry ("feeds.feedburner.com" . "https://medium.com/p/939348406c73") "The Future Qooxdoo" "https://news.qooxdoo.org/the-future-qooxdoo-939348406c73?source=rss----be22e96d183a---4" 1553290885.0 #s(elfeed-ref "212bd7e99bd7d7c85ee2b7906bb591476bad0433") html nil (dev unread web) "http://feeds.feedburner.com/qooxdoo/blog/content" (:authors ((:name "Tobias Oetiker")) :categories ("coding" "angular" "single-page-applications" "react" "javascript"))) ("feeds.feedburner.com" . "https://medium.com/p/63ddaa67d539") #s(elfeed-entry ("feeds.feedburner.com" . "https://medium.com/p/63ddaa67d539") "Qooxdoo 5.0.2 released" "https://news.qooxdoo.org/qooxdoo-5-0-2-release-63ddaa67d539?source=rss----be22e96d183a---4" 1484233359.0 #s(elfeed-ref "a28fa1feb7170fef74f22109faa44870bcdf73d9") html nil (dev unread web) "http://feeds.feedburner.com/qooxdoo/blog/content" (:authors ((:name "Tobias Oetiker")) :categories ("javascript" "coding" "web-development"))) ("feeds.feedburner.com" . "https://medium.com/p/cd097483e3eb") #s(elfeed-entry ("feeds.feedburner.com" . "https://medium.com/p/cd097483e3eb") "How I learned Qooxdoo in two Weeks" "https://news.qooxdoo.org/learning-qooxdoo-cd097483e3eb?source=rss----be22e96d183a---4" 1471924794.0 #s(elfeed-ref "536189bb4a67562f9dbed4037e207a2fe697458a") html nil (dev unread web) "http://feeds.feedburner.com/qooxdoo/blog/content" (:authors ((:name "Rene Jochum")) :categories ("qooxdoo" "tutorial" "javascript" "coding"))) ("feeds.feedburner.com" . "https://medium.com/p/92936938c85b") #s(elfeed-entry ("feeds.feedburner.com" . "https://medium.com/p/92936938c85b") "Mientras tanto en el repositorio de qooxdoo…" "https://news.qooxdoo.org/mientras-tanto-en-el-repositorio-de-qooxdoo-92936938c85b?source=rss----be22e96d183a---4" 1469255141.0 #s(elfeed-ref "8aaa747a3b6667a4ee6fbfa8ea594025a682112a") html nil (dev unread web) "http://feeds.feedburner.com/qooxdoo/blog/content" (:authors ((:name "Yeye Balám")) :categories ("spanish" "news" "español"))) ("feeds.feedburner.com" . "https://medium.com/p/dcc5dde0e1db") #s(elfeed-entry ("feeds.feedburner.com" . "https://medium.com/p/dcc5dde0e1db") "Meanwhile in the qooxdoo repository …" "https://news.qooxdoo.org/meanwhile-in-the-qooxdoo-repository-dcc5dde0e1db?source=rss----be22e96d183a---4" 1469205930.0 #s(elfeed-ref "8396299e6efb39ab4d67279f9af5a420f2f7467b") html nil (dev unread web) "http://feeds.feedburner.com/qooxdoo/blog/content" (:authors ((:name "Tobias Oetiker")) :categories ("news"))) ("feeds.feedburner.com" . "https://medium.com/p/48cf7837f56b") #s(elfeed-entry ("feeds.feedburner.com" . "https://medium.com/p/48cf7837f56b") "Evolving the qooxdoo Project" "https://news.qooxdoo.org/evolving-the-qooxdoo-project-48cf7837f56b?source=rss----be22e96d183a---4" 1456091960.0 #s(elfeed-ref "2e0e0ad7eb94b36d3a2617fb7ae890a49c9868ed") html nil (dev unread web) "http://feeds.feedburner.com/qooxdoo/blog/content" (:authors ((:name "Qooxdoo News")) :categories ("news"))) ("danluu.com" . "https://danluu.com/ballmer/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/ballmer/") "Steve Ballmer was an underrated CEO" "https://danluu.com/ballmer/" 1730073600.0 #s(elfeed-ref "bc4452cfcf07f8b39c549b544c64006ffff427c5") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/codenames/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/codenames/") "How good can you be at Codenames without knowing any words?" "https://danluu.com/codenames/" 1723334400.0 #s(elfeed-ref "077fa6b39522a7e920ffccce7e682c69e3c52339") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/ai-bias/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/ai-bias/") "A discussion of discussions on AI bias" "https://danluu.com/ai-bias/" 1718496000.0 #s(elfeed-ref "4e5e3656b5ac5d73cd5ea49418cbe15c7ce8f0a0") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/ftc-google-antitrust/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/ftc-google-antitrust/") "What the FTC got wrong in the Google antitrust investigation" "https://danluu.com/ftc-google-antitrust/" 1716681600.0 #s(elfeed-ref "ddcdf599ad9bb73bf249ca81554e534eb630ff16") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/slow-device/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/slow-device/") "How web bloat impacts users with slow devices" "https://danluu.com/slow-device/" 1710547200.0 #s(elfeed-ref "b9fb6012e7e1ce3b356564fedc5e149b57eee92f") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/diseconomies-scale/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/diseconomies-scale/") "Diseconomies of scale in fraud, spam, support, and moderation" "https://danluu.com/diseconomies-scale/" 1708214400.0 #s(elfeed-ref "9ecc66f2560aaec6e72365a209edd37ef5f19a16") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/impossible-agree/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/impossible-agree/") "Why it's impossible to agree on what's allowed" "https://danluu.com/impossible-agree/" 1707264000.0 #s(elfeed-ref "e85675d306f2653bd7900f154bc33ea5a5f0c255") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/cruise-report/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/cruise-report/") "Notes on Cruise's pedestrian accident" "https://danluu.com/cruise-report/" 1706486400.0 #s(elfeed-ref "28063294b61c7a3b6eab76822f91578823393f26") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/why-video/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/why-video/") "Why do people post on [bad platform] instead of [good platform]?" "https://danluu.com/why-video/" 1706140800.0 #s(elfeed-ref "1be2306c216316d53d6ffe46487dde14642457c6") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/seo-spam/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/seo-spam/") "How bad are search results? Let's compare Google, Bing, Marginalia, Kagi, Mwmbl, and ChatGPT" "https://danluu.com/seo-spam/" 1703894400.0 #s(elfeed-ref "0e4189d992999d2b141d1ac92bd6a775f18a18f8") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/elon-dave-chappelle/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/elon-dave-chappelle/") "Transcript of Elon Musk on stage with Dave Chapelle" "https://danluu.com/elon-dave-chappelle/" 1670716800.0 #s(elfeed-ref "d2218024b00ddd6a544833cbf97157cf3320ee49") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/elon-twitter-texts/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/elon-twitter-texts/") "Chat log exhibits from Twitter v. Musk case" "https://danluu.com/elon-twitter-texts/" 1664582400.0 #s(elfeed-ref "8a2dcdcbabb8a4dd0ec8309e5608eb04e79f3da6") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/futurist-predictions/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/futurist-predictions/") "Futurist prediction methods and accuracy" "https://danluu.com/futurist-predictions/" 1662940800.0 #s(elfeed-ref "c70cfe68d43f0659183edd8ec1267a55bc769ce5") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/simple-architectures/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/simple-architectures/") "In defense of simple architectures" "https://danluu.com/simple-architectures/" 1649203200.0 #s(elfeed-ref "2241a4f5d244196a300372c76648d362619d9429") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/nothing-works/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/nothing-works/") "Why is it so hard to buy things that work well?" "https://danluu.com/nothing-works/" 1647216000.0 #s(elfeed-ref "f8bd6e17daa5d4889d4621a8aa573a3274e439a9") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/talent/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/talent/") "Misidentifying talent" "https://danluu.com/talent/" 1645401600.0 #s(elfeed-ref "20c41c643a143c2f2b97469d8e7812261b3e6b43") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/cache-incidents/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/cache-incidents/") "A decade of major cache incidents at Twitter" "https://danluu.com/cache-incidents/" 1643760000.0 #s(elfeed-ref "ff6f798f41279b7274835ae383449d119d0952a6") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/cocktail-ideas/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/cocktail-ideas/") "Cocktail party ideas" "https://danluu.com/cocktail-ideas/" 1643760000.0 #s(elfeed-ref "2ec3edaab7c3ef5ff426a98dcad0670b13a84760") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/cgroup-throttling/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/cgroup-throttling/") "The container throttling problem" "https://danluu.com/cgroup-throttling/" 1639785600.0 #s(elfeed-ref "5a6e0702ff77393e2d37f8b9ef85f355ed2af15c") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/writing-non-advice/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/writing-non-advice/") "Some thoughts on writing" "https://danluu.com/writing-non-advice/" 1639353600.0 #s(elfeed-ref "b1e66cd944ce029484575fac49c75a676ce8d640") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/latency-pitfalls/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/latency-pitfalls/") "Some latency measurement pitfalls" "https://danluu.com/latency-pitfalls/" 1638748800.0 #s(elfeed-ref "742c0f8e63970fc38fcf8593937edbef845acb4d") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/corrections/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/corrections/") "Major errors on this blog (and their corrections)" "https://danluu.com/corrections/" 1637539200.0 #s(elfeed-ref "327a5c6cb97c5305b7a521ccfeba03611ea6dc1c") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/people-matter/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/people-matter/") "Individuals matter" "https://danluu.com/people-matter/" 1636934400.0 #s(elfeed-ref "76afc2df379e74fe9a1427f95df4ff05a855f0ce") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/culture/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/culture/") "Culture matters" "https://danluu.com/culture/" 1636329600.0 #s(elfeed-ref "0426e9c87ca5fe9117a4b2a3a9e73e0572daf498") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/look-stupid/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/look-stupid/") "Willingness to look stupid" "https://danluu.com/look-stupid/" 1634774400.0 #s(elfeed-ref "db20495235d5efec5c0a74e0b98f78846fdebd94") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/learn-what/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/learn-what/") "What to learn" "https://danluu.com/learn-what/" 1634515200.0 #s(elfeed-ref "e16afff2c924fcc3e3aed118da6291b9184c4fb7") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/productivity-velocity/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/productivity-velocity/") "Some reasons to work on productivity and velocity" "https://danluu.com/productivity-velocity/" 1634256000.0 #s(elfeed-ref "5a5c76b24dfde260fa9b7c8f5d0949ee890838ed") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/in-house/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/in-house/") "The value of in-house expertise" "https://danluu.com/in-house/" 1632873600.0 #s(elfeed-ref "34d345f4d14ee31dc21c48d6cc3a6cef9764445d") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/why-benchmark/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/why-benchmark/") "Measurement, benchmarking, and data analysis are underrated" "https://danluu.com/why-benchmark/" 1630022400.0 #s(elfeed-ref "18250d4e813384da0bb57846a0097584e05b0248") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/essential-complexity/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/essential-complexity/") "Against essential and accidental complexity" "https://danluu.com/essential-complexity/" 1609200000.0 #s(elfeed-ref "b8f9afe5f841f4c2df5da14808636b532e9486e8") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/car-safety/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/car-safety/") "How do cars do in out-of-sample crash testing?" "https://danluu.com/car-safety/" 1593500794.0 #s(elfeed-ref "9ff320b4273361615582b8d73cef66c619616a0f") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/voyager-story/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/voyager-story/") "Finding the Story" "https://danluu.com/voyager-story/" 1591081534.0 #s(elfeed-ref "4905b3ae4f2a9adf092c5d40e153db0275a4c2a2") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/tracing-analytics/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/tracing-analytics/") "A simple way to get more value from tracing" "https://danluu.com/tracing-analytics/" 1590908794.0 #s(elfeed-ref "1a4d9ea1d26fa10f953d012342113f985c550981") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/metrics-analytics/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/metrics-analytics/") "A simple way to get more value from metrics" "https://danluu.com/metrics-analytics/" 1590822394.0 #s(elfeed-ref "edda0df8b1a759c229395dc6a8446de5e4df4ce3") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/corp-eng-blogs/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/corp-eng-blogs/") "How (some) good corporate engineering blogs are written" "https://danluu.com/corp-eng-blogs/" 1583884800.0 #s(elfeed-ref "694a145def5d22f9c4bc1383b47d47affd816fb0") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/cli-complexity/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/cli-complexity/") "The growth of command line options, 1979-Present" "https://danluu.com/cli-complexity/" 1583193600.0 #s(elfeed-ref "3caddb0c843b029947f4d23b1860bd024ba30502") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/discontinuities/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/discontinuities/") "Suspicious discontinuities" "https://danluu.com/discontinuities/" 1581984000.0 #s(elfeed-ref "043dc67a2244bbf934d75cdbe350d2c65a970019") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/p95-skill/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/p95-skill/") "95%-ile isn't that good" "https://danluu.com/p95-skill/" 1581033600.0 #s(elfeed-ref "654c74db7df215021f2d36da36b7cd921a497864") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/algorithms-interviews/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/algorithms-interviews/") "Algorithms interviews: theory vs. practice" "https://danluu.com/algorithms-interviews/" 1578182400.0 #s(elfeed-ref "46de9932ffb164c0e39430d0a2a31e058331ad31") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/deconstruct-files/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/deconstruct-files/") "Files are fraught with peril" "https://danluu.com/deconstruct-files/" 1562889600.0 #s(elfeed-ref "82abab9834253e94ba271a2984b168aa9e2b6488") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/overwatch-gender/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/overwatch-gender/") "Randomized trial on gender in Overwatch" "https://danluu.com/overwatch-gender/" 1550534400.0 #s(elfeed-ref "d94c2f918cc66cc2a6835eebeece2a018eb2dbcc") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/fsyncgate/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/fsyncgate/") "Fsyncgate: errors on fsync are unrecovarable" "https://danluu.com/fsyncgate/" 1522195200.0 #s(elfeed-ref "d461455b3f49ca367ebf2f60b47bf6dda640440b") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/input-lag/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/input-lag/") "Computer latency: 1977-2017" "https://danluu.com/input-lag/" 1514073600.0 #s(elfeed-ref "69e716f7090b89a520a630740255fe8950d24bb4") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/bad-decisions/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/bad-decisions/") "How good are decisions? Evaluating decision quality in domains where evaluation is easy" "https://danluu.com/bad-decisions/" 1511222400.0 #s(elfeed-ref "792ca7f7d2a527c536ddb616b5ec1d60190272bb") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/android-updates/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/android-updates/") "How out of date are Android devices?" "https://danluu.com/android-updates/" 1510444800.0 #s(elfeed-ref "301db1cb680afff6acd7727f22c4ac6fa900f3d3") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/ui-compatibility/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/ui-compatibility/") "UI backwards compatibility" "https://danluu.com/ui-compatibility/" 1510185600.0 #s(elfeed-ref "966aac0d477cc2ef95e400db52c55829c2090824") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/filesystem-errors/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/filesystem-errors/") "Filesystem error handling" "https://danluu.com/filesystem-errors/" 1508716800.0 #s(elfeed-ref "485dfdff006837283e44de4a5276dcf6317043a7") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/keyboard-latency/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/keyboard-latency/") "Keyboard latency" "https://danluu.com/keyboard-latency/" 1508112000.0 #s(elfeed-ref "43b021365ee5aa17a5f559199cee0c9395a62b58") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/branch-prediction/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/branch-prediction/") "Branch prediction" "https://danluu.com/branch-prediction/" 1503446400.0 #s(elfeed-ref "9b22dd049bf6f4360455103bed06affc8327160f") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/sattolo/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/sattolo/") "Sattolo's algorithm" "https://danluu.com/sattolo/" 1502236800.0 #s(elfeed-ref "753503fffb6e0031edac3c4b4add33859e11b15d") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/term-latency/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/term-latency/") "Terminal latency" "https://danluu.com/term-latency/" 1500336000.0 #s(elfeed-ref "1b47d43be63cdaab53297af2df6496d9f2c8845e") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/keyboard-v-mouse/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/keyboard-v-mouse/") "The widely cited studies on mouse vs. keyboard efficiency are completely bogus" "https://danluu.com/keyboard-v-mouse/" 1497312000.0 #s(elfeed-ref "39a946ef6654c3729f06478cbff570472117c858") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/startup-options/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/startup-options/") "Startup options v. cash" "https://danluu.com/startup-options/" 1496793600.0 #s(elfeed-ref "919789caea9bd882aeacaeeb8c1edd8a751c51c6") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/web-bloat/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/web-bloat/") "How web bloat impacts users with slow connections" "https://danluu.com/web-bloat/" 1486512000.0 #s(elfeed-ref "08ab0dd67c243a9b52c5b3fe115a7a9a6a09a56f") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/hn-comments/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/hn-comments/") "HN: the good parts" "https://danluu.com/hn-comments/" 1477180800.0 #s(elfeed-ref "0fc9ec092d6a111758c1f0c525c76b6d63d34d9c") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/programming-books/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/programming-books/") "Programming book recommendations and anti-recommendations" "https://danluu.com/programming-books/" 1476605194.0 #s(elfeed-ref "16726980fa6cdc1edf1e1923a146163ff7bf50ea") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/hiring-lemons/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/hiring-lemons/") "Hiring and the market for lemons" "https://danluu.com/hiring-lemons/" 1476006254.0 #s(elfeed-ref "c9a67077bf84612d0f167e12e8cf66d6bf38e3bb") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/sounds-easy/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/sounds-easy/") "I could do that in a weekend!" "https://danluu.com/sounds-easy/" 1475482467.0 #s(elfeed-ref "381c5c5fd5e60779095f7497ed64d87fef599c4a") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/bimodal-compensation/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/bimodal-compensation/") "Is dev compensation bimodal?" "https://danluu.com/bimodal-compensation/" 1474958006.0 #s(elfeed-ref "064ee2ef4ee46490ea56aadc03eac6f9544304e5") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/learning-to-program/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/learning-to-program/") "How I learned to program" "https://danluu.com/learning-to-program/" 1473669686.0 #s(elfeed-ref "b32c3dffb8e9681815919cfef0fa43e008bc5a05") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/concurrency-bugs/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/concurrency-bugs/") "Notes on concurrency bugs" "https://danluu.com/concurrency-bugs/" 1470367946.0 #s(elfeed-ref "dfa46fd93086a95af05aa612bed019521f8a797f") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/programming-blogs/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/programming-blogs/") "Some programming blogs to consider reading" "https://danluu.com/programming-blogs/" 1460963194.0 #s(elfeed-ref "4d4f5902d29c7fb4c66d02223e5e1991d1d0b889") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/google-sre-book/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/google-sre-book/") "Google SRE book" "https://danluu.com/google-sre-book/" 1460361658.0 #s(elfeed-ref "b9e0caecbc36d437151a606d9604348185e1861d") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/programmer-moneyball/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/programmer-moneyball/") "We only hire the trendiest" "https://danluu.com/programmer-moneyball/" 1458545024.0 #s(elfeed-ref "55ddf3f5963d10e82c2ac9fbd1076e0d48a180a8") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/su3su2u1/hpmor/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/su3su2u1/hpmor/") "Harry Potter and the Methods of Rationality review by su3su2u1" "https://danluu.com/su3su2u1/hpmor/" 1456790400.0 #s(elfeed-ref "359d9d5f547dd42dbd07dcd1c471e0d4955e938b") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/su3su2u1/physics/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/su3su2u1/physics/") "su3su2u1 physics tumblr archive" "https://danluu.com/su3su2u1/physics/" 1456790400.0 #s(elfeed-ref "3b194e2e3293ca506ee97e786d82a7282740f4b7") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/perf-tracing/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/perf-tracing/") "Sampling v. tracing" "https://danluu.com/perf-tracing/" 1453593600.0 #s(elfeed-ref "df7120047621c9cdd786a4528b60ec9898a8485e") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/cpu-bugs/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/cpu-bugs/") "We saw some really bad Intel CPU bugs in 2015 and we should expect to see more in the future" "https://danluu.com/cpu-bugs/" 1452384000.0 #s(elfeed-ref "696c10ab72bdf9ab88cd7f0c6ae15afb4c1efa28") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/wat/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/wat/") "Normalization of deviance" "https://danluu.com/wat/" 1451347200.0 #s(elfeed-ref "964ae97683f10ad3a16c3bd92de0e46971a205a4") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/startup-tradeoffs/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/startup-tradeoffs/") "Big companies v. startups" "https://danluu.com/startup-tradeoffs/" 1450310400.0 #s(elfeed-ref "c5d73f278480e8964739620780c150efbede6c9a") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/file-consistency/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/file-consistency/") "Files are hard" "https://danluu.com/file-consistency/" 1449878400.0 #s(elfeed-ref "635e855c1e8966c39d833a797a54fe434080a5e5") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/why-ecc/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/why-ecc/") "Why use ECC?" "https://danluu.com/why-ecc/" 1448582400.0 #s(elfeed-ref "6f25f70ccda8b7e6f8ac483dd7480bfde500a9d9") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/butler-lampson-1999/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/butler-lampson-1999/") "What's worked in Computer Science: 1999 v. 2015" "https://danluu.com/butler-lampson-1999/" 1448236800.0 #s(elfeed-ref "7f2d0f26888d6402cab98d1a2d85e38c51188145") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/infinite-disk/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/infinite-disk/") "Infinite disk" "https://danluu.com/infinite-disk/" 1446336000.0 #s(elfeed-ref "2e932b80441c8a9dcd35f6f718d24f34addf2de8") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/intel-cat/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/intel-cat/") "Why Intel added cache partitioning" "https://danluu.com/intel-cat/" 1443916800.0 #s(elfeed-ref "2a50c2570c1b8d2bef13725b61d1dce2a3768a38") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/limplock/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/limplock/") "Slowlock" "https://danluu.com/limplock/" 1443571200.0 #s(elfeed-ref "565027b53f1fb941a62981b069291bb8ad864920") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/yegge-predictions/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/yegge-predictions/") "Steve Yegge's prediction record" "https://danluu.com/yegge-predictions/" 1440979200.0 #s(elfeed-ref "c6b626b5727f0cc486b6f30cb84eb12f81bc4577") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/postmortem-lessons/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/postmortem-lessons/") "Reading postmortems" "https://danluu.com/postmortem-lessons/" 1440028800.0 #s(elfeed-ref "883bd0c47d3d14092a11fa165ebe3a3171995c36") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/slashdot-sourceforge/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/slashdot-sourceforge/") "Slashdot and Sourceforge" "https://danluu.com/slashdot-sourceforge/" 1433030400.0 #s(elfeed-ref "8176f74ad4e62ab3c22db17a56bec7e1c4146da9") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/googlebot-monopoly/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/googlebot-monopoly/") "The googlebot monopoly" "https://danluu.com/googlebot-monopoly/" 1432684800.0 #s(elfeed-ref "4b2fb89135cddc8ff4c3801e01ffe5b172349136") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/boring-languages/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/boring-languages/") "A defense of boring languages" "https://danluu.com/boring-languages/" 1432512000.0 #s(elfeed-ref "6261b1d4602f4d6f563f4e977c026b05006d863f") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/monorepo/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/monorepo/") "Advantages of monorepos" "https://danluu.com/monorepo/" 1431820800.0 #s(elfeed-ref "784ade6806424fbc1cded22eb48a2ab516cd15c6") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/datacenter-power/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/datacenter-power/") "We used to build steel mills near cheap power. Now that's where we build datacenters" "https://danluu.com/datacenter-power/" 1430697600.0 #s(elfeed-ref "85ba777b3719abcc949413f12ec1c0da1bd9e0af") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/dunning-kruger/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/dunning-kruger/") "Reading citations is easier than most people think" "https://danluu.com/dunning-kruger/" 1427587200.0 #s(elfeed-ref "88796c6fa6de1da6d0492e3f0a58a5b53ef5401c") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/testing/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/testing/") "Given that we spend little on testing, how should we test software?" "https://danluu.com/testing/" 1425945600.0 #s(elfeed-ref "8c3d8c6dfe8d4288b12c752ee6b3df8102101d00") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/navigate-url/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/navigate-url/") "What happens when you load a URL?" "https://danluu.com/navigate-url/" 1425686400.0 #s(elfeed-ref "539ec54ccbd7c8eb04011afecc461e039708f4e8") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/percentile-latency/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/percentile-latency/") "Goodhearting IQ, cholesterol, and tail latency" "https://danluu.com/percentile-latency/" 1425513600.0 #s(elfeed-ref "30a3c1205dd4df7c6f72c113760ab84f0e30bb94") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/customer-service/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/customer-service/") "AI doesn't have to be very good to displace humans" "https://danluu.com/customer-service/" 1423958400.0 #s(elfeed-ref "d784a4d3693ef6142d14ff710101c5a102410ea5") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/cpu-backdoors/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/cpu-backdoors/") "CPU backdoors" "https://danluu.com/cpu-backdoors/" 1422921600.0 #s(elfeed-ref "7045d7ace4248abe71e312db2eaa5fcded4b9c61") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/blog-ads/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/blog-ads/") "Blog monetization" "https://danluu.com/blog-ads/" 1422057600.0 #s(elfeed-ref "282fccf8cb1fdd0100f0e076a6b28cc9deb001d6") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/new-cpu-features/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/new-cpu-features/") "What's new in CPUs since the 80s?" "https://danluu.com/new-cpu-features/" 1420934400.0 #s(elfeed-ref "86044bcfd32c281b71da00f139b37332483f7388") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/julialang/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/julialang/") "A review of the Julia language" "https://danluu.com/julialang/" 1419724800.0 #s(elfeed-ref "e037c1a67fbca9eae0ec533f72ddb89a8601f260") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/integer-overflow/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/integer-overflow/") "Integer overflow checking cost" "https://danluu.com/integer-overflow/" 1418774400.0 #s(elfeed-ref "6a361b6385cecde802f3d55cc8bab2d785f81322") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/malloc-tutorial/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/malloc-tutorial/") "Malloc tutorial" "https://danluu.com/malloc-tutorial/" 1417651200.0 #s(elfeed-ref "68439cc5eeec1937085c76ae5d0c2e38a5a0f2a9") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/tech-discrimination/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/tech-discrimination/") "Markets, discrimination, and \"lowering the bar\"" "https://danluu.com/tech-discrimination/" 1417392000.0 #s(elfeed-ref "4c00aa165ecd3bdfe3f006a57bd9adfda6a5cd41") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/linux-devs-say/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/linux-devs-say/") "TF-IDF linux commits" "https://danluu.com/linux-devs-say/" 1416787200.0 #s(elfeed-ref "5b53b8c203db71463fbd3e0cb55d6a277fa9eb4e") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/everything-is-broken/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/everything-is-broken/") "One week of bugs" "https://danluu.com/everything-is-broken/" 1416268800.0 #s(elfeed-ref "7cb698db60b5827ca77a84833611b53b6d893cb7") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/octopress-speedup/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/octopress-speedup/") "Speeding up this site by 50x" "https://danluu.com/octopress-speedup/" 1416182400.0 #s(elfeed-ref "a1e42707ca90f165c26ff08f2e98562bb9e4e185") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/broken-builds/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/broken-builds/") "How often is the build broken?" "https://danluu.com/broken-builds/" 1415577600.0 #s(elfeed-ref "b1f771b3e81d72b7bd5f1919f871401cef93adb0") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/empirical-pl/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/empirical-pl/") "Literature review on the benefits of static types" "https://danluu.com/empirical-pl/" 1415318400.0 #s(elfeed-ref "fcaaff06828b69d40b9ac356e0f5693aa4a132b3") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/clwb-pcommit/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/clwb-pcommit/") "CLWB and PCOMMIT" "https://danluu.com/clwb-pcommit/" 1415145600.0 #s(elfeed-ref "f84eeb693c29974e26436ac873167e974fead95c") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/2choices-eviction/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/2choices-eviction/") "Caches: LRU v. random" "https://danluu.com/2choices-eviction/" 1414972800.0 #s(elfeed-ref "1f9cbccdd0bc4790d46d4d8c46ef5901b0119cf3") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/tests-v-reason/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/tests-v-reason/") "Testing v. informal reasoning" "https://danluu.com/tests-v-reason/" 1414972800.0 #s(elfeed-ref "d70ab5a7700c59f432c128093f5ba1a7ce1253c9") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/assembly-intrinsics/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/assembly-intrinsics/") "Assembly v. intrinsics" "https://danluu.com/assembly-intrinsics/" 1413676800.0 #s(elfeed-ref "c5775db50afd91f7503290e6e870314d2760b2f9") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/google-wage-fixing/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/google-wage-fixing/") "Google wage fixing, 11-CV-02509-LHK, ORDER DENYING PLAINTIFFS' MOTION FOR PRELIMINARY APPROVAL OF SETTLEMENTS WITH ADOBE, APPLE, GOOGLE, AND INTEL" "https://danluu.com/google-wage-fixing/" 1407974400.0 #s(elfeed-ref "d2206672cf37aa5412d21e0169914f3a1e40f03b") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/verilog-vs-vhdl/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/verilog-vs-vhdl/") "Verilog Won & VHDL Lost? — You Be The Judge!" "https://danluu.com/verilog-vs-vhdl/" 1407974400.0 #s(elfeed-ref "8c21383536d762b23f9fe0efbb0b883e0f528691") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/bugalytics/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/bugalytics/") "Data-driven bug finding" "https://danluu.com/bugalytics/" 1396742400.0 #s(elfeed-ref "e51b891ed7803ba2ae1800a108ab9cae1d93b3b8") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/edit-binary/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/edit-binary/") "Editing binaries" "https://danluu.com/edit-binary/" 1395532800.0 #s(elfeed-ref "9b97ea5305e1500fe8a633aa38fbc00c3d810c85") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/gender-gap/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/gender-gap/") "That bogus gender gap article" "https://danluu.com/gender-gap/" 1394323200.0 #s(elfeed-ref "8cebbd198c67abaed0db69d8ac0d06ade4c2ec4e") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/anon-benchmark/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/anon-benchmark/") "That time Oracle tried to have a professor fired for benchmarking their database" "https://danluu.com/anon-benchmark/" 1393977600.0 #s(elfeed-ref "c5976f17fdc6be727924c30c4fd8ebb98e554aad") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/teach-debugging/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/teach-debugging/") "Why don't schools teach debugging?" "https://danluu.com/teach-debugging/" 1391817600.0 #s(elfeed-ref "a9015e0846eb5cfd67e8ce11132e3df28116e519") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/math-bias/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/math-bias/") "Do programmers need math?" "https://danluu.com/math-bias/" 1389225600.0 #s(elfeed-ref "eda5224618ba65b0548bb9968166cff4e4fede93") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/3c-conflict/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/3c-conflict/") "Data alignment and caches" "https://danluu.com/3c-conflict/" 1388620800.0 #s(elfeed-ref "3883c52a9bf48d4a3917d130efdb5f7873458f15") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/linear-hammer/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/linear-hammer/") "PCA is not a panacea" "https://danluu.com/linear-hammer/" 1386892800.0 #s(elfeed-ref "c9e4d1ce7ad5ca63021fc37f4e211065407f76fd") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/hardware-unforgiving/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/hardware-unforgiving/") "Why hardware development is hard" "https://danluu.com/hardware-unforgiving/" 1384041600.0 #s(elfeed-ref "1ea5c70d27c8dd85e245d41e9cc6edd286698fe2") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/discourage-oss/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/discourage-oss/") "How to discourage open source contributions" "https://danluu.com/discourage-oss/" 1382832000.0 #s(elfeed-ref "5fdd6cb495401c40964a581a4effe98c6737ef30") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/randomize-hn/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/randomize-hn/") "Randomize HN" "https://danluu.com/randomize-hn/" 1380844800.0 #s(elfeed-ref "369b846c4001ea9f2ac02b446ddc6907114586c5") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/pl-troll/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/pl-troll/") "Writing safe Verilog" "https://danluu.com/pl-troll/" 1379203200.0 #s(elfeed-ref "497ac5bda35c32b4ddc68afc356b127366c48d6b") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/why-hardware-development-is-hard/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/why-hardware-development-is-hard/") "Verilog is weird" "https://danluu.com/why-hardware-development-is-hard/" 1378512000.0 #s(elfeed-ref "61e3bd98773246599bb7baaebfda8cd36acdd75e") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/about/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/about/") "About danluu.com" "https://danluu.com/about/" 1377993600.0 #s(elfeed-ref "f1b9d1d102778b8e4417c5aab3bc57db2d6e94ff") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/latency-mitigation/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/latency-mitigation/") "Latency mitigation strategies (by John Carmack)" "https://danluu.com/latency-mitigation/" 1362441600.0 #s(elfeed-ref "990a0c42c570ded97455ef3e3787e56ffcbdc10a") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/karajack/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/karajack/") "Kara Swisher interview of Jack Dorsey" "https://danluu.com/karajack/" 1360627200.0 #s(elfeed-ref "e08dd27fe9dd601d3c98f280ce7785cdf9922e04") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/bitc-retrospective/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/bitc-retrospective/") "Jonathan Shapiro's Retrospective Thoughts on BitC" "https://danluu.com/bitc-retrospective/" 1332460800.0 #s(elfeed-ref "ca9a79fce9d433f3036cc11874f65420d350b361") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/open-social-networks/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/open-social-networks/") "Are closed social networks inevitable?" "https://danluu.com/open-social-networks/" 1262304000.0 #s(elfeed-ref "6ca5c5d8e57eca3c69ee005af4e1037150d8c801") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/mit-stanford/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/mit-stanford/") "How does Boston compare to SV and what do MIT and Stanford have to do with it?" "https://danluu.com/mit-stanford/" 1262304000.0 #s(elfeed-ref "68cc3cdee4a22036202ea43cead549c93b723747") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/bioware/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/bioware/") "Work-life balance at Bioware" "https://danluu.com/bioware/" 1212192000.0 #s(elfeed-ref "3c5daa3f5d209031344b96e5816af518a6518803") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/symbolics-lisp-machines/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/symbolics-lisp-machines/") "History of Symbolics lisp machines" "https://danluu.com/symbolics-lisp-machines/" 1195171200.0 #s(elfeed-ref "4ab7a73482fc2253522fdbca572d3b321be4a590") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("danluu.com" . "https://danluu.com/subspace-history/") #s(elfeed-entry ("danluu.com" . "https://danluu.com/subspace-history/") "Subspace / Continuum History" "https://danluu.com/subspace-history/" 1138752000.0 #s(elfeed-ref "8727d5f7a965dc903f49aec153007ce1ca911c38") html nil (dev systems unread) "https://danluu.com/atom.xml" nil) ("nullprogram.com" . "urn:uuid:3e24c35f-9fac-470a-8225-2e0a0bc8f7ac") #s(elfeed-entry ("nullprogram.com" . "urn:uuid:3e24c35f-9fac-470a-8225-2e0a0bc8f7ac") "Assemblers in w64devkit, and other updates" "https://nullprogram.com/blog/2025/08/10/" 1754840570.0 #s(elfeed-ref "5b29aea9bc7e4cc9e10629971c90e262e748e3d8") html nil (dev emacs mustread unread) "http://nullprogram.com/feed" (:categories ("x86"))) ("nullprogram.com" . "urn:uuid:abb3bf93-074f-4876-8d46-42997edebb34") #s(elfeed-entry ("nullprogram.com" . "urn:uuid:abb3bf93-074f-4876-8d46-42997edebb34") "Parameterized types in C using the new tag compatibility rule" "https://nullprogram.com/blog/2025/06/26/" 1750981793.0 #s(elfeed-ref "8570a78e9cee8da2e7c2fca5ead4740d1e4b8f43") html nil (dev emacs mustread unread) "http://nullprogram.com/feed" (:categories ("c"))) ("nullprogram.com" . "urn:uuid:dc2863e4-9601-4e42-bbd2-3cb4a5315d4d") #s(elfeed-entry ("nullprogram.com" . "urn:uuid:dc2863e4-9601-4e42-bbd2-3cb4a5315d4d") "WebAssembly: How to allocate your allocator" "https://nullprogram.com/blog/2025/04/19/" 1745032700.0 #s(elfeed-ref "8484fdcb43db5a542f71ad5387f6ec57b7d0bf08") html nil (dev emacs mustread unread) "http://nullprogram.com/feed" (:categories ("c"))) ("nullprogram.com" . "urn:uuid:9881d125-2f2c-4fee-a959-222c9449399b") #s(elfeed-entry ("nullprogram.com" . "urn:uuid:9881d125-2f2c-4fee-a959-222c9449399b") "Lessons learned from my first dive into WebAssembly" "https://nullprogram.com/blog/2025/04/04/" 1743739280.0 #s(elfeed-ref "c9a044c9a8d2d4f02023ce8e59ee91a77c74920c") html nil (dev emacs mustread unread) "http://nullprogram.com/feed" (:categories ("c" "tutorial"))) ("nullprogram.com" . "urn:uuid:f7101ee1-a2e6-4895-b763-bd7b2a842280") #s(elfeed-entry ("nullprogram.com" . "urn:uuid:f7101ee1-a2e6-4895-b763-bd7b2a842280") "A more robust raw OpenBSD syscall demo" "https://nullprogram.com/blog/2025/03/06/" 1741229000.0 #s(elfeed-ref "67e299c90c41f912879d94c1683b93e85434a1e9") html nil (dev emacs mustread unread) "http://nullprogram.com/feed" (:categories ("c" "bsd" "x86"))) ("nullprogram.com" . "urn:uuid:852fe937-3510-4752-a9a8-97fde5321e7e") #s(elfeed-entry ("nullprogram.com" . "urn:uuid:852fe937-3510-4752-a9a8-97fde5321e7e") "Robust Wavefront OBJ model parsing in C" "https://nullprogram.com/blog/2025/03/02/" 1740957778.0 #s(elfeed-ref "d9906b33c1fb76707e7f9f213acc4eb4d322326c") html nil (dev emacs mustread unread) "http://nullprogram.com/feed" (:categories ("c" "tutorial"))) ("nullprogram.com" . "urn:uuid:a3ad2465-f53c-43d3-acc7-988d9d4d3989") #s(elfeed-entry ("nullprogram.com" . "urn:uuid:a3ad2465-f53c-43d3-acc7-988d9d4d3989") "Meet the new xxd for w64devkit: rexxd" "https://nullprogram.com/blog/2025/02/17/" 1739753389.0 #s(elfeed-ref "64e31fd662691fa4c1f932cd886c2c96e61a6489") html nil (dev emacs mustread unread) "http://nullprogram.com/feed" (:categories ("c" "win32"))) ("nullprogram.com" . "urn:uuid:eff3b773-99ee-4c38-9f9c-f51294a1b9e0") #s(elfeed-entry ("nullprogram.com" . "urn:uuid:eff3b773-99ee-4c38-9f9c-f51294a1b9e0") "Tips for more effective fuzz testing with AFL++" "https://nullprogram.com/blog/2025/02/05/" 1738778635.0 #s(elfeed-ref "f007a028fd903af96afa35f9ab1333a4bb007632") html nil (dev emacs mustread unread) "http://nullprogram.com/feed" (:categories ("c" "cpp" "tutorial"))) ("fasterthanli.me" . "https://fasterthanli.me/articles/the-science-of-loudness") #s(elfeed-entry ("fasterthanli.me" . "https://fasterthanli.me/articles/the-science-of-loudness") "The science of loudness" "https://fasterthanli.me/articles/the-science-of-loudness" 1755894600.0 #s(elfeed-ref "c4353c7665ad619c0b6710199eb257267121e6ee") html nil (dev systems unread) "https://fasterthanli.me/index.xml" (:categories ("audio" "maths" "physics"))) ("fasterthanli.me" . "https://fasterthanli.me/articles/summer-fasterthanlime-update") #s(elfeed-entry ("fasterthanli.me" . "https://fasterthanli.me/articles/summer-fasterthanlime-update") "Summer fasterthanlime update" "https://fasterthanli.me/articles/summer-fasterthanlime-update" 1755243000.0 #s(elfeed-ref "19fa085a6682a94d67c266b275b5484672db7017") html nil (dev systems unread) "https://fasterthanli.me/index.xml" (:categories ("meta"))) ("fasterthanli.me" . "https://fasterthanli.me/articles/all-color-is-best-effort") #s(elfeed-entry ("fasterthanli.me" . "https://fasterthanli.me/articles/all-color-is-best-effort") "All color is best-effort" "https://fasterthanli.me/articles/all-color-is-best-effort" 1751009400.0 #s(elfeed-ref "86c0decd49e402cc8b7defe8db319067f055a6f8") html nil (dev systems unread) "https://fasterthanli.me/index.xml" (:categories ("color" "video" "dsp"))) ("fasterthanli.me" . "https://fasterthanli.me/articles/introducing-facet-reflection-for-rust") #s(elfeed-entry ("fasterthanli.me" . "https://fasterthanli.me/articles/introducing-facet-reflection-for-rust") "Introducing facet: Reflection for Rust" "https://fasterthanli.me/articles/introducing-facet-reflection-for-rust" 1749150001.0 #s(elfeed-ref "1b1170a6495ffc6e1fdbb1fc689eb9c7dd2f3cd4") html nil (dev systems unread) "https://fasterthanli.me/index.xml" (:categories ("rust" "reflection" "facet"))) ("fasterthanli.me" . "https://fasterthanli.me/articles/the-virtue-of-unsynn") #s(elfeed-entry ("fasterthanli.me" . "https://fasterthanli.me/articles/the-virtue-of-unsynn") "The virtue of unsynn" "https://fasterthanli.me/articles/the-virtue-of-unsynn" 1748539201.0 #s(elfeed-ref "5b2a9aeaa1ecbc0a77dd86912fe6805589d19e2d") html nil (dev systems unread) "https://fasterthanli.me/index.xml" (:categories ("rust"))) ("fasterthanli.me" . "https://fasterthanli.me/articles/open-sourcing-the-home-cms") #s(elfeed-entry ("fasterthanli.me" . "https://fasterthanli.me/articles/open-sourcing-the-home-cms") "Open sourcing the home CMS" "https://fasterthanli.me/articles/open-sourcing-the-home-cms" 1745323200.0 #s(elfeed-ref "c9b457342f688feaa7ab13fb7a210de09554b6e6") html nil (dev systems unread) "https://fasterthanli.me/index.xml" (:categories ("oss" "rust" "ftl-infra"))) ("fasterthanli.me" . "https://fasterthanli.me/articles/the-promise-of-rust") #s(elfeed-entry ("fasterthanli.me" . "https://fasterthanli.me/articles/the-promise-of-rust") "The promise of Rust" "https://fasterthanli.me/articles/the-promise-of-rust" 1744835400.0 #s(elfeed-ref "9ef658ff23bccff5b3a1b9e82954dc4b247b3982") html nil (dev systems unread) "https://fasterthanli.me/index.xml" (:categories ("rust" "memory-safety"))) ("fasterthanli.me" . "https://fasterthanli.me/articles/that-health-is-mental") #s(elfeed-entry ("fasterthanli.me" . "https://fasterthanli.me/articles/that-health-is-mental") "That health is mental" "https://fasterthanli.me/articles/that-health-is-mental" 1744196400.0 #s(elfeed-ref "d32ec243d86d6948f3ee2dc5854f33369fbb7d50") html nil (dev systems unread) "https://fasterthanli.me/index.xml" (:categories ("mental-health"))) ("fasterthanli.me" . "https://fasterthanli.me/articles/more-devops-than-i-bargained-for") #s(elfeed-entry ("fasterthanli.me" . "https://fasterthanli.me/articles/more-devops-than-i-bargained-for") "More devops than I bargained for" "https://fasterthanli.me/articles/more-devops-than-i-bargained-for" 1744053000.0 #s(elfeed-ref "be501c7ee515698760bcbaccce5eee9f234c546c") html nil (dev systems unread) "https://fasterthanli.me/index.xml" (:categories ("kubernetes" "calico" "ipv6"))) ("fasterthanli.me" . "https://fasterthanli.me/articles/impromptu-disaster-recovery") #s(elfeed-entry ("fasterthanli.me" . "https://fasterthanli.me/articles/impromptu-disaster-recovery") "Impromptu disaster recovery" "https://fasterthanli.me/articles/impromptu-disaster-recovery" 1743171000.0 #s(elfeed-ref "8f95bca3e0748a6bc16da3f42e6129eb7bf1aba8") html nil (dev systems unread) "https://fasterthanli.me/index.xml" (:categories ("kubernetes" "devops" "llm"))) ("fasterthanli.me" . "https://fasterthanli.me/articles/the-case-for-sans-io") #s(elfeed-entry ("fasterthanli.me" . "https://fasterthanli.me/articles/the-case-for-sans-io") "The case for sans-io" "https://fasterthanli.me/articles/the-case-for-sans-io" 1738954381.0 #s(elfeed-ref "9964df60210d7bddfdefe3a5fd0f9bc95143f57a") html nil (dev systems unread) "https://fasterthanli.me/index.xml" (:categories ("zip" "rust" "async"))) ("fasterthanli.me" . "https://fasterthanli.me/articles/catching-up-with-async-rust") #s(elfeed-entry ("fasterthanli.me" . "https://fasterthanli.me/articles/catching-up-with-async-rust") "Catching up with async Rust" "https://fasterthanli.me/articles/catching-up-with-async-rust" 1735111800.0 #s(elfeed-ref "7f8125a7fa3a6e4a265ddbf2dfce2cdc8791c362") html nil (dev systems unread) "https://fasterthanli.me/index.xml" (:categories ("rust" "async" "traits"))) ("fasterthanli.me" . "https://fasterthanli.me/articles/highlighted-code-in-slides") #s(elfeed-entry ("fasterthanli.me" . "https://fasterthanli.me/articles/highlighted-code-in-slides") "Highlighted code in slides" "https://fasterthanli.me/articles/highlighted-code-in-slides" 1732383600.0 #s(elfeed-ref "f617e09db09c57b02ea3106cb692c54e8728ab98") html nil (dev systems unread) "https://fasterthanli.me/index.xml" (:categories ("html" "css" "javascript" "color"))) ("fasterthanli.me" . "https://fasterthanli.me/articles/ktls-now-under-rustls-org") #s(elfeed-entry ("fasterthanli.me" . "https://fasterthanli.me/articles/ktls-now-under-rustls-org") "ktls now under the rustls org" "https://fasterthanli.me/articles/ktls-now-under-rustls-org" 1727385000.0 #s(elfeed-ref "840bac105358311aacbe41557d6eb64e652f9eb3") html nil (dev systems unread) "https://fasterthanli.me/index.xml" (:categories ("rustls" "ktls" "rust"))) ("fasterthanli.me" . "https://fasterthanli.me/articles/state-of-the-fasterthanlime-2024") #s(elfeed-entry ("fasterthanli.me" . "https://fasterthanli.me/articles/state-of-the-fasterthanlime-2024") "State of the fasterthanlime 2024" "https://fasterthanli.me/articles/state-of-the-fasterthanlime-2024" 1723014845.0 #s(elfeed-ref "b075d4d19e78a86a46a9a9433f220a36dc47d73e") html nil (dev systems unread) "https://fasterthanli.me/index.xml" (:categories ("announcement" "meta" "ftl-infra"))) ("fasterthanli.me" . "https://fasterthanli.me/articles/face-cams-the-missing-guide") #s(elfeed-entry ("fasterthanli.me" . "https://fasterthanli.me/articles/face-cams-the-missing-guide") "Face cams: the missing guide" "https://fasterthanli.me/articles/face-cams-the-missing-guide" 1709402400.0 #s(elfeed-ref "860e829b71569b200b805c3dd141034983759672") html nil (dev systems unread) "https://fasterthanli.me/index.xml" (:categories ("meta" "production"))) ("fasterthanli.me" . "https://fasterthanli.me/articles/just-paying-figma-15-dollars") #s(elfeed-entry ("fasterthanli.me" . "https://fasterthanli.me/articles/just-paying-figma-15-dollars") "Just paying Figma $15/month because nothing else fucking works" "https://fasterthanli.me/articles/just-paying-figma-15-dollars" 1697734200.0 #s(elfeed-ref "1c485b99612fb1f9143ef788672def1144be361f") html nil (dev systems unread) "https://fasterthanli.me/index.xml" (:categories ("rant" "foss"))) ("fasterthanli.me" . "https://fasterthanli.me/articles/cracking-electron-apps-open") #s(elfeed-entry ("fasterthanli.me" . "https://fasterthanli.me/articles/cracking-electron-apps-open") "Cracking Electron apps open" "https://fasterthanli.me/articles/cracking-electron-apps-open" 1688401800.0 #s(elfeed-ref "9598718b4b5e1efcb54ac8337e940786eca9acfb") html nil (dev systems unread) "https://fasterthanli.me/index.xml" (:categories ("electron" "rust" "asar"))) ("fasterthanli.me" . "https://fasterthanli.me/series/building-a-rust-service-with-nix/part-12") #s(elfeed-entry ("fasterthanli.me" . "https://fasterthanli.me/series/building-a-rust-service-with-nix/part-12") "Extra credit" "https://fasterthanli.me/series/building-a-rust-service-with-nix/part-12" 1678001412.0 #s(elfeed-ref "f3f63641f509aaf42df500038f989323bb39e0f5") html nil (dev systems unread) "https://fasterthanli.me/index.xml" (:categories ("rust" "nix"))) ("fasterthanli.me" . "https://fasterthanli.me/series/building-a-rust-service-with-nix/part-11") #s(elfeed-entry ("fasterthanli.me" . "https://fasterthanli.me/series/building-a-rust-service-with-nix/part-11") "Generating a docker image with nix" "https://fasterthanli.me/series/building-a-rust-service-with-nix/part-11" 1678001411.0 #s(elfeed-ref "d4073d00e319a0ff8e4bf40302609345a72b6b15") html nil (dev systems unread) "https://fasterthanli.me/index.xml" (:categories ("nix" "rust"))) ("fasterthanli.me" . "https://fasterthanli.me/series/building-a-rust-service-with-nix/part-10") #s(elfeed-entry ("fasterthanli.me" . "https://fasterthanli.me/series/building-a-rust-service-with-nix/part-10") "Making a dev shell with nix flakes" "https://fasterthanli.me/series/building-a-rust-service-with-nix/part-10" 1678001410.0 #s(elfeed-ref "f95efcd5df705ae7f0668ae6f52061562ffe16da") html nil (dev systems unread) "https://fasterthanli.me/index.xml" (:categories ("nix"))) ("fasterthanli.me" . "https://fasterthanli.me/series/building-a-rust-service-with-nix/part-9") #s(elfeed-entry ("fasterthanli.me" . "https://fasterthanli.me/series/building-a-rust-service-with-nix/part-9") "Learning Nix from the bottom up" "https://fasterthanli.me/series/building-a-rust-service-with-nix/part-9" 1678001409.0 #s(elfeed-ref "d49757e0290f96e1f5c09af6e81a837081017dda") html nil (dev systems unread) "https://fasterthanli.me/index.xml" (:categories ("nix"))) ("fasterthanli.me" . "https://fasterthanli.me/series/building-a-rust-service-with-nix/part-8") #s(elfeed-entry ("fasterthanli.me" . "https://fasterthanli.me/series/building-a-rust-service-with-nix/part-8") "Doing geo-location and keeping analytics" "https://fasterthanli.me/series/building-a-rust-service-with-nix/part-8" 1678001408.0 #s(elfeed-ref "20b082889e50968da32a53f6743da78719a323bb") html nil (dev systems unread) "https://fasterthanli.me/index.xml" (:categories ("rust" "webdev" "sqlite" "geoip"))) ("fasterthanli.me" . "https://fasterthanli.me/series/building-a-rust-service-with-nix/part-7") #s(elfeed-entry ("fasterthanli.me" . "https://fasterthanli.me/series/building-a-rust-service-with-nix/part-7") "Using the Shipyard private crate registry with Docker" "https://fasterthanli.me/series/building-a-rust-service-with-nix/part-7" 1678001407.0 #s(elfeed-ref "01c0b3d274f5e08ef3c47564fa637704ce133cdb") html nil (dev systems unread) "https://fasterthanli.me/index.xml" (:categories ("rust" "docker" "shipyard"))) ("fasterthanli.me" . "https://fasterthanli.me/series/building-a-rust-service-with-nix/part-6") #s(elfeed-entry ("fasterthanli.me" . "https://fasterthanli.me/series/building-a-rust-service-with-nix/part-6") "Deploying catscii to fly.io" "https://fasterthanli.me/series/building-a-rust-service-with-nix/part-6" 1678001406.0 #s(elfeed-ref "8b288f8c4f1ff3de51fd282ae2837376cee93392") html nil (dev systems unread) "https://fasterthanli.me/index.xml" (:categories ("rust" "docker" "flyio"))) ("blog.regehr.org" . "https://blog.regehr.org/?p=2124") #s(elfeed-entry ("blog.regehr.org" . "https://blog.regehr.org/?p=2124") "Looking for Missed Alarm Bugs in a Formal Verification Tool" "https://blog.regehr.org/archives/2124" 1725474543.0 #s(elfeed-ref "d8c76a231d183dba383cce906f2605ea7a8fad32") html nil (c dev unread) "https://blog.regehr.org/feed" (:authors ((:name "regehr")) :categories ("Uncategorized"))) ("blog.regehr.org" . "https://blog.regehr.org/?p=2578") #s(elfeed-entry ("blog.regehr.org" . "https://blog.regehr.org/?p=2578") "Dataflow Analyses and Compiler Optimizations that Use Them, for Free" "https://blog.regehr.org/archives/2578" 1713650133.0 #s(elfeed-ref "7ff549ef0dcc02e480ab15f090d671c8f2a65e20") html nil (c dev unread) "https://blog.regehr.org/feed" (:authors ((:name "regehr")) :categories ("Uncategorized"))) ("blog.regehr.org" . "https://blog.regehr.org/?p=2485") #s(elfeed-entry ("blog.regehr.org" . "https://blog.regehr.org/?p=2485") "Why Do Peephole Optimizations Work?" "https://blog.regehr.org/archives/2485" 1698855800.0 #s(elfeed-ref "d6277cf3cd2bb3af90141e829fc0a137cd67b446") html nil (c dev unread) "https://blog.regehr.org/feed" (:authors ((:name "regehr")) :categories ("Uncategorized"))) ("blog.regehr.org" . "https://blog.regehr.org/?p=2265") #s(elfeed-entry ("blog.regehr.org" . "https://blog.regehr.org/?p=2265") "Formal-Methods-Based Bugfinding for LLVM’s AArch64 Backend" "https://blog.regehr.org/archives/2265" 1654527482.0 #s(elfeed-ref "7587433f24a086e2d849d5daa3347b2943124d37") html nil (c dev unread) "https://blog.regehr.org/feed" (:authors ((:name "regehr")) :categories ("Compilers" "Computer Science" "Software Correctness"))) ("blog.regehr.org" . "https://blog.regehr.org/?p=2148") #s(elfeed-entry ("blog.regehr.org" . "https://blog.regehr.org/?p=2148") "High-Throughput, Formal-Methods-Assisted Fuzzing for LLVM" "https://blog.regehr.org/archives/2148" 1654009001.0 #s(elfeed-ref "a5a0f8aa72790e7e92dac1c4761e345260b06c69") html nil (c dev unread) "https://blog.regehr.org/feed" (:authors ((:name "regehr")) :categories ("Uncategorized"))) ("blog.regehr.org" . "https://blog.regehr.org/?p=2173") #s(elfeed-entry ("blog.regehr.org" . "https://blog.regehr.org/?p=2173") "A Close Look at a Spinlock" "https://blog.regehr.org/archives/2173" 1636228626.0 #s(elfeed-ref "61918c4deb19ccc310e6a66eac771870550cb1f2") html nil (c dev unread) "https://blog.regehr.org/feed" (:authors ((:name "regehr")) :categories ("Uncategorized"))) ("blog.regehr.org" . "https://blog.regehr.org/?p=2109") #s(elfeed-entry ("blog.regehr.org" . "https://blog.regehr.org/?p=2109") "llvm-reduce" "https://blog.regehr.org/archives/2109" 1620925080.0 #s(elfeed-ref "8d83c0b2b5db74f495244d57630c5a4f9312ea64") html nil (c dev unread) "https://blog.regehr.org/feed" (:authors ((:name "regehr")) :categories ("Uncategorized"))) ("blog.regehr.org" . "https://blog.regehr.org/?p=2037") #s(elfeed-entry ("blog.regehr.org" . "https://blog.regehr.org/?p=2037") "Responsible and Effective Bugfinding" "https://blog.regehr.org/archives/2037" 1597689403.0 #s(elfeed-ref "a19631c61ba4946ae713676e010ec9e9ed8f5379") html nil (c dev unread) "https://blog.regehr.org/feed" (:authors ((:name "regehr")) :categories ("Computer Science" "Software Correctness"))) ("blog.regehr.org" . "https://blog.regehr.org/?p=1837") #s(elfeed-entry ("blog.regehr.org" . "https://blog.regehr.org/?p=1837") "Alive2 Part 3: Things You Can and Can’t Do with Undef in LLVM" "https://blog.regehr.org/archives/1837" 1596227585.0 #s(elfeed-ref "cf375dbac58d5fe03c274f2bc7979d148eebd3f7") html nil (c dev unread) "https://blog.regehr.org/feed" (:authors ((:name "regehr")) :categories ("Compilers" "Computer Science" "Software Correctness"))) ("blog.regehr.org" . "https://blog.regehr.org/?p=1832") #s(elfeed-entry ("blog.regehr.org" . "https://blog.regehr.org/?p=1832") "The Gods Pocket Peak Trail" "https://blog.regehr.org/archives/1832" 1595518861.0 #s(elfeed-ref "c7d7c0b3555453f6b754e40625b3f6037bb4860e") html nil (c dev unread) "https://blog.regehr.org/feed" (:authors ((:name "regehr")) :categories ("Outdoors"))) ("feeds.feedburner.com" . "https://symfony.com/blog/a-week-of-symfony-975-september-1-7-2025?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") #s(elfeed-entry ("feeds.feedburner.com" . "https://symfony.com/blog/a-week-of-symfony-975-september-1-7-2025?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") "A Week of Symfony #975 (September 1–7, 2025)" "https://symfony.com/blog/a-week-of-symfony-975-september-1-7-2025?utm_source=Symfony%20Blog%20Feed&utm_medium=feed" 1757229780.0 #s(elfeed-ref "5a224aabc0b87dbef44de7c34ff0f0179b66b6de") html nil (dev unread web) "http://feeds.feedburner.com/symfony/blog" (:authors ((:name " Javier Eguiluz ")))) ("feeds.feedburner.com" . "https://symfony.com/blog/symfony-to-provide-the-official-mcp-sdk?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") #s(elfeed-entry ("feeds.feedburner.com" . "https://symfony.com/blog/symfony-to-provide-the-official-mcp-sdk?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") "Symfony to Provide the Official MCP SDK" "https://symfony.com/blog/symfony-to-provide-the-official-mcp-sdk?utm_source=Symfony%20Blog%20Feed&utm_medium=feed" 1757062860.0 #s(elfeed-ref "d9bcc6e35f248e9fa693f5a7389482616192783b") html nil (dev unread web) "http://feeds.feedburner.com/symfony/blog" (:authors ((:name " Christopher Hertel ")))) ("feeds.feedburner.com" . "https://symfony.com/blog/celebrating-ryan-weaver-through-his-talks?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") #s(elfeed-entry ("feeds.feedburner.com" . "https://symfony.com/blog/celebrating-ryan-weaver-through-his-talks?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") "Celebrating Ryan Weaver Through His Talks" "https://symfony.com/blog/celebrating-ryan-weaver-through-his-talks?utm_source=Symfony%20Blog%20Feed&utm_medium=feed" 1757055360.0 #s(elfeed-ref "eab0054f3fc09c34e2b7e2de69229992afc6e2df") html nil (dev unread web) "http://feeds.feedburner.com/symfony/blog" (:authors ((:name " Javier Eguiluz ")))) ("feeds.feedburner.com" . "https://symfony.com/blog/symfonycon-amsterdam-2025-where-have-the-women-of-tech-history-gone-2-0?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") #s(elfeed-entry ("feeds.feedburner.com" . "https://symfony.com/blog/symfonycon-amsterdam-2025-where-have-the-women-of-tech-history-gone-2-0?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") "SymfonyCon Amsterdam 2025: Where have the women of tech history gone? 2.0" "https://symfony.com/blog/symfonycon-amsterdam-2025-where-have-the-women-of-tech-history-gone-2-0?utm_source=Symfony%20Blog%20Feed&utm_medium=feed" 1757000700.0 #s(elfeed-ref "0b0c50da3c65f4ad4e3d1bb0420447f1c6d67311") html nil (dev unread web) "http://feeds.feedburner.com/symfony/blog" (:authors ((:name " Eloïse Charrier ")))) ("feeds.feedburner.com" . "https://symfony.com/blog/symfonycon-amsterdam-2025-make-your-ai-useful-with-mcp?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") #s(elfeed-entry ("feeds.feedburner.com" . "https://symfony.com/blog/symfonycon-amsterdam-2025-make-your-ai-useful-with-mcp?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") "SymfonyCon Amsterdam 2025: Make your AI useful with MCP" "https://symfony.com/blog/symfonycon-amsterdam-2025-make-your-ai-useful-with-mcp?utm_source=Symfony%20Blog%20Feed&utm_medium=feed" 1756894500.0 #s(elfeed-ref "33d6c9c64e226dc40ed358e7297b4ba2ea19aeb5") html nil (dev unread web) "http://feeds.feedburner.com/symfony/blog" (:authors ((:name " Eloïse Charrier ")))) ("lwn.net" . "https://lwn.net/Articles/1036465/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1036465/") "[$] Rug pulls, forks, and open-source feudalism" "https://lwn.net/Articles/1036465/" 1757083687.0 #s(elfeed-ref "04152b77d69660f022703d34081f76c27688455d") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "corbet")))) ("lwn.net" . "https://lwn.net/Articles/1036907/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1036907/") "Security updates for Friday" "https://lwn.net/Articles/1036907/" 1757081972.0 #s(elfeed-ref "dd2162593e1d73683930997567e8d5ed9e9e187b") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "daroc")))) ("lwn.net" . "https://lwn.net/Articles/1036856/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1036856/") "No more 32-bit Firefox support" "https://lwn.net/Articles/1036856/" 1757080282.0 #s(elfeed-ref "915640957fa95a801a55423a26b8bb32b731d221") html nil (linux) "https://lwn.net/headlines/rss" (:authors ((:name "corbet")))) ("lwn.net" . "https://lwn.net/Articles/1036785/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1036785/") "Seven new stable kernels" "https://lwn.net/Articles/1036785/" 1756999116.0 #s(elfeed-ref "175017bfcb5975ece66ced8e2eee79440a575cd4") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "jake")))) ("lwn.net" . "https://lwn.net/Articles/1036222/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1036222/") "[$] The dependency tracker for complex deadlock detection" "https://lwn.net/Articles/1036222/" 1756996468.0 #s(elfeed-ref "8253e681bfdd367548f22d52d25160e87e1297be") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "corbet")))) ("lwn.net" . "https://lwn.net/Articles/1036733/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1036733/") "Security updates for Thursday" "https://lwn.net/Articles/1036733/" 1756994870.0 #s(elfeed-ref "aa69d3b05fd3ba926ca15a5d7bbaf41a14d8353c") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "jake")))) ("lwn.net" . "https://lwn.net/Articles/1035384/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1035384/") "[$] LWN.net Weekly Edition for September 4, 2025" "https://lwn.net/Articles/1035384/" 1756944294.0 #s(elfeed-ref "503a719afae69344d2233b338340049784470f70") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "corbet")))) ("lwn.net" . "https://lwn.net/Articles/1036635/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1036635/") "Home Assistant 2025.9 released" "https://lwn.net/Articles/1036635/" 1756926125.0 #s(elfeed-ref "501ce8c2b1e2c02adfd97324534d36ee77b20803") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "corbet")))) ("lwn.net" . "https://lwn.net/Articles/1036625/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1036625/") "Niri 25.08 released" "https://lwn.net/Articles/1036625/" 1756917977.0 #s(elfeed-ref "a1f4711811936318e14f49d54b96e8395481f681") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "jzb")))) ("lwn.net" . "https://lwn.net/Articles/1036624/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1036624/") "Linux From Scratch 12.4 released" "https://lwn.net/Articles/1036624/" 1756916774.0 #s(elfeed-ref "3a81d4a1cf4d7371bbfa7f1f9c1f883f29a937d7") html nil (linux) "https://lwn.net/headlines/rss" (:authors ((:name "jzb")))) ("lwn.net" . "https://lwn.net/Articles/1034603/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1034603/") "[$] Tracking trust with Rust in the kernel" "https://lwn.net/Articles/1034603/" 1756916107.0 #s(elfeed-ref "a6f86c023a781e104262d7c28e33346aefd25070") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "daroc")))) ("lwn.net" . "https://lwn.net/Articles/1035169/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1035169/") "Announcing the Rust Innovation Lab" "https://lwn.net/Articles/1035169/" 1756916081.0 #s(elfeed-ref "729c1737213331cc3b065afda17aa9348472d284") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "daroc")))) ("lwn.net" . "https://lwn.net/Articles/1036569/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1036569/") "New ELF specification for public review" "https://lwn.net/Articles/1036569/" 1756907177.0 #s(elfeed-ref "21f0af29beb92f45764a8f70cd4c99594b612d2c") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "jzb")))) ("lwn.net" . "https://lwn.net/Articles/1036567/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1036567/") "Security updates for Wednesday" "https://lwn.net/Articles/1036567/" 1756904600.0 #s(elfeed-ref "be11fc3565b418f614492d088b71beb7a3d8c635") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "jzb")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=13252") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=13252") "Irreal: Hacking Emacs File Completion" "https://irreal.org/blog/?p=13252" 1757167601.0 #s(elfeed-ref "c2df06f3ebceb11f7710d5d4e328b3aa78c88cb3") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Irreal" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "https://emacs.dyerdwelling.family/emacs/20250905100614-emacs--customizing-emacs-completion-from-fidos-fuzzy-matching-to-literal-substring-search/") #s(elfeed-entry ("planet.emacslife.com" . "https://emacs.dyerdwelling.family/emacs/20250905100614-emacs--customizing-emacs-completion-from-fidos-fuzzy-matching-to-literal-substring-search/") "James Dyer: Customizing Emacs Completion: From Fido's Fuzzy Matching to Literal Substring" "https://emacs.dyerdwelling.family/emacs/20250905100614-emacs--customizing-emacs-completion-from-fidos-fuzzy-matching-to-literal-substring-search/" 1757063160.0 #s(elfeed-ref "e4d927a9a6fec3f717816a42e6fc7c8b1be86366") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "James Dyer" :uri "https://emacs.dyerdwelling.family/tags/emacs/")))) ("planet.emacslife.com" . "https://taingram.org/blog/minimal-debian-texlive.html") #s(elfeed-entry ("planet.emacslife.com" . "https://taingram.org/blog/minimal-debian-texlive.html") "Thomas Ingram: Minimal Debian 13 and LaTeX Install" "https://taingram.org/blog/minimal-debian-texlive.html" 1757044800.0 #s(elfeed-ref "f32651db33f11af1de1296de2c5f4bcb04f1b31e") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Thomas Ingram" :uri "https://taingram.org/")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=13248") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=13248") "Irreal: The McPhee Method" "https://irreal.org/blog/?p=13248" 1757000930.0 #s(elfeed-ref "ff8e28d5472f32c15d95d438b62254a930771183") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Irreal" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "https://kelar.org/~bandali/2025/09/03/prot-asks.html") #s(elfeed-entry ("planet.emacslife.com" . "https://kelar.org/~bandali/2025/09/03/prot-asks.html") "Amin Bandali: Prot Asks me about EmacsConf, Debian, GNU, Internet Archive, and Canada" "https://kelar.org/~bandali/2025/09/03/prot-asks.html" 1756940338.0 #s(elfeed-ref "a87a8b7c52758b8785b1a768329858746fcd8935") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Amin Bandali" :uri "https://kelar.org/~bandali/")))) ("planet.emacslife.com" . "https://rahuljuliato.com/posts/switch-git-status-buffer") #s(elfeed-entry ("planet.emacslife.com" . "https://rahuljuliato.com/posts/switch-git-status-buffer") "Rahul Juliato: Quickly switching between git status files buffers in Emacs" "https://rahuljuliato.com/posts/switch-git-status-buffer" 1756930260.0 #s(elfeed-ref "1c71d3a58a471a3fdb76270ac3953ef11d88d836") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Rahul Juliato" :uri "https://rahuljuliato.com")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=13245") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=13245") "Irreal: Diverted Mode" "https://irreal.org/blog/?p=13245" 1756914077.0 #s(elfeed-ref "3519310326e0132721ab0b6f1ed2752d114981b3") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Irreal" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "https://protesilaos.com/codelog/2025-09-03-prot-asks-amin-emacsconf-gnu-debian-internet-archive-canada/") #s(elfeed-entry ("planet.emacslife.com" . "https://protesilaos.com/codelog/2025-09-03-prot-asks-amin-emacsconf-gnu-debian-internet-archive-canada/") "Protesilaos Stavrou: Prot Asks: Amin about EmacsConf, Debian, GNU, Internet Archive, and Canada" "https://protesilaos.com/codelog/2025-09-03-prot-asks-amin-emacsconf-gnu-debian-internet-archive-canada/" 1756857600.0 #s(elfeed-ref "ec7b4c88e450b442c71035454110349234ae1aa0") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Protesilaos Stavrou" :uri "https://protesilaos.com/codelog")))) ("planet.emacslife.com" . "https://kelar.org/~bandali/2025/08/31/activities.html") #s(elfeed-entry ("planet.emacslife.com" . "https://kelar.org/~bandali/2025/08/31/activities.html") "Amin Bandali: Free software activities in August 2025" "https://kelar.org/~bandali/2025/08/31/activities.html" 1756683851.0 #s(elfeed-ref "c079c73f1360fd69de19db1ba1e37f515e5fff54") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Amin Bandali" :uri "https://kelar.org/~bandali/")))) ("planet.emacslife.com" . "https://sdf.org/~pkal/blog/emacs/pitch.html") #s(elfeed-entry ("planet.emacslife.com" . "https://sdf.org/~pkal/blog/emacs/pitch.html") "Philip Kaludercic: An “Elevator Pitch” for Emacs: Commentary Edition" "https://sdf.org/~pkal/blog/emacs/pitch.html" 1756675933.0 #s(elfeed-ref "32287b20c9829310d33e7629129368aff193780f") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Philip Kaludercic")))) ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/switch-git-status-buffer") #s(elfeed-entry ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/switch-git-status-buffer") "Quickly switching between git status files buffers in Emacs" "https://rahuljuliato.com/posts/switch-git-status-buffer" 1756930260.0 #s(elfeed-ref "58dff4ba3e42d31a9a8fede982c90e0e8289b64e") html nil (dev emacs mustread unread) "https://www.rahuljuliato.com/rss.xml" nil) ("blog.rust-lang.org" . "https://blog.rust-lang.org/2025/09/03/welcoming-the-rust-innovation-lab/") #s(elfeed-entry ("blog.rust-lang.org" . "https://blog.rust-lang.org/2025/09/03/welcoming-the-rust-innovation-lab/") "Welcoming the Rust Innovation Lab" "https://blog.rust-lang.org/2025/09/03/welcoming-the-rust-innovation-lab/" 1756857600.0 #s(elfeed-ref "39f395330d88b85636e2351a99f892b9db66a20d") html nil (dev systems unread) "https://blog.rust-lang.org/feed.xml" (:authors ((:name "Carol Nichols")))) ("irreal.org" . "https://irreal.org/blog/?p=13252") #s(elfeed-entry ("irreal.org" . "https://irreal.org/blog/?p=13252") "Hacking Emacs File Completion" "https://irreal.org/blog/?p=13252" 1757167601.0 #s(elfeed-ref "b694985aef67d51ab43efec0a7d60feda7ff4232") html nil (dev emacs mustread unread) "https://irreal.org/blog/?feed=rss2" (:authors ((:name "jcs")) :categories ("General" "Emacs"))) ("irreal.org" . "https://irreal.org/blog/?p=13250") #s(elfeed-entry ("irreal.org" . "https://irreal.org/blog/?p=13250") "🥩 Red Meat Friday: Can We Stop Acting Like 5 Year Olds" "https://irreal.org/blog/?p=13250" 1757090208.0 #s(elfeed-ref "f2882c3903d66478dffe787a3131bed73345f3dd") html nil (dev emacs mustread unread) "https://irreal.org/blog/?feed=rss2" (:authors ((:name "jcs")) :categories ("General" "RMF" "Tech"))) ("irreal.org" . "https://irreal.org/blog/?p=13248") #s(elfeed-entry ("irreal.org" . "https://irreal.org/blog/?p=13248") "The McPhee Method" "https://irreal.org/blog/?p=13248" 1757000930.0 #s(elfeed-ref "94c71b3e7bf71baf00690669015ec5f7e2f519e6") html nil (dev emacs mustread unread) "https://irreal.org/blog/?feed=rss2" (:authors ((:name "jcs")) :categories ("General" "Emacs" "Writing"))) ("irreal.org" . "https://irreal.org/blog/?p=13245") #s(elfeed-entry ("irreal.org" . "https://irreal.org/blog/?p=13245") "Diverted Mode" "https://irreal.org/blog/?p=13245" 1756914077.0 #s(elfeed-ref "c692876c44e805d6b1ac7dd4421c33587d626530") html nil (dev emacs mustread unread) "https://irreal.org/blog/?feed=rss2" (:authors ((:name "jcs")) :categories ("General" "Emacs"))) ("gustedt.wordpress.com" . "http://gustedt.wordpress.com/?p=4564") #s(elfeed-entry ("gustedt.wordpress.com" . "http://gustedt.wordpress.com/?p=4564") "Modern C, C23 edition, now in print" "https://gustedt.wordpress.com/2025/09/05/modern-c-c23-edition-now-in-print/" 1757065360.0 #s(elfeed-ref "141ad8ad0bd28f05e6ba4ad1f4985f37546c637d") html nil (c dev) "https://gustedt.wordpress.com/feed/" (:authors ((:name "Jens Gustedt")) :categories ("C23" "Modern C"))) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-09-07-prot-asks-greg-emacs-android-fishing-dogs-pennsylvania/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-09-07-prot-asks-greg-emacs-android-fishing-dogs-pennsylvania/") "Prot Asks: Greg about Emacs, Android, dogs, fishing, cycling, and Pennsylvania" "https://protesilaos.com/codelog/2025-09-07-prot-asks-greg-emacs-android-fishing-dogs-pennsylvania/" 1757203200.0 #s(elfeed-ref "3acba8cea02cf5417ff95cf0fd1250e5969e48e4") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/greek/2025-09-05-when-your-country-is-a-theme-park/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/greek/2025-09-05-when-your-country-is-a-theme-park/") "Όταν η πατρίδα σου είναι θεματικό πάρκο" "https://protesilaos.com/greek/2025-09-05-when-your-country-is-a-theme-park/" 1757030400.0 #s(elfeed-ref "af4f09b0202024b0130fff066d029e2883573edb") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-09-03-prot-asks-amin-emacsconf-gnu-debian-internet-archive-canada/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-09-03-prot-asks-amin-emacsconf-gnu-debian-internet-archive-canada/") "Prot Asks: Amin about EmacsConf, Debian, GNU, Internet Archive, and Canada" "https://protesilaos.com/codelog/2025-09-03-prot-asks-amin-emacsconf-gnu-debian-internet-archive-canada/" 1756857600.0 #s(elfeed-ref "eb9fc63ff0d0da468c89f995b7ba74fb1c298326") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/the-angels-and-demons-of-nondeterminism/") #s(elfeed-entry ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/the-angels-and-demons-of-nondeterminism/") "The Angels and Demons of Nondeterminism" "https://buttondown.com/hillelwayne/archive/the-angels-and-demons-of-nondeterminism/" 1756994400.0 #s(elfeed-ref "2ca980bc5b63a9f377c71fc03e5df583ca3b86e2") html nil (dev theory unread) "https://buttondown.email/hillelwayne/rss" nil) ("protesilaos.com" . "https://protesilaos.com/news/2025-09-15-selfie-project/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/news/2025-09-15-selfie-project/") "Thus begins the selfie project" "https://protesilaos.com/news/2025-09-15-selfie-project/" 1757894400.0 #s(elfeed-ref "743bf58396da8aba0b2572f79ba2b227ae300d45") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/poems/2025-09-14-find-me/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/poems/2025-09-14-find-me/") "Poem: Find me" "https://protesilaos.com/poems/2025-09-14-find-me/" 1757808000.0 #s(elfeed-ref "bd07e6611e2748fb48a2e39681066b7d0e31e6d5") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-09-11-prot-asks-port19-rsi-keyboard-ergonomics-dictation-geriatric-care/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-09-11-prot-asks-port19-rsi-keyboard-ergonomics-dictation-geriatric-care/") "Prot Asks: port19 about RSI, keyboard ergonomics, dictation tools, and geriatric nursing" "https://protesilaos.com/codelog/2025-09-11-prot-asks-port19-rsi-keyboard-ergonomics-dictation-geriatric-care/" 1757548800.0 #s(elfeed-ref "6f4d1416071cfca4b18a21828dfa2db6d8447c96") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/poems/2025-09-10-the-unexpected/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/poems/2025-09-10-the-unexpected/") "Poem: The unexpected" "https://protesilaos.com/poems/2025-09-10-the-unexpected/" 1757462400.0 #s(elfeed-ref "67c0d2e8cdb74da50e7870a61f5f4280be4aa4e8") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/commentary/2025-09-08-blood-moon-my-place-in-the-world/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/commentary/2025-09-08-blood-moon-my-place-in-the-world/") "The blood moon and my place in the world" "https://protesilaos.com/commentary/2025-09-08-blood-moon-my-place-in-the-world/" 1757289600.0 #s(elfeed-ref "eda64087fca64c3db2cd6a50d7ab7bac04758d5c") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-09-07-emacs-show-font-1-0-0/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-09-07-emacs-show-font-1-0-0/") "Emacs: show-font version 1.0.0" "https://protesilaos.com/codelog/2025-09-07-emacs-show-font-1-0-0/" 1757203200.0 #s(elfeed-ref "56429258eefc3d2f6d961604142bbe3224384dda") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("lwn.net" . "https://lwn.net/Articles/1038074/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1038074/") "Kernel prepatch 6.17-rc6" "https://lwn.net/Articles/1038074/" 1757892405.0 #s(elfeed-ref "c7b4c4edd17b99e972aebe1cda82b5685403db17") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "corbet")))) ("lwn.net" . "https://lwn.net/Articles/1036908/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1036908/") "[$] Creating a healthy kernel subsystem community" "https://lwn.net/Articles/1036908/" 1757692251.0 #s(elfeed-ref "691b7a6fa78a44c967a90acea87c002a66cd4ea7") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "jake")))) ("lwn.net" . "https://lwn.net/Articles/1037919/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1037919/") "Security updates for Friday" "https://lwn.net/Articles/1037919/" 1757685250.0 #s(elfeed-ref "99a9a6ba6edbbbb94c3cbb1b198c78f98d37f958") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "daroc")))) ("lwn.net" . "https://lwn.net/Articles/1037788/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1037788/") "Six stable kernels patching the VMScape Spectre variant" "https://lwn.net/Articles/1037788/" 1757609189.0 #s(elfeed-ref "8f0bcdcda9ba6d6d84834dc330a2ced035d996c1") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "jake")))) ("lwn.net" . "https://lwn.net/Articles/1037069/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1037069/") "[$] A policy for Link tags" "https://lwn.net/Articles/1037069/" 1757603769.0 #s(elfeed-ref "a0863f2d198de60ea21cfdbf69acb3cedd77fddd") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "corbet")))) ("lwn.net" . "https://lwn.net/Articles/1037777/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1037777/") "Security updates for Thursday" "https://lwn.net/Articles/1037777/" 1757603530.0 #s(elfeed-ref "63c3c752605ca32f4e02436d66fad508a4bc7d94") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "jake")))) ("lwn.net" . "https://lwn.net/Articles/1037703/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1037703/") "How FOSS Projects Handle Legal Takedown Requests (F-Droid)" "https://lwn.net/Articles/1037703/" 1757601244.0 #s(elfeed-ref "3e42577c60752771388e5f32f21afaf3e94eb3e1") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "corbet")))) ("lwn.net" . "https://lwn.net/Articles/1036683/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1036683/") "[$] LWN.net Weekly Edition for September 11, 2025" "https://lwn.net/Articles/1036683/" 1757549963.0 #s(elfeed-ref "c3f90738dada365e498e405cec59910449950671") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "corbet")))) ("lwn.net" . "https://lwn.net/Articles/1034811/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1034811/") "[$] How many ways are there to configure the Linux kernel?" "https://lwn.net/Articles/1034811/" 1757520627.0 #s(elfeed-ref "4219252cba74c6e9f103d807489bfe58a75533f0") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "daroc")))) ("lwn.net" . "https://lwn.net/Articles/1037496/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1037496/") "OpenSUSE disables bcachefs" "https://lwn.net/Articles/1037496/" 1757515890.0 #s(elfeed-ref "4c6bf6dfefdbde43331ad29fafd26d37c3d8a839") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "corbet")))) ("lwn.net" . "https://lwn.net/Articles/1037166/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1037166/") "[$] KDE launches its own distribution (again)" "https://lwn.net/Articles/1037166/" 1757513554.0 #s(elfeed-ref "00de763781ff5abfe11fe9a0935ad7447d8d9428") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "jzb")))) ("lwn.net" . "https://lwn.net/Articles/1037477/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1037477/") "Three decades in kernelland" "https://lwn.net/Articles/1037477/" 1757513000.0 #s(elfeed-ref "e854cc97a96e8f68ba40241d7a2f10ce65152f7f") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "jzb")))) ("lwn.net" . "https://lwn.net/Articles/1037471/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1037471/") "Security updates for Wednesday" "https://lwn.net/Articles/1037471/" 1757509542.0 #s(elfeed-ref "823b03f25fa2bdc1bbd0c44d8f7cfc5e4d339d31") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "jzb")))) ("lwn.net" . "https://lwn.net/Articles/1037391/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1037391/") "A path toward removal of kernel high-memory support" "https://lwn.net/Articles/1037391/" 1757454792.0 #s(elfeed-ref "6560ffba1896032bac97a6f7e8153996263f24e5") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "corbet")))) ("lwn.net" . "https://lwn.net/Articles/1037359/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1037359/") "A new pile of stable kernels" "https://lwn.net/Articles/1037359/" 1757439046.0 #s(elfeed-ref "d20277ae5cf55aefc5318fdac92de7632593aeba") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "corbet")))) ("irreal.org" . "https://irreal.org/blog/?p=13270") #s(elfeed-entry ("irreal.org" . "https://irreal.org/blog/?p=13270") "How To Reveal You’re An Emacs User Without Saying So" "https://irreal.org/blog/?p=13270" 1757862162.0 #s(elfeed-ref "58e79f4c649565490bc4d83aab9ece90376a78d4") html nil (dev emacs mustread unread) "https://irreal.org/blog/?feed=rss2" (:authors ((:name "jcs")) :categories ("General" "Emacs"))) ("irreal.org" . "https://irreal.org/blog/?p=13268") #s(elfeed-entry ("irreal.org" . "https://irreal.org/blog/?p=13268") "The Brilliance of UTF-8" "https://irreal.org/blog/?p=13268" 1757782233.0 #s(elfeed-ref "81d793e710441bbb297ea3db79fc0a38fcad04c1") html nil (dev emacs mustread unread) "https://irreal.org/blog/?feed=rss2" (:authors ((:name "jcs")) :categories ("General" "Tech"))) ("irreal.org" . "https://irreal.org/blog/?p=13266") #s(elfeed-entry ("irreal.org" . "https://irreal.org/blog/?p=13266") "Bell Labs" "https://irreal.org/blog/?p=13266" 1757697908.0 #s(elfeed-ref "4bba85ee321958a2ac90673cf107e7e052b12e46") html nil (dev emacs mustread unread) "https://irreal.org/blog/?feed=rss2" (:authors ((:name "jcs")) :categories ("General" "Tech"))) ("irreal.org" . "https://irreal.org/blog/?p=13263") #s(elfeed-entry ("irreal.org" . "https://irreal.org/blog/?p=13263") "Semantic Line Breaks" "https://irreal.org/blog/?p=13263" 1757606889.0 #s(elfeed-ref "4dc9d215c5eacc1bd40fc4a678378d6eba3983e4") html nil (dev emacs mustread unread) "https://irreal.org/blog/?feed=rss2" (:authors ((:name "jcs")) :categories ("General" "Emacs" "Org-mode" "Writing"))) ("irreal.org" . "https://irreal.org/blog/?p=13261") #s(elfeed-entry ("irreal.org" . "https://irreal.org/blog/?p=13261") "Numeri" "https://irreal.org/blog/?p=13261" 1757519252.0 #s(elfeed-ref "2bf18acee25d59592096861933b43b8ccd39a29e") html nil (dev emacs mustread unread) "https://irreal.org/blog/?feed=rss2" (:authors ((:name "jcs")) :categories ("General" "Emacs"))) ("irreal.org" . "https://irreal.org/blog/?p=13259") #s(elfeed-entry ("irreal.org" . "https://irreal.org/blog/?p=13259") "Obscure Emacs Packages" "https://irreal.org/blog/?p=13259" 1757436225.0 #s(elfeed-ref "aa4d550af60c7c7c7541bb58e99e074cb7942255") html nil (dev emacs mustread unread) "https://irreal.org/blog/?feed=rss2" (:authors ((:name "jcs")) :categories ("General" "Emacs"))) ("irreal.org" . "https://irreal.org/blog/?p=13257") #s(elfeed-entry ("irreal.org" . "https://irreal.org/blog/?p=13257") "Emacs Bankruptcy" "https://irreal.org/blog/?p=13257" 1757346847.0 #s(elfeed-ref "494f43aa085c2804fbd5987e44648dad950e1176") html nil (dev emacs mustread unread) "https://irreal.org/blog/?feed=rss2" (:authors ((:name "jcs")) :categories ("General" "Emacs"))) ("irreal.org" . "https://irreal.org/blog/?p=13255") #s(elfeed-entry ("irreal.org" . "https://irreal.org/blog/?p=13255") "Must Have Emacs Packages In 2025" "https://irreal.org/blog/?p=13255" 1757262981.0 #s(elfeed-ref "f0880c1ef8ac9bc6a32b4ea8ef419e2f71db0478") html nil (dev emacs mustread unread) "https://irreal.org/blog/?feed=rss2" (:authors ((:name "jcs")) :categories ("General" "Emacs"))) ("planet.emacslife.com" . "https://takeonrules.com/2025/09/14/dynamic-org-mode-block-to-list-books-read/") #s(elfeed-entry ("planet.emacslife.com" . "https://takeonrules.com/2025/09/14/dynamic-org-mode-block-to-list-books-read/") "Jeremy Friesen: Dynamic Org-Mode Block to List Books Read" "https://takeonrules.com/2025/09/14/dynamic-org-mode-block-to-list-books-read/" 1757881233.0 #s(elfeed-ref "5f2ab2a93ab28a35bf8e86285d3463394aba295f") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Jeremy Friesen" :uri "https://takeonrules.com/")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=13270") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=13270") "Irreal: How To Reveal You’re An Emacs User Without Saying So" "https://irreal.org/blog/?p=13270" 1757862162.0 #s(elfeed-ref "0fabbc8c5c28777cf92e785a9ecc0d32b875a837") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Irreal" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "https://xenodium.com/introducing-acpel") #s(elfeed-entry ("planet.emacslife.com" . "https://xenodium.com/introducing-acpel") "Alvaro Ramirez: Introducing acp.el" "https://xenodium.com/introducing-acpel" 1757808000.0 #s(elfeed-ref "4d5adcf03d26c956951253b29b4357ae86c46883") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Alvaro Ramirez" :uri "https://xenodium.com")))) ("planet.emacslife.com" . "https://www.hristos.co/blog/linux-gaming-fallout1/") #s(elfeed-entry ("planet.emacslife.com" . "https://www.hristos.co/blog/linux-gaming-fallout1/") "Hristos N. Triantafillou: Linux Gaming: Fallout 1" "https://www.hristos.co/blog/linux-gaming-fallout1/" 1757808000.0 #s(elfeed-ref "365f0c567372f94b0a4c7409d82eb1fe59afd436") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Hristos N. Triantafillou")))) ("planet.emacslife.com" . "https://sachachua.com/blog/2025/09/emacs-and-dom-el-quick-notes-on-parsing-html-and-turning-doms-back-into-html/") #s(elfeed-entry ("planet.emacslife.com" . "https://sachachua.com/blog/2025/09/emacs-and-dom-el-quick-notes-on-parsing-html-and-turning-doms-back-into-html/") "Sacha Chua: Emacs and dom.el: quick notes on parsing HTML and turning DOMs back into HTML" "https://sachachua.com/blog/2025/09/emacs-and-dom-el-quick-notes-on-parsing-html-and-turning-doms-back-into-html/" 1757776377.0 #s(elfeed-ref "8367bcdba685b24a8984f5372cce7067cb8a286d") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Sacha Chua" :uri "https://sachachua.com/blog/category/emacs/feed/index.xml")))) ("planet.emacslife.com" . "/posts/tab-sets/") #s(elfeed-entry ("planet.emacslife.com" . "/posts/tab-sets/") "localauthor: Managing Emacs Tabs with 'tab-sets.el'" "https://planet.emacslife.com/posts/tab-sets/" 1757717580.0 #s(elfeed-ref "63c7d24f715c7b67d45eeae2459c77fbda3ab82a") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "localauthor" :uri "/categories/emacs/")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=13263") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=13263") "Irreal: Semantic Line Breaks" "https://irreal.org/blog/?p=13263" 1757606889.0 #s(elfeed-ref "baba36f45b64f164bb2d5b7c68800b66089030b8") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Irreal" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "https://protesilaos.com/codelog/2025-09-11-prot-asks-port19-rsi-keyboard-ergonomics-dictation-geriatric-care/") #s(elfeed-entry ("planet.emacslife.com" . "https://protesilaos.com/codelog/2025-09-11-prot-asks-port19-rsi-keyboard-ergonomics-dictation-geriatric-care/") "Protesilaos Stavrou: Prot Asks: port19 about RSI, keyboard ergonomics, dictation tools, and geriatric nursing" "https://protesilaos.com/codelog/2025-09-11-prot-asks-port19-rsi-keyboard-ergonomics-dictation-geriatric-care/" 1757548800.0 #s(elfeed-ref "5cbe655dc24378058921a05cc55024f2d54b2680") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Protesilaos Stavrou" :uri "https://protesilaos.com/codelog")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=13261") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=13261") "Irreal: Numeri" "https://irreal.org/blog/?p=13261" 1757519252.0 #s(elfeed-ref "a53c1f272bc8f7d9d430fc171ec17c1cd57f8828") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Irreal" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "https://emacs.dyerdwelling.family/emacs/20250826103741-emacs--debugging-software-breakage-with-git-stash-and-emacs/") #s(elfeed-entry ("planet.emacslife.com" . "https://emacs.dyerdwelling.family/emacs/20250826103741-emacs--debugging-software-breakage-with-git-stash-and-emacs/") "James Dyer: Debugging Software Breakage with Git Stash and Emacs" "https://emacs.dyerdwelling.family/emacs/20250826103741-emacs--debugging-software-breakage-with-git-stash-and-emacs/" 1757487600.0 #s(elfeed-ref "3c86a83138f59230c11835dcd8f7300c1bc26cc4") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "James Dyer" :uri "https://emacs.dyerdwelling.family/tags/emacs/")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=13259") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=13259") "Irreal: Obscure Emacs Packages" "https://irreal.org/blog/?p=13259" 1757436225.0 #s(elfeed-ref "466a94617f59aae9191218e7d1232d2d01635e23") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Irreal" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "https://xenodium.com/so-you-want-acp-for-emacs") #s(elfeed-entry ("planet.emacslife.com" . "https://xenodium.com/so-you-want-acp-for-emacs") "Alvaro Ramirez: So you want ACP (Agent Client Protocol) for Emacs?" "https://xenodium.com/so-you-want-acp-for-emacs" 1757376000.0 #s(elfeed-ref "59ea20110300b064a405ad5292ff483e7b2fde19") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Alvaro Ramirez" :uri "https://xenodium.com")))) ("planet.emacslife.com" . "https://flandrew.srht.site/listful/sw-emacs-mondo.html") #s(elfeed-entry ("planet.emacslife.com" . "https://flandrew.srht.site/listful/sw-emacs-mondo.html") "Listful Andrew: Mondo — World's scripts, languages, places in any language (Emacs package)" "https://flandrew.srht.site/listful/sw-emacs-mondo.html" 1757374800.0 #s(elfeed-ref "6677ab10224f4e7369d9e40fad784e34fab67bb3") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Listful Andrew" :uri "https://flandrew.srht.site/listful")))) ("planet.emacslife.com" . "https://flandrew.srht.site/listful/sw-emacs-vexil.html") #s(elfeed-entry ("planet.emacslife.com" . "https://flandrew.srht.site/listful/sw-emacs-vexil.html") "Listful Andrew: Vexil — Create flags of countries and subdivisions (Emacs package)" "https://flandrew.srht.site/listful/sw-emacs-vexil.html" 1757374200.0 #s(elfeed-ref "1981324ec0ffa8e8df11f493827811bdd22c1f0a") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Listful Andrew" :uri "https://flandrew.srht.site/listful")))) ("planet.emacslife.com" . "https://mbork.pl/2025-09-08_Emacs_Artist_clock") #s(elfeed-entry ("planet.emacslife.com" . "https://mbork.pl/2025-09-08_Emacs_Artist_clock") "Marcin Borkowski: Emacs Artist clock" "https://mbork.pl/2025-09-08_Emacs_Artist_clock" 1757352288.0 #s(elfeed-ref "b01425f8a33e402c011d74290a35ec3cb43b475a") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Marcin Borkowski" :uri "https://mbork.pl/Homepage")))) ("planet.emacslife.com" . "http://yummymelon.com/devnull/announcing-numeri-an-emacs-package-for-roman-number-translation.html") #s(elfeed-entry ("planet.emacslife.com" . "http://yummymelon.com/devnull/announcing-numeri-an-emacs-package-for-roman-number-translation.html") "Charles Choi: Announcing Numeri - an Emacs package for Roman number translation" "http://yummymelon.com/devnull/announcing-numeri-an-emacs-package-for-roman-number-translation.html" 1757350800.0 #s(elfeed-ref "ee561a520e869e8b4960d817d3cefe19b57f6832") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Charles Choi" :uri "http://yummymelon.com/devnull/")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=13257") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=13257") "Irreal: Emacs Bankruptcy" "https://irreal.org/blog/?p=13257" 1757346847.0 #s(elfeed-ref "903a090847256b1a34ed6fd9e17297be4e82463c") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Irreal" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "https://sachachua.com/blog/2025/09/2025-09-08-emacs-news/") #s(elfeed-entry ("planet.emacslife.com" . "https://sachachua.com/blog/2025/09/2025-09-08-emacs-news/") "Sacha Chua: 2025-09-08 Emacs news" "https://sachachua.com/blog/2025/09/2025-09-08-emacs-news/" 1757338323.0 #s(elfeed-ref "a4da856a8d9dba13733225425561a2e8ec153d37") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Sacha Chua" :uri "https://sachachua.com/blog/category/emacs/feed/index.xml")))) ("planet.emacslife.com" . "https://tusharhero.codeberg.page/obscure-emacs-packages.html") #s(elfeed-entry ("planet.emacslife.com" . "https://tusharhero.codeberg.page/obscure-emacs-packages.html") "tusharhero: Obscure Emacs packages" "https://tusharhero.codeberg.page/obscure-emacs-packages.html" 1757304000.0 #s(elfeed-ref "5c307d63df78e9b82223f70625b252883608e043") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "tusharhero" :uri "https://tusharhero.codeberg.page/")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=13255") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=13255") "Irreal: Must Have Emacs Packages In 2025" "https://irreal.org/blog/?p=13255" 1757262981.0 #s(elfeed-ref "89fd97182326357cef5e621b35e2e4b641782c0a") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Irreal" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "https://protesilaos.com/codelog/2025-09-07-prot-asks-greg-emacs-android-fishing-dogs-pennsylvania/") #s(elfeed-entry ("planet.emacslife.com" . "https://protesilaos.com/codelog/2025-09-07-prot-asks-greg-emacs-android-fishing-dogs-pennsylvania/") "Protesilaos Stavrou: Prot Asks: Greg about Emacs, Android, dogs, fishing, cycling, and Pennsylvania" "https://protesilaos.com/codelog/2025-09-07-prot-asks-greg-emacs-android-fishing-dogs-pennsylvania/" 1757203200.0 #s(elfeed-ref "bdfec1d372b1d9eddae76af5873bb4b4a0238639") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Protesilaos Stavrou" :uri "https://protesilaos.com/codelog")))) ("planet.emacslife.com" . "https://protesilaos.com/codelog/2025-09-07-emacs-show-font-1-0-0/") #s(elfeed-entry ("planet.emacslife.com" . "https://protesilaos.com/codelog/2025-09-07-emacs-show-font-1-0-0/") "Protesilaos Stavrou: Emacs: show-font version 1.0.0" "https://protesilaos.com/codelog/2025-09-07-emacs-show-font-1-0-0/" 1757203200.0 #s(elfeed-ref "afb13f7c522fdc40cf06fd337e44296b9a37888b") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Protesilaos Stavrou" :uri "https://protesilaos.com/codelog")))) ("sachachua.com" . "https://sachachua.com/blog/2025/09/emacs-and-dom-el-quick-notes-on-parsing-html-and-turning-doms-back-into-html/") #s(elfeed-entry ("sachachua.com" . "https://sachachua.com/blog/2025/09/emacs-and-dom-el-quick-notes-on-parsing-html-and-turning-doms-back-into-html/") "Emacs and dom.el: quick notes on parsing HTML and turning DOMs back into HTML" "https://sachachua.com/blog/2025/09/emacs-and-dom-el-quick-notes-on-parsing-html-and-turning-doms-back-into-html/" 1757776377.0 #s(elfeed-ref "00e50afa6b6d535657532f5dc65ac83932d3f239") html nil (dev emacs mustread unread) "https://sachachua.com/blog/category/emacs/feed/" (:authors ((:name "Sacha Chua")) :categories ("elisp"))) ("sachachua.com" . "https://sachachua.com/blog/2025/09/2025-09-08-emacs-news/") #s(elfeed-entry ("sachachua.com" . "https://sachachua.com/blog/2025/09/2025-09-08-emacs-news/") "2025-09-08 Emacs news" "https://sachachua.com/blog/2025/09/2025-09-08-emacs-news/" 1757338323.0 #s(elfeed-ref "81b76c0032ceee17bb96ebbc389901fceacf01fe") html nil (dev emacs mustread unread) "https://sachachua.com/blog/category/emacs/feed/" (:authors ((:name "Sacha Chua")) :categories ("emacs" "emacs-news"))) ("feeds.feedburner.com" . "https://symfony.com/blog/a-week-of-symfony-976-september-8-14-2025?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") #s(elfeed-entry ("feeds.feedburner.com" . "https://symfony.com/blog/a-week-of-symfony-976-september-8-14-2025?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") "A Week of Symfony #976 (September 8–14, 2025)" "https://symfony.com/blog/a-week-of-symfony-976-september-8-14-2025?utm_source=Symfony%20Blog%20Feed&utm_medium=feed" 1757833920.0 #s(elfeed-ref "b36e20565a5d532fc47a38b5953f752498485c2c") html nil (dev unread web) "http://feeds.feedburner.com/symfony/blog" (:authors ((:name " Javier Eguiluz ")))) ("feeds.feedburner.com" . "https://symfony.com/blog/save-the-date-symfonyday-montreal-2026?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") #s(elfeed-entry ("feeds.feedburner.com" . "https://symfony.com/blog/save-the-date-symfonyday-montreal-2026?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") "Save the date, SymfonyDay Montreal 2026!" "https://symfony.com/blog/save-the-date-symfonyday-montreal-2026?utm_source=Symfony%20Blog%20Feed&utm_medium=feed" 1757593800.0 #s(elfeed-ref "65de5ec3577e63d09381ff6699f25c7b1a96570b") html nil (dev unread web) "http://feeds.feedburner.com/symfony/blog" (:authors ((:name " Paola Suárez ")))) ("feeds.feedburner.com" . "https://symfony.com/blog/symfonycon-amsterdam-2025-call-for-it-student-volunteers-volunteer-learn-and-connect?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") #s(elfeed-entry ("feeds.feedburner.com" . "https://symfony.com/blog/symfonycon-amsterdam-2025-call-for-it-student-volunteers-volunteer-learn-and-connect?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") "SymfonyCon Amsterdam 2025: Call for IT student volunteers: Volunteer, Learn & Connect!" "https://symfony.com/blog/symfonycon-amsterdam-2025-call-for-it-student-volunteers-volunteer-learn-and-connect?utm_source=Symfony%20Blog%20Feed&utm_medium=feed" 1757487600.0 #s(elfeed-ref "2a806db8fc90f6bc36452475a74e42608989d904") html nil (dev unread web) "http://feeds.feedburner.com/symfony/blog" (:authors ((:name " Paola Suárez ")))) ("feeds.feedburner.com" . "https://symfony.com/blog/seven-symfony-core-team-members-speaking-next-week-at-the-api-platform-conference-2025?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") #s(elfeed-entry ("feeds.feedburner.com" . "https://symfony.com/blog/seven-symfony-core-team-members-speaking-next-week-at-the-api-platform-conference-2025?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") "Seven Symfony Core Team Members Speaking Next Week at the API Platform Conference 2025" "https://symfony.com/blog/seven-symfony-core-team-members-speaking-next-week-at-the-api-platform-conference-2025?utm_source=Symfony%20Blog%20Feed&utm_medium=feed" 1757338200.0 #s(elfeed-ref "4f232ddaf76f49954f2b282e3f71612e792065eb") html nil (dev unread web) "http://feeds.feedburner.com/symfony/blog" (:authors ((:name " Cécile HAMEREL ")))) ("blog.rust-lang.org" . "https://blog.rust-lang.org/2025/09/12/crates-io-phishing-campaign/") #s(elfeed-entry ("blog.rust-lang.org" . "https://blog.rust-lang.org/2025/09/12/crates-io-phishing-campaign/") "crates.io phishing campaign" "https://blog.rust-lang.org/2025/09/12/crates-io-phishing-campaign/" 1757635200.0 #s(elfeed-ref "4bb98678a6a64d5185e902ec5f8c06f58c74d7cb") html nil (dev systems unread) "https://blog.rust-lang.org/feed.xml" (:authors ((:name "Rust Security Response WG, crates.io team")))) ("blog.rust-lang.org" . "https://blog.rust-lang.org/2025/09/10/rust-compiler-performance-survey-2025-results/") #s(elfeed-entry ("blog.rust-lang.org" . "https://blog.rust-lang.org/2025/09/10/rust-compiler-performance-survey-2025-results/") "Rust compiler performance survey 2025 results" "https://blog.rust-lang.org/2025/09/10/rust-compiler-performance-survey-2025-results/" 1757462400.0 #s(elfeed-ref "fdc23c9dbb09ca6a1e6205b2fe98b21ad47ce346") html nil (dev systems unread) "https://blog.rust-lang.org/feed.xml" (:authors ((:name "Jakub Beránek")))) ("fasterthanli.me" . "https://fasterthanli.me/articles/crates-io-phishing-attempt") #s(elfeed-entry ("fasterthanli.me" . "https://fasterthanli.me/articles/crates-io-phishing-attempt") "crates.io phishing attempt" "https://fasterthanli.me/articles/crates-io-phishing-attempt" 1757685600.0 #s(elfeed-ref "524d6ae787b8f1df55573b31af1664a219aba738") html nil (dev systems unread) "https://fasterthanli.me/index.xml" (:categories ("rust" "security"))) ("fasterthanli.me" . "https://fasterthanli.me/articles/color-npm-package-compromised") #s(elfeed-entry ("fasterthanli.me" . "https://fasterthanli.me/articles/color-npm-package-compromised") "color npm package compromised" "https://fasterthanli.me/articles/color-npm-package-compromised" 1757350200.0 #s(elfeed-ref "40b2e973e49866746756a162444c75b21484c103") html nil (dev systems unread) "https://fasterthanli.me/index.xml" (:categories ("npm"))) ("blog.sigplan.org" . "https://blog.sigplan.org/?p=3051") #s(elfeed-entry ("blog.sigplan.org" . "https://blog.sigplan.org/?p=3051") "The Reserve Reviewer Policy" "https://blog.sigplan.org/2025/09/09/the-reserve-reviewer-policy/" 1757433592.0 #s(elfeed-ref "f1c20275be40a94baa29c4dbb71faa95e5bf0783") html nil (dev theory unread) "https://blog.sigplan.org/feed/" (:authors ((:name "Shriram Krishnamurthi")) :categories ("Process" "Viewpoint"))) ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/many-hard-leetcode-problems-are-easy-constraint/") #s(elfeed-entry ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/many-hard-leetcode-problems-are-easy-constraint/") "Many Hard Leetcode Problems are Easy Constraint Problems" "https://buttondown.com/hillelwayne/archive/many-hard-leetcode-problems-are-easy-constraint/" 1757509200.0 #s(elfeed-ref "3815ab5e34d101cd27450fb999342cd1c6228bcc") html nil (dev theory unread) "https://buttondown.email/hillelwayne/rss" nil) ("sachachua.com" . "https://sachachua.com/blog/2025/10/doodling-icons-in-a-grid/") #s(elfeed-entry ("sachachua.com" . "https://sachachua.com/blog/2025/10/doodling-icons-in-a-grid/") "Doodling icons in a grid" "https://sachachua.com/blog/2025/10/doodling-icons-in-a-grid/" 1759327974.0 #s(elfeed-ref "09febee3bfae1a565a0ae17517bf7c39949a2495") html nil (dev emacs mustread unread) "https://sachachua.com/blog/category/emacs/feed/" (:authors ((:name "Sacha Chua")) :categories ("drawing" "emacs"))) ("sachachua.com" . "https://sachachua.com/blog/2025/09/org-mode-calculating-table-sums-using-tag-hierarchies/") #s(elfeed-entry ("sachachua.com" . "https://sachachua.com/blog/2025/09/org-mode-calculating-table-sums-using-tag-hierarchies/") "Org Mode: calculating table sums using tag hierarchies" "https://sachachua.com/blog/2025/09/org-mode-calculating-table-sums-using-tag-hierarchies/" 1759241325.0 #s(elfeed-ref "98d82920f0215486b48768619bd35b3e84c487fd") html nil (dev emacs mustread unread) "https://sachachua.com/blog/category/emacs/feed/" (:authors ((:name "Sacha Chua")) :categories ("org" "elisp"))) ("sachachua.com" . "https://sachachua.com/blog/2025/09/2025-09-29-emacs-news/") #s(elfeed-entry ("sachachua.com" . "https://sachachua.com/blog/2025/09/2025-09-29-emacs-news/") "2025-09-29 Emacs news" "https://sachachua.com/blog/2025/09/2025-09-29-emacs-news/" 1759150632.0 #s(elfeed-ref "5ebf6877b61c90c357fadb11ab801487dd6e53d6") html nil (dev emacs mustread unread) "https://sachachua.com/blog/category/emacs/feed/" (:authors ((:name "Sacha Chua")) :categories ("emacs" "emacs-news"))) ("sachachua.com" . "https://sachachua.com/blog/2025/09/org-mode-a-latex-letter-that-includes-pdfs-and-hyperlinked-page-numbers/") #s(elfeed-entry ("sachachua.com" . "https://sachachua.com/blog/2025/09/org-mode-a-latex-letter-that-includes-pdfs-and-hyperlinked-page-numbers/") "Org Mode: a LaTeX letter that includes PDFs and hyperlinked page numbers" "https://sachachua.com/blog/2025/09/org-mode-a-latex-letter-that-includes-pdfs-and-hyperlinked-page-numbers/" 1758735900.0 #s(elfeed-ref "d86081b038a9e55803b4a1c3ec6c030105a0a8ac") html nil (dev emacs mustread unread) "https://sachachua.com/blog/category/emacs/feed/" (:authors ((:name "Sacha Chua")) :categories ("org"))) ("sachachua.com" . "https://sachachua.com/blog/2025/09/emacs-cycle-through-different-paragraph-formats-all-on-one-line-wrapped-max-one-sentence-per-line-one-sentence-per-line/") #s(elfeed-entry ("sachachua.com" . "https://sachachua.com/blog/2025/09/emacs-cycle-through-different-paragraph-formats-all-on-one-line-wrapped-max-one-sentence-per-line-one-sentence-per-line/") "Emacs: Cycle through different paragraph formats: all on one line, wrapped, max one sentence per line, one sentence per line" "https://sachachua.com/blog/2025/09/emacs-cycle-through-different-paragraph-formats-all-on-one-line-wrapped-max-one-sentence-per-line-one-sentence-per-line/" 1758553101.0 #s(elfeed-ref "7ef5b2da81b0265cbbeffb33a68a83ee9b136d51") html nil (dev emacs mustread unread) "https://sachachua.com/blog/category/emacs/feed/" (:authors ((:name "Sacha Chua")) :categories ("emacs"))) ("sachachua.com" . "https://sachachua.com/blog/2025/09/2025-09-22-emacs-news/") #s(elfeed-entry ("sachachua.com" . "https://sachachua.com/blog/2025/09/2025-09-22-emacs-news/") "2025-09-22 Emacs news" "https://sachachua.com/blog/2025/09/2025-09-22-emacs-news/" 1758545276.0 #s(elfeed-ref "545d5414e6d1c89e9d0cf967320d5eb2b1439ef4") html nil (dev emacs mustread unread) "https://sachachua.com/blog/category/emacs/feed/" (:authors ((:name "Sacha Chua")) :categories ("emacs" "emacs-news"))) ("sachachua.com" . "https://sachachua.com/blog/2025/09/adding-org-mode-link-awesomeness-elsewhere-my-org-insert-link-dwim/") #s(elfeed-entry ("sachachua.com" . "https://sachachua.com/blog/2025/09/adding-org-mode-link-awesomeness-elsewhere-my-org-insert-link-dwim/") "Adding Org Mode link awesomeness elsewhere: my-org-insert-link-dwim" "https://sachachua.com/blog/2025/09/adding-org-mode-link-awesomeness-elsewhere-my-org-insert-link-dwim/" 1758481876.0 #s(elfeed-ref "6d215678ebdcbdb0bb57f21872834db48d71a7e2") html nil (dev emacs mustread unread) "https://sachachua.com/blog/category/emacs/feed/" (:authors ((:name "Sacha Chua")) :categories ("emacs" "org"))) ("nullprogram.com" . "urn:uuid:ffce917f-c757-42e7-a4d1-55e8d80c5051") #s(elfeed-entry ("nullprogram.com" . "urn:uuid:ffce917f-c757-42e7-a4d1-55e8d80c5051") "More speculations on arenas in C++" "https://nullprogram.com/blog/2025/09/30/" 1759232776.0 #s(elfeed-ref "a47a4ae2213a0089a6c243c9978829a24b30c83d") html nil (dev emacs mustread unread) "http://nullprogram.com/feed" nil) ("nullprogram.com" . "urn:uuid:30d4b889-d14b-4b32-b389-858fb3dde34b") #s(elfeed-entry ("nullprogram.com" . "urn:uuid:30d4b889-d14b-4b32-b389-858fb3dde34b") "Hierarchical field sort with string interning" "https://nullprogram.com/blog/2025/09/24/" 1758733892.0 #s(elfeed-ref "9b11a01c80b2629fd762fefd8e2ed8fd4a8425a0") html nil (dev emacs mustread unread) "http://nullprogram.com/feed" (:categories ("c"))) ("feeds.feedburner.com" . "https://symfony.com/blog/symfonycon-amsterdam-2025-emerging-ai-design-patterns-in-symfony?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") #s(elfeed-entry ("feeds.feedburner.com" . "https://symfony.com/blog/symfonycon-amsterdam-2025-emerging-ai-design-patterns-in-symfony?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") "SymfonyCon Amsterdam 2025: Emerging AI Design Patterns in Symfony" "https://symfony.com/blog/symfonycon-amsterdam-2025-emerging-ai-design-patterns-in-symfony?utm_source=Symfony%20Blog%20Feed&utm_medium=feed" 1759421700.0 #s(elfeed-ref "89a06667c8b1752570d4f8a257749c4732401666") html nil (dev unread web) "http://feeds.feedburner.com/symfony/blog" (:authors ((:name " Eloïse Charrier ")))) ("feeds.feedburner.com" . "https://symfony.com/blog/symfonycon-amsterdam-2025-let-s-build-a-raffler-with-websockets?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") #s(elfeed-entry ("feeds.feedburner.com" . "https://symfony.com/blog/symfonycon-amsterdam-2025-let-s-build-a-raffler-with-websockets?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") "SymfonyCon Amsterdam 2025: Let's Build A Raffler With WebSockets!" "https://symfony.com/blog/symfonycon-amsterdam-2025-let-s-build-a-raffler-with-websockets?utm_source=Symfony%20Blog%20Feed&utm_medium=feed" 1759321800.0 #s(elfeed-ref "ec5054800d3b54f47ac03ae0703e1990522e9449") html nil (dev unread web) "http://feeds.feedburner.com/symfony/blog" (:authors ((:name " Eloïse Charrier ")))) ("feeds.feedburner.com" . "https://symfony.com/blog/symfonycon-amsterdam-2025-unleash-the-power-of-symfony-messenger?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") #s(elfeed-entry ("feeds.feedburner.com" . "https://symfony.com/blog/symfonycon-amsterdam-2025-unleash-the-power-of-symfony-messenger?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") "SymfonyCon Amsterdam 2025: Unleash the Power of Symfony Messenger" "https://symfony.com/blog/symfonycon-amsterdam-2025-unleash-the-power-of-symfony-messenger?utm_source=Symfony%20Blog%20Feed&utm_medium=feed" 1759235400.0 #s(elfeed-ref "41b31df94e02f3dd2a4785923d91f993a959c677") html nil (dev unread web) "http://feeds.feedburner.com/symfony/blog" (:authors ((:name " Eloïse Charrier ")))) ("feeds.feedburner.com" . "https://symfony.com/blog/a-week-of-symfony-978-september-22-28-2025?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") #s(elfeed-entry ("feeds.feedburner.com" . "https://symfony.com/blog/a-week-of-symfony-978-september-22-28-2025?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") "A Week of Symfony #978 (September 22–28, 2025)" "https://symfony.com/blog/a-week-of-symfony-978-september-22-28-2025?utm_source=Symfony%20Blog%20Feed&utm_medium=feed" 1759044420.0 #s(elfeed-ref "2d4b167fd4d21d794b6f384f1c567cd703b6bdc4") html nil (dev unread web) "http://feeds.feedburner.com/symfony/blog" (:authors ((:name " Javier Eguiluz ")))) ("feeds.feedburner.com" . "https://symfony.com/blog/symfony-7-3-4-released?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") #s(elfeed-entry ("feeds.feedburner.com" . "https://symfony.com/blog/symfony-7-3-4-released?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") "Symfony 7.3.4 released" "https://symfony.com/blog/symfony-7-3-4-released?utm_source=Symfony%20Blog%20Feed&utm_medium=feed" 1758976646.0 #s(elfeed-ref "133b79b20be1359b342a59d5ad2cf0f367c9671e") html nil (dev unread web) "http://feeds.feedburner.com/symfony/blog" (:authors ((:name " Fabien Potencier ")))) ("feeds.feedburner.com" . "https://symfony.com/blog/symfony-6-4-26-released?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") #s(elfeed-entry ("feeds.feedburner.com" . "https://symfony.com/blog/symfony-6-4-26-released?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") "Symfony 6.4.26 released" "https://symfony.com/blog/symfony-6-4-26-released?utm_source=Symfony%20Blog%20Feed&utm_medium=feed" 1758976285.0 #s(elfeed-ref "f72ba07c20c9aa273bbe3cc24c08bdd28707bfc6") html nil (dev unread web) "http://feeds.feedburner.com/symfony/blog" (:authors ((:name " Fabien Potencier ")))) ("feeds.feedburner.com" . "https://symfony.com/blog/symfonycon-amsterdam-2025-a-productive-frontend-stack-with-symfony-ux?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") #s(elfeed-entry ("feeds.feedburner.com" . "https://symfony.com/blog/symfonycon-amsterdam-2025-a-productive-frontend-stack-with-symfony-ux?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") "SymfonyCon Amsterdam 2025: A productive Frontend Stack with Symfony UX" "https://symfony.com/blog/symfonycon-amsterdam-2025-a-productive-frontend-stack-with-symfony-ux?utm_source=Symfony%20Blog%20Feed&utm_medium=feed" 1758879000.0 #s(elfeed-ref "0e3b07affd08312cac48e4d204d6dec67cb20fc3") html nil (dev unread web) "http://feeds.feedburner.com/symfony/blog" (:authors ((:name " Eloïse Charrier ")))) ("feeds.feedburner.com" . "https://symfony.com/blog/symfonycon-amsterdam-2025-rediscover-the-console?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") #s(elfeed-entry ("feeds.feedburner.com" . "https://symfony.com/blog/symfonycon-amsterdam-2025-rediscover-the-console?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") "SymfonyCon Amsterdam 2025: Rediscover the Console" "https://symfony.com/blog/symfonycon-amsterdam-2025-rediscover-the-console?utm_source=Symfony%20Blog%20Feed&utm_medium=feed" 1758630600.0 #s(elfeed-ref "c7809f01c43d18ed546aed1837935194788be21c") html nil (dev unread web) "http://feeds.feedburner.com/symfony/blog" (:authors ((:name " Eloïse Charrier ")))) ("feeds.feedburner.com" . "https://symfony.com/blog/symfonycon-amsterdam-2025-strategic-ddd?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") #s(elfeed-entry ("feeds.feedburner.com" . "https://symfony.com/blog/symfonycon-amsterdam-2025-strategic-ddd?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") "SymfonyCon Amsterdam 2025: Strategic DDD" "https://symfony.com/blog/symfonycon-amsterdam-2025-strategic-ddd?utm_source=Symfony%20Blog%20Feed&utm_medium=feed" 1758547800.0 #s(elfeed-ref "ad96dbe79036a00b180cfe470b35ed9dc865890c") html nil (dev unread web) "http://feeds.feedburner.com/symfony/blog" (:authors ((:name " Eloïse Charrier ")))) ("feeds.feedburner.com" . "https://symfony.com/blog/a-week-of-symfony-977-september-15-21-2025?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") #s(elfeed-entry ("feeds.feedburner.com" . "https://symfony.com/blog/a-week-of-symfony-977-september-15-21-2025?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") "A Week of Symfony #977 (September 15–21, 2025)" "https://symfony.com/blog/a-week-of-symfony-977-september-15-21-2025?utm_source=Symfony%20Blog%20Feed&utm_medium=feed" 1758438060.0 #s(elfeed-ref "3a9e28e31817911fde2cbc80ff191b853690a7fb") html nil (dev unread web) "http://feeds.feedburner.com/symfony/blog" (:authors ((:name " Javier Eguiluz ")))) ("www.youtube.com" . "yt:video:iN1qbdRxy9E") #s(elfeed-entry ("www.youtube.com" . "yt:video:iN1qbdRxy9E") "WE ARE SO BACK - Day In The Life at Netflix" "https://www.youtube.com/watch?v=iN1qbdRxy9E" 1759501789.0 nil nil nil (tech unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCUyeluBRhGPCW4rPe_UvBZQ" (:authors ((:name "ThePrimeTime" :uri "https://www.youtube.com/channel/UCUyeluBRhGPCW4rPe_UvBZQ")))) ("www.youtube.com" . "yt:video:Bo6lYPJSqlA") #s(elfeed-entry ("www.youtube.com" . "yt:video:Bo6lYPJSqlA") "We did it?" "https://www.youtube.com/watch?v=Bo6lYPJSqlA" 1759256636.0 nil nil nil (tech unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCUyeluBRhGPCW4rPe_UvBZQ" (:authors ((:name "ThePrimeTime" :uri "https://www.youtube.com/channel/UCUyeluBRhGPCW4rPe_UvBZQ")))) ("www.youtube.com" . "yt:video:MJIMxBEdKBQ") #s(elfeed-entry ("www.youtube.com" . "yt:video:MJIMxBEdKBQ") "Final stretch" "https://www.youtube.com/watch?v=MJIMxBEdKBQ" 1759165323.0 nil nil nil (tech unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCUyeluBRhGPCW4rPe_UvBZQ" (:authors ((:name "ThePrimeTime" :uri "https://www.youtube.com/channel/UCUyeluBRhGPCW4rPe_UvBZQ")))) ("www.youtube.com" . "yt:video:F1KgHCSpT_0") #s(elfeed-entry ("www.youtube.com" . "yt:video:F1KgHCSpT_0") "Things are breaking down" "https://www.youtube.com/watch?v=F1KgHCSpT_0" 1759085795.0 nil nil nil (tech unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCUyeluBRhGPCW4rPe_UvBZQ" (:authors ((:name "ThePrimeTime" :uri "https://www.youtube.com/channel/UCUyeluBRhGPCW4rPe_UvBZQ")))) ("www.youtube.com" . "yt:video:4RdIU71yJlY") #s(elfeed-entry ("www.youtube.com" . "yt:video:4RdIU71yJlY") "DAY 5 - Cops Visit the Tower, Vibes Still Immaculate" "https://www.youtube.com/watch?v=4RdIU71yJlY" 1759001001.0 nil nil nil (tech unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCUyeluBRhGPCW4rPe_UvBZQ" (:authors ((:name "ThePrimeTime" :uri "https://www.youtube.com/channel/UCUyeluBRhGPCW4rPe_UvBZQ")))) ("www.youtube.com" . "yt:video:HQgVsSI2kI0") #s(elfeed-entry ("www.youtube.com" . "yt:video:HQgVsSI2kI0") "DAY 4 - an unlikely encounter" "https://www.youtube.com/watch?v=HQgVsSI2kI0" 1758912307.0 nil nil nil (tech unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCUyeluBRhGPCW4rPe_UvBZQ" (:authors ((:name "ThePrimeTime" :uri "https://www.youtube.com/channel/UCUyeluBRhGPCW4rPe_UvBZQ")))) ("www.youtube.com" . "yt:video:AE77XJNVGMQ") #s(elfeed-entry ("www.youtube.com" . "yt:video:AE77XJNVGMQ") "DAY 3 - Krazam gets us back on track" "https://www.youtube.com/watch?v=AE77XJNVGMQ" 1758824464.0 nil nil nil (tech unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCUyeluBRhGPCW4rPe_UvBZQ" (:authors ((:name "ThePrimeTime" :uri "https://www.youtube.com/channel/UCUyeluBRhGPCW4rPe_UvBZQ")))) ("www.youtube.com" . "yt:video:yUOScCe6yiQ") #s(elfeed-entry ("www.youtube.com" . "yt:video:yUOScCe6yiQ") "Day 2 - DougDoug adds CAPTCHA to the game" "https://www.youtube.com/watch?v=yUOScCe6yiQ" 1758743593.0 nil nil nil (tech unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCUyeluBRhGPCW4rPe_UvBZQ" (:authors ((:name "ThePrimeTime" :uri "https://www.youtube.com/channel/UCUyeluBRhGPCW4rPe_UvBZQ")))) ("www.youtube.com" . "yt:video:5Z2oPUyDANI") #s(elfeed-entry ("www.youtube.com" . "yt:video:5Z2oPUyDANI") "Day 1 - FINISHING A GAME IN 7 DAYS" "https://www.youtube.com/watch?v=5Z2oPUyDANI" 1758654247.0 nil nil nil (tech unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCUyeluBRhGPCW4rPe_UvBZQ" (:authors ((:name "ThePrimeTime" :uri "https://www.youtube.com/channel/UCUyeluBRhGPCW4rPe_UvBZQ")))) ("www.youtube.com" . "yt:video:LkAj5DcrgsA") #s(elfeed-entry ("www.youtube.com" . "yt:video:LkAj5DcrgsA") "Day 0 - FINISHING A GAME IN 7 DAYS" "https://www.youtube.com/watch?v=LkAj5DcrgsA" 1758561721.0 nil nil nil (tech unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCUyeluBRhGPCW4rPe_UvBZQ" (:authors ((:name "ThePrimeTime" :uri "https://www.youtube.com/channel/UCUyeluBRhGPCW4rPe_UvBZQ")))) ("www.youtube.com" . "yt:video:lSBkMKnsieo") #s(elfeed-entry ("www.youtube.com" . "yt:video:lSBkMKnsieo") "Claude got dumber" "https://www.youtube.com/watch?v=lSBkMKnsieo" 1758466889.0 nil nil nil (tech unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCUyeluBRhGPCW4rPe_UvBZQ" (:authors ((:name "ThePrimeTime" :uri "https://www.youtube.com/channel/UCUyeluBRhGPCW4rPe_UvBZQ")))) ("www.youtube.com" . "yt:video:SkQsOReCjRU") #s(elfeed-entry ("www.youtube.com" . "yt:video:SkQsOReCjRU") "Slack is evil" "https://www.youtube.com/watch?v=SkQsOReCjRU" 1758371955.0 nil nil nil (tech unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCUyeluBRhGPCW4rPe_UvBZQ" (:authors ((:name "ThePrimeTime" :uri "https://www.youtube.com/channel/UCUyeluBRhGPCW4rPe_UvBZQ")))) ("www.youtube.com" . "yt:video:wsHt2YReQzA") #s(elfeed-entry ("www.youtube.com" . "yt:video:wsHt2YReQzA") "Mark's disasterous presentation" "https://www.youtube.com/watch?v=wsHt2YReQzA" 1758290711.0 nil nil nil (tech unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCUyeluBRhGPCW4rPe_UvBZQ" (:authors ((:name "ThePrimeTime" :uri "https://www.youtube.com/channel/UCUyeluBRhGPCW4rPe_UvBZQ")))) ("www.youtube.com" . "yt:video:v9gsMFozXK0") #s(elfeed-entry ("www.youtube.com" . "yt:video:v9gsMFozXK0") "The Standup - Jira Bought 2 Browsers???" "https://www.youtube.com/watch?v=v9gsMFozXK0" 1758213032.0 nil nil nil (tech unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCUyeluBRhGPCW4rPe_UvBZQ" (:authors ((:name "ThePrimeTime" :uri "https://www.youtube.com/channel/UCUyeluBRhGPCW4rPe_UvBZQ")))) ("www.youtube.com" . "yt:video:FaMADv_GXqs") #s(elfeed-entry ("www.youtube.com" . "yt:video:FaMADv_GXqs") "this man is a gigachad" "https://www.youtube.com/watch?v=FaMADv_GXqs" 1758200433.0 nil nil nil (tech unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCUyeluBRhGPCW4rPe_UvBZQ" (:authors ((:name "ThePrimeTime" :uri "https://www.youtube.com/channel/UCUyeluBRhGPCW4rPe_UvBZQ")))) ("www.youtube.com" . "yt:video:h3WaPyDc3ik") #s(elfeed-entry ("www.youtube.com" . "yt:video:h3WaPyDc3ik") "Prot Asks: Ekaitz about Guix, bootstrapability, FOSS advocacy, and the Basque country" "https://www.youtube.com/watch?v=h3WaPyDc3ik" 1758718362.0 nil nil nil (emacs unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UC0uTPqBCFIpZxlz_Lv1tk_g" (:authors ((:name "Protesilaos Stavrou" :uri "https://www.youtube.com/channel/UC0uTPqBCFIpZxlz_Lv1tk_g")))) ("www.youtube.com" . "yt:video:iyVMLSPhdi0") #s(elfeed-entry ("www.youtube.com" . "yt:video:iyVMLSPhdi0") "Philosophy: first you walk, then you think for yourself" "https://www.youtube.com/watch?v=iyVMLSPhdi0" 1758452546.0 nil nil nil (emacs unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UC0uTPqBCFIpZxlz_Lv1tk_g" (:authors ((:name "Protesilaos Stavrou" :uri "https://www.youtube.com/channel/UC0uTPqBCFIpZxlz_Lv1tk_g")))) ("www.youtube.com" . "yt:video:Yv8BC8ISAPQ") #s(elfeed-entry ("www.youtube.com" . "yt:video:Yv8BC8ISAPQ") "Prot Asks: Julien about Emacs, functional package managers, Nix, Guix, and reproducibility" "https://www.youtube.com/watch?v=Yv8BC8ISAPQ" 1758177326.0 nil nil nil (emacs unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UC0uTPqBCFIpZxlz_Lv1tk_g" (:authors ((:name "Protesilaos Stavrou" :uri "https://www.youtube.com/channel/UC0uTPqBCFIpZxlz_Lv1tk_g")))) ("www.youtube.com" . "yt:video:qyw5uzDXjbA") #s(elfeed-entry ("www.youtube.com" . "yt:video:qyw5uzDXjbA") "Vlog: Oreeon got bitten by a snake and is okay now" "https://www.youtube.com/watch?v=qyw5uzDXjbA" 1757934356.0 nil nil nil (emacs unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UC0uTPqBCFIpZxlz_Lv1tk_g" (:authors ((:name "Protesilaos Stavrou" :uri "https://www.youtube.com/channel/UC0uTPqBCFIpZxlz_Lv1tk_g")))) ("www.youtube.com" . "yt:video:ZRC7cIGCC7A") #s(elfeed-entry ("www.youtube.com" . "yt:video:ZRC7cIGCC7A") "Prot Asks: port19 about RSI, keyboard ergonomics, dictation tools, and geriatric nursing" "https://www.youtube.com/watch?v=ZRC7cIGCC7A" 1757569931.0 nil nil nil (emacs unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UC0uTPqBCFIpZxlz_Lv1tk_g" (:authors ((:name "Protesilaos Stavrou" :uri "https://www.youtube.com/channel/UC0uTPqBCFIpZxlz_Lv1tk_g")))) ("www.youtube.com" . "yt:video:8iovwdREt1o") #s(elfeed-entry ("www.youtube.com" . "yt:video:8iovwdREt1o") "Prot Asks: Greg about Emacs, Android, dogs, fishing, cycling, and Pennsylvania" "https://www.youtube.com/watch?v=8iovwdREt1o" 1757230312.0 nil nil nil (emacs unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UC0uTPqBCFIpZxlz_Lv1tk_g" (:authors ((:name "Protesilaos Stavrou" :uri "https://www.youtube.com/channel/UC0uTPqBCFIpZxlz_Lv1tk_g")))) ("www.youtube.com" . "yt:video:kbJ3i3QMozs") #s(elfeed-entry ("www.youtube.com" . "yt:video:kbJ3i3QMozs") "Prot Asks: Amin about EmacsConf, Debian, GNU, Internet Archive, and Canada" "https://www.youtube.com/watch?v=kbJ3i3QMozs" 1756921309.0 nil nil nil (emacs unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UC0uTPqBCFIpZxlz_Lv1tk_g" (:authors ((:name "Protesilaos Stavrou" :uri "https://www.youtube.com/channel/UC0uTPqBCFIpZxlz_Lv1tk_g")))) ("www.youtube.com" . "yt:video:VdjYhZqnQks") #s(elfeed-entry ("www.youtube.com" . "yt:video:VdjYhZqnQks") "Vlog: another balcony door for the hut" "https://www.youtube.com/watch?v=VdjYhZqnQks" 1756645193.0 nil nil nil (emacs unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UC0uTPqBCFIpZxlz_Lv1tk_g" (:authors ((:name "Protesilaos Stavrou" :uri "https://www.youtube.com/channel/UC0uTPqBCFIpZxlz_Lv1tk_g")))) ("www.youtube.com" . "yt:video:qxV_Uja4oYE") #s(elfeed-entry ("www.youtube.com" . "yt:video:qxV_Uja4oYE") "Prot Asks: Alex about LSP, Elisp programming, Guix, cycling, Go game, philosophy, and SwayWM" "https://www.youtube.com/watch?v=qxV_Uja4oYE" 1756551813.0 nil nil nil (emacs unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UC0uTPqBCFIpZxlz_Lv1tk_g" (:authors ((:name "Protesilaos Stavrou" :uri "https://www.youtube.com/channel/UC0uTPqBCFIpZxlz_Lv1tk_g")))) ("www.youtube.com" . "yt:video:qvWSGzfR1wA") #s(elfeed-entry ("www.youtube.com" . "yt:video:qvWSGzfR1wA") "Prot Asks: Ronnie about free software, privacy, parenting, and life in Iraqi Kurdistan" "https://www.youtube.com/watch?v=qvWSGzfR1wA" 1756102774.0 nil nil nil (emacs unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UC0uTPqBCFIpZxlz_Lv1tk_g" (:authors ((:name "Protesilaos Stavrou" :uri "https://www.youtube.com/channel/UC0uTPqBCFIpZxlz_Lv1tk_g")))) ("www.youtube.com" . "yt:video:c5KV_P7K73Y") #s(elfeed-entry ("www.youtube.com" . "yt:video:c5KV_P7K73Y") "Prot Asks: Dimos about Emacs interconnectedness, collective work, and The Conspiracy Club" "https://www.youtube.com/watch?v=c5KV_P7K73Y" 1755692756.0 nil nil nil (emacs unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UC0uTPqBCFIpZxlz_Lv1tk_g" (:authors ((:name "Protesilaos Stavrou" :uri "https://www.youtube.com/channel/UC0uTPqBCFIpZxlz_Lv1tk_g")))) ("www.youtube.com" . "yt:video:CfWxxi4J7_4") #s(elfeed-entry ("www.youtube.com" . "yt:video:CfWxxi4J7_4") "Vlog: walk through the burnt Cyprus mountains" "https://www.youtube.com/watch?v=CfWxxi4J7_4" 1755523603.0 nil nil nil (emacs unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UC0uTPqBCFIpZxlz_Lv1tk_g" (:authors ((:name "Protesilaos Stavrou" :uri "https://www.youtube.com/channel/UC0uTPqBCFIpZxlz_Lv1tk_g")))) ("www.youtube.com" . "yt:video:6wkfFdiwpyU") #s(elfeed-entry ("www.youtube.com" . "yt:video:6wkfFdiwpyU") "Prot Asks: Erik about Emacs since the 1990s, Oregon and Portland, and podcasting" "https://www.youtube.com/watch?v=6wkfFdiwpyU" 1755412973.0 nil nil nil (emacs unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UC0uTPqBCFIpZxlz_Lv1tk_g" (:authors ((:name "Protesilaos Stavrou" :uri "https://www.youtube.com/channel/UC0uTPqBCFIpZxlz_Lv1tk_g")))) ("www.youtube.com" . "yt:video:TkodLFMrO6s") #s(elfeed-entry ("www.youtube.com" . "yt:video:TkodLFMrO6s") "Prot Asks: Arni about Emacs, no distractions, socialising, and self-expression through art" "https://www.youtube.com/watch?v=TkodLFMrO6s" 1755083340.0 nil nil nil (emacs unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UC0uTPqBCFIpZxlz_Lv1tk_g" (:authors ((:name "Protesilaos Stavrou" :uri "https://www.youtube.com/channel/UC0uTPqBCFIpZxlz_Lv1tk_g")))) ("www.youtube.com" . "yt:video:-g8o0M9CRkA") #s(elfeed-entry ("www.youtube.com" . "yt:video:-g8o0M9CRkA") "Prot Asks: PizzaTorque about Emacs for programming, linguistics, art and community" "https://www.youtube.com/watch?v=-g8o0M9CRkA" 1754806688.0 nil nil nil (emacs unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UC0uTPqBCFIpZxlz_Lv1tk_g" (:authors ((:name "Protesilaos Stavrou" :uri "https://www.youtube.com/channel/UC0uTPqBCFIpZxlz_Lv1tk_g")))) ("www.youtube.com" . "yt:video:M-MgQC6z3VU") #s(elfeed-entry ("www.youtube.com" . "yt:video:M-MgQC6z3VU") "What was Euclid really doing? | Guest video by Ben Syversen" "https://www.youtube.com/watch?v=M-MgQC6z3VU" 1758204785.0 nil nil nil (edu unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCYO_jab_esuFRV4b17AJtAw" (:authors ((:name "3Blue1Brown" :uri "https://www.youtube.com/channel/UCYO_jab_esuFRV4b17AJtAw")))) ("www.youtube.com" . "yt:video:1lZpowy21Gc") #s(elfeed-entry ("www.youtube.com" . "yt:video:1lZpowy21Gc") "Incomplete open cubes" "https://www.youtube.com/shorts/1lZpowy21Gc" 1757247958.0 nil nil nil (edu unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCYO_jab_esuFRV4b17AJtAw" (:authors ((:name "3Blue1Brown" :uri "https://www.youtube.com/channel/UCYO_jab_esuFRV4b17AJtAw")))) ("www.youtube.com" . "yt:video:_BrFKp-U8GI") #s(elfeed-entry ("www.youtube.com" . "yt:video:_BrFKp-U8GI") "Exploration & Epiphany | Guest video by Paul Dancstep" "https://www.youtube.com/watch?v=_BrFKp-U8GI" 1757247903.0 nil nil nil (edu unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCYO_jab_esuFRV4b17AJtAw" (:authors ((:name "3Blue1Brown" :uri "https://www.youtube.com/channel/UCYO_jab_esuFRV4b17AJtAw")))) ("www.youtube.com" . "yt:video:itRV2jEtV8Q") #s(elfeed-entry ("www.youtube.com" . "yt:video:itRV2jEtV8Q") "Simulating and understanding phase change | Guest video by Vilas Winstein" "https://www.youtube.com/watch?v=itRV2jEtV8Q" 1756389647.0 nil nil nil (edu unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCYO_jab_esuFRV4b17AJtAw" (:authors ((:name "3Blue1Brown" :uri "https://www.youtube.com/channel/UCYO_jab_esuFRV4b17AJtAw")))) ("www.youtube.com" . "yt:video:j5h9dBtWZXM") #s(elfeed-entry ("www.youtube.com" . "yt:video:j5h9dBtWZXM") "How AI connects text and images" "https://www.youtube.com/shorts/j5h9dBtWZXM" 1755800651.0 nil nil nil (edu unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCYO_jab_esuFRV4b17AJtAw" (:authors ((:name "3Blue1Brown" :uri "https://www.youtube.com/channel/UCYO_jab_esuFRV4b17AJtAw")))) ("www.youtube.com" . "yt:video:4NlrfOl0l8U") #s(elfeed-entry ("www.youtube.com" . "yt:video:4NlrfOl0l8U") "The AI that solved IMO Geometry Problems | Guest video by @Aleph0" "https://www.youtube.com/watch?v=4NlrfOl0l8U" 1755435770.0 nil nil nil (edu unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCYO_jab_esuFRV4b17AJtAw" (:authors ((:name "3Blue1Brown" :uri "https://www.youtube.com/channel/UCYO_jab_esuFRV4b17AJtAw")))) ("www.youtube.com" . "yt:video:iv-5mZ_9CPY") #s(elfeed-entry ("www.youtube.com" . "yt:video:iv-5mZ_9CPY") "But how do AI images and videos actually work? | Guest video by Welch Labs" "https://www.youtube.com/watch?v=iv-5mZ_9CPY" 1753445651.0 nil nil nil (edu unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCYO_jab_esuFRV4b17AJtAw" (:authors ((:name "3Blue1Brown" :uri "https://www.youtube.com/channel/UCYO_jab_esuFRV4b17AJtAw")))) ("www.youtube.com" . "yt:video:Dlsa9EBKDGI") #s(elfeed-entry ("www.youtube.com" . "yt:video:Dlsa9EBKDGI") "Where my explanation of Grover’s algorithm failed" "https://www.youtube.com/watch?v=Dlsa9EBKDGI" 1746359124.0 nil nil nil (edu unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCYO_jab_esuFRV4b17AJtAw" (:authors ((:name "3Blue1Brown" :uri "https://www.youtube.com/channel/UCYO_jab_esuFRV4b17AJtAw")))) ("www.youtube.com" . "yt:video:RQWpF2Gb-gU") #s(elfeed-entry ("www.youtube.com" . "yt:video:RQWpF2Gb-gU") "But what is quantum computing? (Grover's Algorithm)" "https://www.youtube.com/watch?v=RQWpF2Gb-gU" 1746016339.0 nil nil nil (edu unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCYO_jab_esuFRV4b17AJtAw" (:authors ((:name "3Blue1Brown" :uri "https://www.youtube.com/channel/UCYO_jab_esuFRV4b17AJtAw")))) ("www.youtube.com" . "yt:video:XX8mjBXBqz8") #s(elfeed-entry ("www.youtube.com" . "yt:video:XX8mjBXBqz8") "Testing your intuition for quantum computing" "https://www.youtube.com/shorts/XX8mjBXBqz8" 1746016333.0 nil nil nil (edu unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCYO_jab_esuFRV4b17AJtAw" (:authors ((:name "3Blue1Brown" :uri "https://www.youtube.com/channel/UCYO_jab_esuFRV4b17AJtAw")))) ("www.youtube.com" . "yt:video:aQwEJKWATlE") #s(elfeed-entry ("www.youtube.com" . "yt:video:aQwEJKWATlE") "How to measure nearby galaxies" "https://www.youtube.com/shorts/aQwEJKWATlE" 1745177770.0 nil nil nil (edu unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCYO_jab_esuFRV4b17AJtAw" (:authors ((:name "3Blue1Brown" :uri "https://www.youtube.com/channel/UCYO_jab_esuFRV4b17AJtAw")))) ("www.youtube.com" . "yt:video:aw-8BhCilj0") #s(elfeed-entry ("www.youtube.com" . "yt:video:aw-8BhCilj0") "Measuring the distance to Venus without radar" "https://www.youtube.com/shorts/aw-8BhCilj0" 1744119900.0 nil nil nil (edu unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCYO_jab_esuFRV4b17AJtAw" (:authors ((:name "3Blue1Brown" :uri "https://www.youtube.com/channel/UCYO_jab_esuFRV4b17AJtAw")))) ("www.youtube.com" . "yt:video:M6LUPYsjods") #s(elfeed-entry ("www.youtube.com" . "yt:video:M6LUPYsjods") "Measuring the speed of light using Jupiter's moons" "https://www.youtube.com/shorts/M6LUPYsjods" 1744041433.0 nil nil nil (edu unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCYO_jab_esuFRV4b17AJtAw" (:authors ((:name "3Blue1Brown" :uri "https://www.youtube.com/channel/UCYO_jab_esuFRV4b17AJtAw")))) ("www.youtube.com" . "yt:video:mHya9J9pkq4") #s(elfeed-entry ("www.youtube.com" . "yt:video:mHya9J9pkq4") "The tragic tale of Guillaume Le Gentil" "https://www.youtube.com/shorts/mHya9J9pkq4" 1743091264.0 nil nil nil (edu unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCYO_jab_esuFRV4b17AJtAw" (:authors ((:name "3Blue1Brown" :uri "https://www.youtube.com/channel/UCYO_jab_esuFRV4b17AJtAw")))) ("www.youtube.com" . "yt:video:C8baNzpnZ7o") #s(elfeed-entry ("www.youtube.com" . "yt:video:C8baNzpnZ7o") "Zooming out by powers of 10" "https://www.youtube.com/shorts/C8baNzpnZ7o" 1743014249.0 nil nil nil (edu unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCYO_jab_esuFRV4b17AJtAw" (:authors ((:name "3Blue1Brown" :uri "https://www.youtube.com/channel/UCYO_jab_esuFRV4b17AJtAw")))) ("www.youtube.com" . "yt:video:0gy454cRrLo") #s(elfeed-entry ("www.youtube.com" . "yt:video:0gy454cRrLo") "I AM OFFENDED!" "https://www.youtube.com/watch?v=0gy454cRrLo" 1749744003.0 nil nil nil (tech unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UC2eYFnH61tmytImy1mTYvhA" (:authors ((:name "Luke Smith" :uri "https://www.youtube.com/channel/UC2eYFnH61tmytImy1mTYvhA")))) ("www.youtube.com" . "yt:video:_EbE1XQsExY") #s(elfeed-entry ("www.youtube.com" . "yt:video:_EbE1XQsExY") "Modern People have no STABILITY. (No Friends, No Family, No Society)" "https://www.youtube.com/watch?v=_EbE1XQsExY" 1749484853.0 nil nil nil (tech unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UC2eYFnH61tmytImy1mTYvhA" (:authors ((:name "Luke Smith" :uri "https://www.youtube.com/channel/UC2eYFnH61tmytImy1mTYvhA")))) ("www.youtube.com" . "yt:video:IaAgfAGapD4") #s(elfeed-entry ("www.youtube.com" . "yt:video:IaAgfAGapD4") "We are brainwashed even by things we hate and resist." "https://www.youtube.com/watch?v=IaAgfAGapD4" 1749294976.0 nil nil nil (tech unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UC2eYFnH61tmytImy1mTYvhA" (:authors ((:name "Luke Smith" :uri "https://www.youtube.com/channel/UC2eYFnH61tmytImy1mTYvhA")))) ("www.youtube.com" . "yt:video:aoTQPoz9_As") #s(elfeed-entry ("www.youtube.com" . "yt:video:aoTQPoz9_As") "YOU are the Dead Internet." "https://www.youtube.com/watch?v=aoTQPoz9_As" 1749140715.0 nil nil nil (tech unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UC2eYFnH61tmytImy1mTYvhA" (:authors ((:name "Luke Smith" :uri "https://www.youtube.com/channel/UC2eYFnH61tmytImy1mTYvhA")))) ("www.youtube.com" . "yt:video:X2XpNcn8XT8") #s(elfeed-entry ("www.youtube.com" . "yt:video:X2XpNcn8XT8") "Nostalgia Destroys Souls." "https://www.youtube.com/watch?v=X2XpNcn8XT8" 1748696454.0 nil nil nil (tech unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UC2eYFnH61tmytImy1mTYvhA" (:authors ((:name "Luke Smith" :uri "https://www.youtube.com/channel/UC2eYFnH61tmytImy1mTYvhA")))) ("www.youtube.com" . "yt:video:lkB5nNGVINw") #s(elfeed-entry ("www.youtube.com" . "yt:video:lkB5nNGVINw") "Black Swans, the Paranormal and Miracles" "https://www.youtube.com/watch?v=lkB5nNGVINw" 1748543321.0 nil nil nil (tech unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UC2eYFnH61tmytImy1mTYvhA" (:authors ((:name "Luke Smith" :uri "https://www.youtube.com/channel/UC2eYFnH61tmytImy1mTYvhA")))) ("www.youtube.com" . "yt:video:CgzDcw3o6cI") #s(elfeed-entry ("www.youtube.com" . "yt:video:CgzDcw3o6cI") "What is the CONSOOMER's Liturgical Calendar?" "https://www.youtube.com/watch?v=CgzDcw3o6cI" 1748361629.0 nil nil nil (tech unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UC2eYFnH61tmytImy1mTYvhA" (:authors ((:name "Luke Smith" :uri "https://www.youtube.com/channel/UC2eYFnH61tmytImy1mTYvhA")))) ("www.youtube.com" . "yt:video:0-lS8Y79L7g") #s(elfeed-entry ("www.youtube.com" . "yt:video:0-lS8Y79L7g") "Linux, Bitcoin: When Tech Projects Become \"Too Popular...\" Don't forget the goal." "https://www.youtube.com/watch?v=0-lS8Y79L7g" 1748275200.0 nil nil nil (tech unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UC2eYFnH61tmytImy1mTYvhA" (:authors ((:name "Luke Smith" :uri "https://www.youtube.com/channel/UC2eYFnH61tmytImy1mTYvhA")))) ("www.youtube.com" . "yt:video:JSilR3BLXbw") #s(elfeed-entry ("www.youtube.com" . "yt:video:JSilR3BLXbw") "Luke's Interview by Orthodox Kyle" "https://www.youtube.com/watch?v=JSilR3BLXbw" 1748091638.0 nil nil nil (tech unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UC2eYFnH61tmytImy1mTYvhA" (:authors ((:name "Luke Smith" :uri "https://www.youtube.com/channel/UC2eYFnH61tmytImy1mTYvhA")))) ("www.youtube.com" . "yt:video:slIxE8oYzus") #s(elfeed-entry ("www.youtube.com" . "yt:video:slIxE8oYzus") "Suckless Software for Everyone: You too can LARP as a good programer! (SELF 2023)" "https://www.youtube.com/watch?v=slIxE8oYzus" 1747933268.0 nil nil nil (tech unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UC2eYFnH61tmytImy1mTYvhA" (:authors ((:name "Luke Smith" :uri "https://www.youtube.com/channel/UC2eYFnH61tmytImy1mTYvhA")))) ("www.youtube.com" . "yt:video:V7abyVkS6U8") #s(elfeed-entry ("www.youtube.com" . "yt:video:V7abyVkS6U8") "Consciousness Is Not Material." "https://www.youtube.com/watch?v=V7abyVkS6U8" 1747756855.0 nil nil nil (tech unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UC2eYFnH61tmytImy1mTYvhA" (:authors ((:name "Luke Smith" :uri "https://www.youtube.com/channel/UC2eYFnH61tmytImy1mTYvhA")))) ("www.youtube.com" . "yt:video:gleyKDvZ3x0") #s(elfeed-entry ("www.youtube.com" . "yt:video:gleyKDvZ3x0") "Computation isn't Consciousness: The Chinese Room Experiment" "https://www.youtube.com/watch?v=gleyKDvZ3x0" 1747663384.0 nil nil nil (tech unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UC2eYFnH61tmytImy1mTYvhA" (:authors ((:name "Luke Smith" :uri "https://www.youtube.com/channel/UC2eYFnH61tmytImy1mTYvhA")))) ("www.youtube.com" . "yt:video:E31KuUJmqCU") #s(elfeed-entry ("www.youtube.com" . "yt:video:E31KuUJmqCU") "AI is a Nothingburger. You're wrong." "https://www.youtube.com/watch?v=E31KuUJmqCU" 1747472331.0 nil nil nil (tech unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UC2eYFnH61tmytImy1mTYvhA" (:authors ((:name "Luke Smith" :uri "https://www.youtube.com/channel/UC2eYFnH61tmytImy1mTYvhA")))) ("www.youtube.com" . "yt:video:LbxASXgOBqc") #s(elfeed-entry ("www.youtube.com" . "yt:video:LbxASXgOBqc") "Fight the System? or Exit the System?" "https://www.youtube.com/watch?v=LbxASXgOBqc" 1747316722.0 nil nil nil (tech unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UC2eYFnH61tmytImy1mTYvhA" (:authors ((:name "Luke Smith" :uri "https://www.youtube.com/channel/UC2eYFnH61tmytImy1mTYvhA")))) ("www.youtube.com" . "yt:video:wDRCQfV-Hp0") #s(elfeed-entry ("www.youtube.com" . "yt:video:wDRCQfV-Hp0") "Be a Great Man of History" "https://www.youtube.com/watch?v=wDRCQfV-Hp0" 1747059041.0 nil nil nil (tech unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UC2eYFnH61tmytImy1mTYvhA" (:authors ((:name "Luke Smith" :uri "https://www.youtube.com/channel/UC2eYFnH61tmytImy1mTYvhA")))) ("www.youtube.com" . "yt:video:SquU4Bpc73Y") #s(elfeed-entry ("www.youtube.com" . "yt:video:SquU4Bpc73Y") "Alibaba is going all in on Qwen…" "https://www.youtube.com/watch?v=SquU4Bpc73Y" 1759507348.0 nil nil nil (tech unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCsBjURrPoezykLs9EqgamOA" (:authors ((:name "Fireship" :uri "https://www.youtube.com/channel/UCsBjURrPoezykLs9EqgamOA")))) ("www.youtube.com" . "yt:video:hkSj-QapfZo") #s(elfeed-entry ("www.youtube.com" . "yt:video:hkSj-QapfZo") "OpenAI’s new slop machine is open for business…" "https://www.youtube.com/watch?v=hkSj-QapfZo" 1759343906.0 nil nil nil (tech unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCsBjURrPoezykLs9EqgamOA" (:authors ((:name "Fireship" :uri "https://www.youtube.com/channel/UCsBjURrPoezykLs9EqgamOA")))) ("www.youtube.com" . "yt:video:bS9R6aCVEzw") #s(elfeed-entry ("www.youtube.com" . "yt:video:bS9R6aCVEzw") "n8n will change your life as a developer..." "https://www.youtube.com/watch?v=bS9R6aCVEzw" 1759169507.0 nil nil nil (tech unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCsBjURrPoezykLs9EqgamOA" (:authors ((:name "Fireship" :uri "https://www.youtube.com/channel/UCsBjURrPoezykLs9EqgamOA")))) ("www.youtube.com" . "yt:video:DC2p3kFjcK0") #s(elfeed-entry ("www.youtube.com" . "yt:video:DC2p3kFjcK0") "There's a new Linux distro in town for developers..." "https://www.youtube.com/watch?v=DC2p3kFjcK0" 1758739935.0 nil nil nil (tech unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCsBjURrPoezykLs9EqgamOA" (:authors ((:name "Fireship" :uri "https://www.youtube.com/channel/UCsBjURrPoezykLs9EqgamOA")))) ("www.youtube.com" . "yt:video:GOejI6c0CMQ") #s(elfeed-entry ("www.youtube.com" . "yt:video:GOejI6c0CMQ") "Meta's most dystopian product yet..." "https://www.youtube.com/watch?v=GOejI6c0CMQ" 1758218165.0 nil nil nil (tech unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCsBjURrPoezykLs9EqgamOA" (:authors ((:name "Fireship" :uri "https://www.youtube.com/channel/UCsBjURrPoezykLs9EqgamOA")))) ("www.youtube.com" . "yt:video:OfOPrmnHRxw") #s(elfeed-entry ("www.youtube.com" . "yt:video:OfOPrmnHRxw") "AI companions are taking over… let’s build one" "https://www.youtube.com/watch?v=OfOPrmnHRxw" 1758127213.0 nil nil nil (tech unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCsBjURrPoezykLs9EqgamOA" (:authors ((:name "Fireship" :uri "https://www.youtube.com/channel/UCsBjURrPoezykLs9EqgamOA")))) ("www.youtube.com" . "yt:video:QVqIx-Y8s-s") #s(elfeed-entry ("www.youtube.com" . "yt:video:QVqIx-Y8s-s") "The largest supply-chain attack ever…" "https://www.youtube.com/watch?v=QVqIx-Y8s-s" 1757437586.0 nil nil nil (tech unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCsBjURrPoezykLs9EqgamOA" (:authors ((:name "Fireship" :uri "https://www.youtube.com/channel/UCsBjURrPoezykLs9EqgamOA")))) ("www.youtube.com" . "yt:video:XGmZFNG-qQQ") #s(elfeed-entry ("www.youtube.com" . "yt:video:XGmZFNG-qQQ") "Google won at Monopoly..." "https://www.youtube.com/watch?v=XGmZFNG-qQQ" 1757004015.0 nil nil nil (tech unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCsBjURrPoezykLs9EqgamOA" (:authors ((:name "Fireship" :uri "https://www.youtube.com/channel/UCsBjURrPoezykLs9EqgamOA")))) ("www.youtube.com" . "yt:video:8_GgeASwHwQ") #s(elfeed-entry ("www.youtube.com" . "yt:video:8_GgeASwHwQ") "Google’s nano banana just killed Photoshop... let’s run it" "https://www.youtube.com/watch?v=8_GgeASwHwQ" 1756484852.0 nil nil nil (tech unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCsBjURrPoezykLs9EqgamOA" (:authors ((:name "Fireship" :uri "https://www.youtube.com/channel/UCsBjURrPoezykLs9EqgamOA")))) ("www.youtube.com" . "yt:video:pOF11EDprxc") #s(elfeed-entry ("www.youtube.com" . "yt:video:pOF11EDprxc") "Deno vs Oracle: The ugly custody battle for JavaScript…" "https://www.youtube.com/watch?v=pOF11EDprxc" 1756312859.0 nil nil nil (tech unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCsBjURrPoezykLs9EqgamOA" (:authors ((:name "Fireship" :uri "https://www.youtube.com/channel/UCsBjURrPoezykLs9EqgamOA")))) ("www.youtube.com" . "yt:video:ly6YKz9UfQ4") #s(elfeed-entry ("www.youtube.com" . "yt:video:ly6YKz9UfQ4") "New MIT study says most AI projects are doomed..." "https://www.youtube.com/watch?v=ly6YKz9UfQ4" 1756143386.0 nil nil nil (tech unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCsBjURrPoezykLs9EqgamOA" (:authors ((:name "Fireship" :uri "https://www.youtube.com/channel/UCsBjURrPoezykLs9EqgamOA")))) ("www.youtube.com" . "yt:video:uHm6FEb2Re4") #s(elfeed-entry ("www.youtube.com" . "yt:video:uHm6FEb2Re4") "DuckDB in 100 Seconds" "https://www.youtube.com/watch?v=uHm6FEb2Re4" 1755195802.0 nil nil nil (tech unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCsBjURrPoezykLs9EqgamOA" (:authors ((:name "Fireship" :uri "https://www.youtube.com/channel/UCsBjURrPoezykLs9EqgamOA")))) ("www.youtube.com" . "yt:video:8tx2viHpgA8") #s(elfeed-entry ("www.youtube.com" . "yt:video:8tx2viHpgA8") "GPT-5 is here... Can it win back programmers?" "https://www.youtube.com/watch?v=8tx2viHpgA8" 1754670234.0 nil nil nil (tech unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCsBjURrPoezykLs9EqgamOA" (:authors ((:name "Fireship" :uri "https://www.youtube.com/channel/UCsBjURrPoezykLs9EqgamOA")))) ("www.youtube.com" . "yt:video:0XvOOi6g5Ok") #s(elfeed-entry ("www.youtube.com" . "yt:video:0XvOOi6g5Ok") "Google’s Genie model makes realistic worlds in realtime…" "https://www.youtube.com/watch?v=0XvOOi6g5Ok" 1754495088.0 nil nil nil (tech unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCsBjURrPoezykLs9EqgamOA" (:authors ((:name "Fireship" :uri "https://www.youtube.com/channel/UCsBjURrPoezykLs9EqgamOA")))) ("www.youtube.com" . "yt:video:miTpJmMt7uo") #s(elfeed-entry ("www.youtube.com" . "yt:video:miTpJmMt7uo") "The dating app that doxxed 72,000 women..." "https://www.youtube.com/watch?v=miTpJmMt7uo" 1753887375.0 nil nil nil (tech unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCsBjURrPoezykLs9EqgamOA" (:authors ((:name "Fireship" :uri "https://www.youtube.com/channel/UCsBjURrPoezykLs9EqgamOA")))) ("www.youtube.com" . "yt:video:9xPFlFbk4fg") #s(elfeed-entry ("www.youtube.com" . "yt:video:9xPFlFbk4fg") "Playing Rogue-likes in GNU Guix - System Crafters Live!" "https://www.youtube.com/watch?v=9xPFlFbk4fg" 1759554905.0 nil nil nil (emacs youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCAiiOTio8Yu69c3XnR7nQBQ" (:authors ((:name "System Crafters" :uri "https://www.youtube.com/channel/UCAiiOTio8Yu69c3XnR7nQBQ")))) ("www.youtube.com" . "yt:video:dwJsaYGBKyc") #s(elfeed-entry ("www.youtube.com" . "yt:video:dwJsaYGBKyc") "Scheme Web Development with GNU Artanis - System Crafters Live!" "https://www.youtube.com/watch?v=dwJsaYGBKyc" 1758949502.0 nil nil nil (emacs unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCAiiOTio8Yu69c3XnR7nQBQ" (:authors ((:name "System Crafters" :uri "https://www.youtube.com/channel/UCAiiOTio8Yu69c3XnR7nQBQ")))) ("www.youtube.com" . "yt:video:6S2PnbQ8LwA") #s(elfeed-entry ("www.youtube.com" . "yt:video:6S2PnbQ8LwA") "Exploring Omarchy: A More Polished Arch Linux?" "https://www.youtube.com/watch?v=6S2PnbQ8LwA" 1757738954.0 nil nil nil (emacs unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCAiiOTio8Yu69c3XnR7nQBQ" (:authors ((:name "System Crafters" :uri "https://www.youtube.com/channel/UCAiiOTio8Yu69c3XnR7nQBQ")))) ("www.youtube.com" . "yt:video:9kSod-DS5WE") #s(elfeed-entry ("www.youtube.com" . "yt:video:9kSod-DS5WE") "Terminal Tools for Text Titans - System Crafters Live!" "https://www.youtube.com/watch?v=9kSod-DS5WE" 1756530307.0 nil nil nil (emacs unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCAiiOTio8Yu69c3XnR7nQBQ" (:authors ((:name "System Crafters" :uri "https://www.youtube.com/channel/UCAiiOTio8Yu69c3XnR7nQBQ")))) ("www.youtube.com" . "yt:video:3N5FVSSQGYs") #s(elfeed-entry ("www.youtube.com" . "yt:video:3N5FVSSQGYs") "Wiring Claude Code Into Emacs - System Crafters Live!" "https://www.youtube.com/watch?v=3N5FVSSQGYs" 1755925664.0 nil nil nil (emacs unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCAiiOTio8Yu69c3XnR7nQBQ" (:authors ((:name "System Crafters" :uri "https://www.youtube.com/channel/UCAiiOTio8Yu69c3XnR7nQBQ")))) ("www.youtube.com" . "yt:video:dScf-zwq4GM") #s(elfeed-entry ("www.youtube.com" . "yt:video:dScf-zwq4GM") "Crafting Reproducible OpenBSD Server Configs - System Crafters Live!" "https://www.youtube.com/watch?v=dScf-zwq4GM" 1753506687.0 nil nil nil (emacs unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCAiiOTio8Yu69c3XnR7nQBQ" (:authors ((:name "System Crafters" :uri "https://www.youtube.com/channel/UCAiiOTio8Yu69c3XnR7nQBQ")))) ("www.youtube.com" . "yt:video:ze1J7MG0sFg") #s(elfeed-entry ("www.youtube.com" . "yt:video:ze1J7MG0sFg") "Is the Default Emacs Completion UI Good? - System Crafters Live!" "https://www.youtube.com/watch?v=ze1J7MG0sFg" 1752902041.0 nil nil nil (emacs unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCAiiOTio8Yu69c3XnR7nQBQ" (:authors ((:name "System Crafters" :uri "https://www.youtube.com/channel/UCAiiOTio8Yu69c3XnR7nQBQ")))) ("www.youtube.com" . "yt:video:Ta2bR6fNwBQ") #s(elfeed-entry ("www.youtube.com" . "yt:video:Ta2bR6fNwBQ") "Efficient Multi-Project Hacking in Emacs - System Crafters Live!" "https://www.youtube.com/watch?v=Ta2bR6fNwBQ" 1751692858.0 nil nil nil (emacs unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCAiiOTio8Yu69c3XnR7nQBQ" (:authors ((:name "System Crafters" :uri "https://www.youtube.com/channel/UCAiiOTio8Yu69c3XnR7nQBQ")))) ("www.youtube.com" . "yt:video:kB-t9PSkch8") #s(elfeed-entry ("www.youtube.com" . "yt:video:kB-t9PSkch8") "Let's Talk About Keyboards - System Crafters Live!" "https://www.youtube.com/watch?v=kB-t9PSkch8" 1751087472.0 nil nil nil (emacs unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCAiiOTio8Yu69c3XnR7nQBQ" (:authors ((:name "System Crafters" :uri "https://www.youtube.com/channel/UCAiiOTio8Yu69c3XnR7nQBQ")))) ("www.youtube.com" . "yt:video:xqf6exp7wlI") #s(elfeed-entry ("www.youtube.com" . "yt:video:xqf6exp7wlI") "What's Special About 'M-x shell' in Emacs? - System Crafters Live!" "https://www.youtube.com/watch?v=xqf6exp7wlI" 1750481684.0 nil nil nil (emacs unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCAiiOTio8Yu69c3XnR7nQBQ" (:authors ((:name "System Crafters" :uri "https://www.youtube.com/channel/UCAiiOTio8Yu69c3XnR7nQBQ")))) ("www.youtube.com" . "yt:video:X7dSTEJK-uU") #s(elfeed-entry ("www.youtube.com" . "yt:video:X7dSTEJK-uU") "Forth: A Language Weirder Than Lisp? - System Crafters Live!" "https://www.youtube.com/watch?v=X7dSTEJK-uU" 1749877955.0 nil nil nil (emacs unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCAiiOTio8Yu69c3XnR7nQBQ" (:authors ((:name "System Crafters" :uri "https://www.youtube.com/channel/UCAiiOTio8Yu69c3XnR7nQBQ")))) ("www.youtube.com" . "yt:video:MEdGTQMqMYs") #s(elfeed-entry ("www.youtube.com" . "yt:video:MEdGTQMqMYs") "Taking a Look at OpenBSD - System Crafters Live!" "https://www.youtube.com/watch?v=MEdGTQMqMYs" 1748667960.0 nil nil nil (emacs unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCAiiOTio8Yu69c3XnR7nQBQ" (:authors ((:name "System Crafters" :uri "https://www.youtube.com/channel/UCAiiOTio8Yu69c3XnR7nQBQ")))) ("www.youtube.com" . "yt:video:zi99nFfNT-k") #s(elfeed-entry ("www.youtube.com" . "yt:video:zi99nFfNT-k") "Catching Up on Emacs News! - System Crafters Live" "https://www.youtube.com/watch?v=zi99nFfNT-k" 1748062829.0 nil nil nil (emacs unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCAiiOTio8Yu69c3XnR7nQBQ" (:authors ((:name "System Crafters" :uri "https://www.youtube.com/channel/UCAiiOTio8Yu69c3XnR7nQBQ")))) ("www.youtube.com" . "yt:video:ugT2aLo1wDg") #s(elfeed-entry ("www.youtube.com" . "yt:video:ugT2aLo1wDg") "Wrapping Up the Goblins MUD - System Crafters Live!" "https://www.youtube.com/watch?v=ugT2aLo1wDg" 1747458147.0 nil nil nil (emacs unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCAiiOTio8Yu69c3XnR7nQBQ" (:authors ((:name "System Crafters" :uri "https://www.youtube.com/channel/UCAiiOTio8Yu69c3XnR7nQBQ")))) ("www.youtube.com" . "yt:video:YwKYuqsFFPQ") #s(elfeed-entry ("www.youtube.com" . "yt:video:YwKYuqsFFPQ") "Wrapping Up the Goblins MUD - System Crafters Live!" "https://www.youtube.com/watch?v=YwKYuqsFFPQ" 1747455546.0 nil nil nil (emacs unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCAiiOTio8Yu69c3XnR7nQBQ" (:authors ((:name "System Crafters" :uri "https://www.youtube.com/channel/UCAiiOTio8Yu69c3XnR7nQBQ")))) ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/react-service-workers") #s(elfeed-entry ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/react-service-workers") "Exploring Service Workers with React: From Offline to Push Notifications" "https://rahuljuliato.com/posts/react-service-workers" 1758487495.0 #s(elfeed-ref "6a7616676342bc4fc3a53f1e3396c09dd7e3090d") html nil (dev emacs mustread unread) "https://www.rahuljuliato.com/rss.xml" nil) ("planet.emacslife.com" . "https://irreal.org/blog/?p=13311") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=13311") "Irreal: Blogging With Emacs" "https://irreal.org/blog/?p=13311" 1759505091.0 #s(elfeed-ref "cd1637fd91ca8509e18844c5348b1e46eaf3155b") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Irreal" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "https://lambdaland.org/posts/2025-10-03_reading_papers/") #s(elfeed-entry ("planet.emacslife.com" . "https://lambdaland.org/posts/2025-10-03_reading_papers/") "Lambda Land: How I Organize the Papers I Read" "https://lambdaland.org/posts/2025-10-03_reading_papers/" 1759449600.0 #s(elfeed-ref "cafa58e308dd672afe53a4069a5b9f0048fefe54") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Lambda Land" :uri "https://lambdaland.org/tags/emacs/")))) ("planet.emacslife.com" . "https://protesilaos.com/codelog/2025-10-03-emacs-standard-themes-on-top-modus/") #s(elfeed-entry ("planet.emacslife.com" . "https://protesilaos.com/codelog/2025-10-03-emacs-standard-themes-on-top-modus/") "Protesilaos Stavrou: Emacs: the ‘standard-themes’ are also built on top of the ‘modus-themes’" "https://protesilaos.com/codelog/2025-10-03-emacs-standard-themes-on-top-modus/" 1759449600.0 #s(elfeed-ref "6bc989d1dd599c6878bbab627e01eaa87dd95696") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Protesilaos Stavrou" :uri "https://protesilaos.com/codelog")))) ("planet.emacslife.com" . "https://www.hoowl.se/find_recently_modified_files_using_vertico_in_emacs.html") #s(elfeed-entry ("planet.emacslife.com" . "https://www.hoowl.se/find_recently_modified_files_using_vertico_in_emacs.html") "Hanno: Find recently modified files using =vertico= in Emacs" "https://www.hoowl.se/find_recently_modified_files_using_vertico_in_emacs.html" 1759442400.0 #s(elfeed-ref "2967b3873bbc06f69fe3f8a170656c4c01e08680") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Hanno" :uri "https://www.hoowl.se")))) ("planet.emacslife.com" . "https://flandrew.srht.site/listful/democratize-can-now-offer-more-than-6000-emacs-lisp-usage-examples.html") #s(elfeed-entry ("planet.emacslife.com" . "https://flandrew.srht.site/listful/democratize-can-now-offer-more-than-6000-emacs-lisp-usage-examples.html") "Listful Andrew: Democratize can now offer more than 6000 Emacs Lisp usage examples" "https://flandrew.srht.site/listful/democratize-can-now-offer-more-than-6000-emacs-lisp-usage-examples.html" 1759428000.0 #s(elfeed-ref "a4159111578e2fb37cc63760767f670535212d39") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Listful Andrew" :uri "https://flandrew.srht.site/listful")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=13309") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=13309") "Irreal: Org-transclusion" "https://irreal.org/blog/?p=13309" 1759420058.0 #s(elfeed-ref "b296028fa41e6950c08c007bf0bc72dd920c2ab5") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Irreal" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=13307") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=13307") "Irreal: Bending Emacs: Episode 1" "https://irreal.org/blog/?p=13307" 1759337001.0 #s(elfeed-ref "7b2c4a08b5ac10f447aa4a9cf17c434001c6f4f9") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Irreal" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "https://sachachua.com/blog/2025/10/doodling-icons-in-a-grid/") #s(elfeed-entry ("planet.emacslife.com" . "https://sachachua.com/blog/2025/10/doodling-icons-in-a-grid/") "Sacha Chua: Doodling icons in a grid" "https://sachachua.com/blog/2025/10/doodling-icons-in-a-grid/" 1759327974.0 #s(elfeed-ref "c76d0955ab0b29e41959920d6e62a7281da16ff9") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Sacha Chua" :uri "https://sachachua.com/blog/category/emacs/feed/index.xml")))) ("planet.emacslife.com" . "https://protesilaos.com/codelog/2025-10-01-emacs-modus-framework-ef-built-on-top/") #s(elfeed-entry ("planet.emacslife.com" . "https://protesilaos.com/codelog/2025-10-01-emacs-modus-framework-ef-built-on-top/") "Protesilaos Stavrou: Emacs: ‘modus-themes’ as a basis for other themes; ‘ef-themes’ is first" "https://protesilaos.com/codelog/2025-10-01-emacs-modus-framework-ef-built-on-top/" 1759276800.0 #s(elfeed-ref "ea9ad3035d8a71a3e9f7b49e299285a1800944cf") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Protesilaos Stavrou" :uri "https://protesilaos.com/codelog")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=13305") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=13305") "Irreal: The Author On Inhibit Mouse" "https://irreal.org/blog/?p=13305" 1759259568.0 #s(elfeed-ref "a4c9f8e15b4bcad7465bad31eab01b44bafb4a71") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Irreal" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "https://sachachua.com/blog/2025/09/org-mode-calculating-table-sums-using-tag-hierarchies/") #s(elfeed-entry ("planet.emacslife.com" . "https://sachachua.com/blog/2025/09/org-mode-calculating-table-sums-using-tag-hierarchies/") "Sacha Chua: Org Mode: calculating table sums using tag hierarchies" "https://sachachua.com/blog/2025/09/org-mode-calculating-table-sums-using-tag-hierarchies/" 1759241325.0 #s(elfeed-ref "28114adbe2b6c72b15e521b7e967c8c31fe90661") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Sacha Chua" :uri "https://sachachua.com/blog/category/emacs/feed/index.xml")))) ("planet.emacslife.com" . "https://blog.laurentcharignon.com/post/2025-09-30-llm-workflow-part1-pain-points/") #s(elfeed-entry ("planet.emacslife.com" . "https://blog.laurentcharignon.com/post/2025-09-30-llm-workflow-part1-pain-points/") "Laurent Charignon: Building Software Faster with LLMs: Part 1 - The Pain Points" "https://blog.laurentcharignon.com/post/2025-09-30-llm-workflow-part1-pain-points/" 1759190400.0 #s(elfeed-ref "1007d2516623e4de2f6ffde2d832e74b240784e2") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Laurent Charignon" :uri "https://blog.laurentcharignon.com/")))) ("planet.emacslife.com" . "https://blog.laurentcharignon.com/post/2025-09-30-llm-workflow-part2-ergonomics/") #s(elfeed-entry ("planet.emacslife.com" . "https://blog.laurentcharignon.com/post/2025-09-30-llm-workflow-part2-ergonomics/") "Laurent Charignon: Building Software Faster with LLMs: Part 2 - Ergonomics and Observability" "https://blog.laurentcharignon.com/post/2025-09-30-llm-workflow-part2-ergonomics/" 1759190400.0 #s(elfeed-ref "7b01ae12b0f70fab706461b5157b76c57b8d2b24") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Laurent Charignon" :uri "https://blog.laurentcharignon.com/")))) ("planet.emacslife.com" . "https://blog.laurentcharignon.com/post/2025-09-30-llm-workflow-part3-abstractions/") #s(elfeed-entry ("planet.emacslife.com" . "https://blog.laurentcharignon.com/post/2025-09-30-llm-workflow-part3-abstractions/") "Laurent Charignon: Building Software Faster with LLMs: Part 3 - Higher-Level Abstractions" "https://blog.laurentcharignon.com/post/2025-09-30-llm-workflow-part3-abstractions/" 1759190400.0 #s(elfeed-ref "cbee08161e0140b8f8a7ce3eddf3c9f475697753") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Laurent Charignon" :uri "https://blog.laurentcharignon.com/")))) ("planet.emacslife.com" . "https://blog.laurentcharignon.com/post/2025-09-30-llm-workflow-part4-experiments/") #s(elfeed-entry ("planet.emacslife.com" . "https://blog.laurentcharignon.com/post/2025-09-30-llm-workflow-part4-experiments/") "Laurent Charignon: Building Software Faster with LLMs: Part 4 - The Way We Build Software Is Rapidly Evolving" "https://blog.laurentcharignon.com/post/2025-09-30-llm-workflow-part4-experiments/" 1759190400.0 #s(elfeed-ref "ade15932e2108ec80447a71751d9f7af68e72bcf") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Laurent Charignon" :uri "https://blog.laurentcharignon.com/")))) ("planet.emacslife.com" . "https://blog.laurentcharignon.com/post/2025-09-30-llm-workflow-part5-learning/") #s(elfeed-entry ("planet.emacslife.com" . "https://blog.laurentcharignon.com/post/2025-09-30-llm-workflow-part5-learning/") "Laurent Charignon: Building Software Faster with LLMs: Part 5 - Learning and Knowledge Accumulation" "https://blog.laurentcharignon.com/post/2025-09-30-llm-workflow-part5-learning/" 1759190400.0 #s(elfeed-ref "57149983dbe686736546918aa5a04266c65158ca") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Laurent Charignon" :uri "https://blog.laurentcharignon.com/")))) ("planet.emacslife.com" . "https://protesilaos.com/codelog/2025-09-30-emacs-building-on-top-modus-themes/") #s(elfeed-entry ("planet.emacslife.com" . "https://protesilaos.com/codelog/2025-09-30-emacs-building-on-top-modus-themes/") "Protesilaos Stavrou: Emacs: building on top of the Modus themes" "https://protesilaos.com/codelog/2025-09-30-emacs-building-on-top-modus-themes/" 1759190400.0 #s(elfeed-ref "67b4e40f2c15cbd5511a282c30984f00b2cc4b1f") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Protesilaos Stavrou" :uri "https://protesilaos.com/codelog")))) ("planet.emacslife.com" . "https://xenodium.com/bending-emacs-episode-1") #s(elfeed-entry ("planet.emacslife.com" . "https://xenodium.com/bending-emacs-episode-1") "Alvaro Ramirez: Bending Emacs - Episode 1" "https://xenodium.com/bending-emacs-episode-1" 1759190400.0 #s(elfeed-ref "ed6cba9efe4dc6f59cf676c8ffc2592a32c8ee80") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Alvaro Ramirez" :uri "https://xenodium.com")))) ("planet.emacslife.com" . "https://baty.net/posts/2025/09/cal-dav-to-my-emacs-diary/") #s(elfeed-entry ("planet.emacslife.com" . "https://baty.net/posts/2025/09/cal-dav-to-my-emacs-diary/") "Jack Baty: CalDAV to my Emacs Diary" "https://baty.net/posts/2025/09/cal-dav-to-my-emacs-diary/" 1759181617.0 #s(elfeed-ref "06bbed59d920b294781eff144b6380e7a1aa5ba9") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Jack Baty" :uri "https://baty.net/")))) ("planet.emacslife.com" . "https://mbork.pl/2025-09-29_Improving_dired-show-file-type") #s(elfeed-entry ("planet.emacslife.com" . "https://mbork.pl/2025-09-29_Improving_dired-show-file-type") "Marcin Borkowski: Improving dired-show-file-type" "https://mbork.pl/2025-09-29_Improving_dired-show-file-type" 1759168174.0 #s(elfeed-ref "db9dff0040c25015bf45df5cd64531428fd97646") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Marcin Borkowski" :uri "https://mbork.pl/Homepage")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=13302") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=13302") "Irreal: Eliminating Emacs “Bloat”" "https://irreal.org/blog/?p=13302" 1759161656.0 #s(elfeed-ref "5809fdc0895ae4b09b82485ee490ddd38a79a9f1") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Irreal" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "https://sachachua.com/blog/2025/09/2025-09-29-emacs-news/") #s(elfeed-entry ("planet.emacslife.com" . "https://sachachua.com/blog/2025/09/2025-09-29-emacs-news/") "Sacha Chua: 2025-09-29 Emacs news" "https://sachachua.com/blog/2025/09/2025-09-29-emacs-news/" 1759150632.0 #s(elfeed-ref "67b2a29286f3f83bd6ca6885b1bd171f1b9a9b53") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Sacha Chua" :uri "https://sachachua.com/blog/category/emacs/feed/index.xml")))) ("planet.emacslife.com" . "https://chrismaiorana.com/efw-version2/") #s(elfeed-entry ("planet.emacslife.com" . "https://chrismaiorana.com/efw-version2/") "Chris Maiorana: Emacs For Writers Version 2 Has Arrived" "https://chrismaiorana.com/efw-version2/" 1759147202.0 #s(elfeed-ref "295b084b6bf380b12588341988b70a701233c966") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Chris Maiorana" :uri "https://chrismaiorana.com/category/emacs/")))) ("planet.emacslife.com" . "https://baty.net/posts/2025/09/ah-blogging/") #s(elfeed-entry ("planet.emacslife.com" . "https://baty.net/posts/2025/09/ah-blogging/") "Jack Baty: Ah, blogging" "https://baty.net/posts/2025/09/ah-blogging/" 1759140907.0 #s(elfeed-ref "5e16744f9079ff16c76a51e787194dd538b171ed") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Jack Baty" :uri "https://baty.net/")))) ("planet.emacslife.com" . "https://www.jamescherti.com/emacs-inhibit-mouse-disable-mouse/") #s(elfeed-entry ("planet.emacslife.com" . "https://www.jamescherti.com/emacs-inhibit-mouse-disable-mouse/") "James Cherti: inhibit-mouse.el – Deactivate mouse input in Emacs (Alternative to disable-mouse)" "https://www.jamescherti.com/emacs-inhibit-mouse-disable-mouse/" 1759083360.0 #s(elfeed-ref "e051716d4d9c0cd10b6f79aee77718019e1c5900") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "James Cherti" :uri "https://www.jamescherti.com")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=13300") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=13300") "Irreal: Obscure Emacs Packages: tmr" "https://irreal.org/blog/?p=13300" 1759073700.0 #s(elfeed-ref "ab707e31e8aebcd54740ab3689630bafc88b2915") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Irreal" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=13298") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=13298") "Irreal: Adding Web Links To BibTeX Via Org Protocol" "https://irreal.org/blog/?p=13298" 1758990701.0 #s(elfeed-ref "569ad783f8266e815b913673885acfed732bf8eb") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Irreal" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "https://www.jamescherti.com/emacs-flymake-bashate-bash/") #s(elfeed-entry ("planet.emacslife.com" . "https://www.jamescherti.com/emacs-flymake-bashate-bash/") "James Cherti: Emacs flymake-bashate.el – A Flymake backend for bashate that provides style checking for Bash shell scripts within Emacs" "https://www.jamescherti.com/emacs-flymake-bashate-bash/" 1758989100.0 #s(elfeed-ref "6b3991a8e52bec8b32d25d9ded14727b659eba69") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "James Cherti" :uri "https://www.jamescherti.com")))) ("planet.emacslife.com" . "https://www.jamescherti.com/emacs-enhanced-evil-paredit/") #s(elfeed-entry ("planet.emacslife.com" . "https://www.jamescherti.com/emacs-enhanced-evil-paredit/") "James Cherti: Emacs enhanced-evil-paredit.el package: Preventing Parenthesis Imbalance when Using Evil-mode with Paredit" "https://www.jamescherti.com/emacs-enhanced-evil-paredit/" 1758988690.0 #s(elfeed-ref "cc133ca2939151425d9ebcf2cc5b1babf77fa827") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "James Cherti" :uri "https://www.jamescherti.com")))) ("planet.emacslife.com" . "https://www.jamescherti.com/emacs-flymake-ansible-lint/") #s(elfeed-entry ("planet.emacslife.com" . "https://www.jamescherti.com/emacs-flymake-ansible-lint/") "James Cherti: Emacs flymake-ansible-lint.el – A Flymake backend for ansible-lint" "https://www.jamescherti.com/emacs-flymake-ansible-lint/" 1758988368.0 #s(elfeed-ref "0e080bc1bef7d6bc03fd21649a5ef28ba720aa29") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "James Cherti" :uri "https://www.jamescherti.com")))) ("planet.emacslife.com" . "https://lifeofpenguin.blogspot.com/2025/09/lisp-on-plan-9.html") #s(elfeed-entry ("planet.emacslife.com" . "https://lifeofpenguin.blogspot.com/2025/09/lisp-on-plan-9.html") "Anand Tamariya: Lisp on Plan 9" "https://lifeofpenguin.blogspot.com/2025/09/lisp-on-plan-9.html" 1758942240.0 #s(elfeed-ref "345cf1fabc35b2307113d80ec35c9be3232b3779") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Anand Tamariya" :uri "https://lifeofpenguin.blogspot.com/")))) ("planet.emacslife.com" . "http://ag91.github.io/blog/2025/09/27/how-to-make-ob-python-and-uv-work-together") #s(elfeed-entry ("planet.emacslife.com" . "http://ag91.github.io/blog/2025/09/27/how-to-make-ob-python-and-uv-work-together") "Andrea: How to make ob-python and UV work together" "http://ag91.github.io/blog/2025/09/27/how-to-make-ob-python-and-uv-work-together" 1758931200.0 #s(elfeed-ref "47fea84833fe5dc65932547cf9c42d1e09b65b61") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Andrea" :uri "http://ag91.github.io")))) ("planet.emacslife.com" . "https://protesilaos.com/codelog/2025-09-27-emacs-next-ef-themes-built-on-modus/") #s(elfeed-entry ("planet.emacslife.com" . "https://protesilaos.com/codelog/2025-09-27-emacs-next-ef-themes-built-on-modus/") "Protesilaos Stavrou: Emacs: the next ‘ef-themes’ will build on top of the ‘modus-themes’" "https://protesilaos.com/codelog/2025-09-27-emacs-next-ef-themes-built-on-modus/" 1758931200.0 #s(elfeed-ref "ae7e924c2ef2f3cd34a0b6a8520121a65f1e4420") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Protesilaos Stavrou" :uri "https://protesilaos.com/codelog")))) ("planet.emacslife.com" . "https://stebalien.com/blog/dim-minibuffer-prompt-when-unfocused/") #s(elfeed-entry ("planet.emacslife.com" . "https://stebalien.com/blog/dim-minibuffer-prompt-when-unfocused/") "Steven Allen: Dim Unfocused Minibuffer Prompts" "https://stebalien.com/blog/dim-minibuffer-prompt-when-unfocused/" 1758913200.0 #s(elfeed-ref "ca1bd356a40b32f3bbdda90a56a5bbd0913cf4aa") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Steven Allen")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=13296") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=13296") "Irreal: Casual BibTeX" "https://irreal.org/blog/?p=13296" 1758905711.0 #s(elfeed-ref "f2f99d3b02a69b0b50af855e91fa5e094c9542ed") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Irreal" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "https://baty.net/posts/2025/09/including-emacs-diary-entries-in-howm-menu/") #s(elfeed-entry ("planet.emacslife.com" . "https://baty.net/posts/2025/09/including-emacs-diary-entries-in-howm-menu/") "Jack Baty: Including Emacs diary entries in Howm menu" "https://baty.net/posts/2025/09/including-emacs-diary-entries-in-howm-menu/" 1758897957.0 #s(elfeed-ref "34b860c76ded24936d54630e8399c635f55e9b0d") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Jack Baty" :uri "https://baty.net/")))) ("planet.emacslife.com" . "https://www.masteringemacs.org/article/thoughts-on-mechanical-keyboards-zsa-moonlander?utm_source=newsletter&utm_medium=rss") #s(elfeed-entry ("planet.emacslife.com" . "https://www.masteringemacs.org/article/thoughts-on-mechanical-keyboards-zsa-moonlander?utm_source=newsletter&utm_medium=rss") "Mickey Petersen: Thoughts on Mechanical Keyboards and the ZSA Moonlander" "https://www.masteringemacs.org/article/thoughts-on-mechanical-keyboards-zsa-moonlander?utm_source=newsletter&utm_medium=rss" 1758885405.0 #s(elfeed-ref "c1c8cc64b444597bf9de4f0b2b510a5305953abb") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Mickey Petersen" :uri "https://www.masteringemacs.org/feed")))) ("planet.emacslife.com" . "https://emacs.dyerdwelling.family/emacs/20250926100543-emacs--planning-my-weekly-meals-in-emacs/") #s(elfeed-entry ("planet.emacslife.com" . "https://emacs.dyerdwelling.family/emacs/20250926100543-emacs--planning-my-weekly-meals-in-emacs/") "James Dyer: Planning my Weekly Meals in Emacs!" "https://emacs.dyerdwelling.family/emacs/20250926100543-emacs--planning-my-weekly-meals-in-emacs/" 1758877500.0 #s(elfeed-ref "fbdfb37372b01fb2a0cdface4911792068516eb1") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "James Dyer" :uri "https://emacs.dyerdwelling.family/tags/emacs/")))) ("planet.emacslife.com" . "http://yummymelon.com/devnull/storing-a-link-from-your-web-browser-to-bibtex-using-org-protocol.html") #s(elfeed-entry ("planet.emacslife.com" . "http://yummymelon.com/devnull/storing-a-link-from-your-web-browser-to-bibtex-using-org-protocol.html") "Charles Choi: Storing a Link from your Web Browser to BibTeX using Org protocol" "http://yummymelon.com/devnull/storing-a-link-from-your-web-browser-to-bibtex-using-org-protocol.html" 1758842100.0 #s(elfeed-ref "bc5f065240f0d9ef0c646f5a405203bab70d64ae") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Charles Choi" :uri "http://yummymelon.com/devnull/")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=13294") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=13294") "Irreal: Obscure Emacs Packages: Yankpad" "https://irreal.org/blog/?p=13294" 1758815456.0 #s(elfeed-ref "657b9d5968b35e5c44b356fbde18c5aee47e9c91") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Irreal" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "https://baty.net/posts/2025/09/why-does-it-matter-if-i-use-emacs-or-not/") #s(elfeed-entry ("planet.emacslife.com" . "https://baty.net/posts/2025/09/why-does-it-matter-if-i-use-emacs-or-not/") "Jack Baty: Why does it matter if I use Emacs or not?" "https://baty.net/posts/2025/09/why-does-it-matter-if-i-use-emacs-or-not/" 1758791820.0 #s(elfeed-ref "97d83b081006b9cd94eda00e8be35420d66bbfc2") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Jack Baty" :uri "https://baty.net/")))) ("planet.emacslife.com" . "https://macadie.info/2025/09/25/2025-09-austin-emacs-meetup/") #s(elfeed-entry ("planet.emacslife.com" . "https://macadie.info/2025/09/25/2025-09-austin-emacs-meetup/") "Eric MacAdie: 2025-09 Austin Emacs Meetup" "https://macadie.info/2025/09/25/2025-09-austin-emacs-meetup/" 1758777516.0 #s(elfeed-ref "71cf83130349924f7b1b8fa5b11c4beb990d1b61") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Eric MacAdie" :uri "https://macadie.info")))) ("planet.emacslife.com" . "https://protesilaos.com/codelog/2025-09-25-emacs-ef-themes-1-11-0/") #s(elfeed-entry ("planet.emacslife.com" . "https://protesilaos.com/codelog/2025-09-25-emacs-ef-themes-1-11-0/") "Protesilaos Stavrou: Emacs: ef-themes version 1.11.0" "https://protesilaos.com/codelog/2025-09-25-emacs-ef-themes-1-11-0/" 1758758400.0 #s(elfeed-ref "ede935d9b693b2ed214f21f288d7fa5c677e79d5") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Protesilaos Stavrou" :uri "https://protesilaos.com/codelog")))) ("planet.emacslife.com" . "https://xenodium.com/introducing-agent-shell") #s(elfeed-entry ("planet.emacslife.com" . "https://xenodium.com/introducing-agent-shell") "Alvaro Ramirez: Introducing Emacs agent-shell (powered by ACP)" "https://xenodium.com/introducing-agent-shell" 1758758400.0 #s(elfeed-ref "9b01b7b297b30b9a120eb9006faaa0f26b836222") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Alvaro Ramirez" :uri "https://xenodium.com")))) ("planet.emacslife.com" . "http://yummymelon.com/devnull/announcing-casual-bibtex.html") #s(elfeed-entry ("planet.emacslife.com" . "http://yummymelon.com/devnull/announcing-casual-bibtex.html") "Charles Choi: Announcing Casual BibTeX" "http://yummymelon.com/devnull/announcing-casual-bibtex.html" 1758754800.0 #s(elfeed-ref "5e4d5915b3a9fb51209ad3a92d32af9802c8fb69") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Charles Choi" :uri "http://yummymelon.com/devnull/")))) ("planet.emacslife.com" . "https://onlisp.co.uk/Use-a-more-responsive-Emacs-by-testing-the-IGC-development-branch.html") #s(elfeed-entry ("planet.emacslife.com" . "https://onlisp.co.uk/Use-a-more-responsive-Emacs-by-testing-the-IGC-development-branch.html") "J.e.r.e.m.y B.r.y.a.n.t: Use a more responsive Emacs by testing the IGC development branch" "https://onlisp.co.uk/Use-a-more-responsive-Emacs-by-testing-the-IGC-development-branch.html" 1758753062.0 #s(elfeed-ref "98980cdb7776af016e4627d19765fcd463f676e7") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "J.e.r.e.m.y B.r.y.a.n.t")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=13292") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=13292") "Irreal: On “Everything In Emacs”" "https://irreal.org/blog/?p=13292" 1758740412.0 #s(elfeed-ref "efa66d9c706e2251f84a3406c7d3dbbf46585901") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Irreal" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "https://sachachua.com/blog/2025/09/org-mode-a-latex-letter-that-includes-pdfs-and-hyperlinked-page-numbers/") #s(elfeed-entry ("planet.emacslife.com" . "https://sachachua.com/blog/2025/09/org-mode-a-latex-letter-that-includes-pdfs-and-hyperlinked-page-numbers/") "Sacha Chua: Org Mode: a LaTeX letter that includes PDFs and hyperlinked page numbers" "https://sachachua.com/blog/2025/09/org-mode-a-latex-letter-that-includes-pdfs-and-hyperlinked-page-numbers/" 1758735900.0 #s(elfeed-ref "62d44f387996c690c545872c1d407a8d96263fdb") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Sacha Chua" :uri "https://sachachua.com/blog/category/emacs/feed/index.xml")))) ("planet.emacslife.com" . "https://emacs-apac.gitlab.io/announcements/september-2025/") #s(elfeed-entry ("planet.emacslife.com" . "https://emacs-apac.gitlab.io/announcements/september-2025/") "Emacs APAC: Announcing Emacs Asia-Pacific (APAC) virtual meetup, Saturday, September 27, 2025" "https://emacs-apac.gitlab.io/announcements/september-2025/" 1758734116.0 #s(elfeed-ref "bc7f697e96a9597e3657af1764dc9d362765f5d3") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Emacs APAC" :uri "https://emacs-apac.gitlab.io/categories/event/")))) ("planet.emacslife.com" . "https://kisaragi-hiu.com/2025-09-25-emacs-cmake/") #s(elfeed-entry ("planet.emacslife.com" . "https://kisaragi-hiu.com/2025-09-25-emacs-cmake/") "Kisaragi Hiu: How I currently (2025) set up Emacs for C++ and CMake" "https://kisaragi-hiu.com/2025-09-25-emacs-cmake/" 1758728036.0 #s(elfeed-ref "b59ab3bd8f23910e58ff4259ab3ff9dfa06ee8bc") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Kisaragi Hiu" :uri "https://kisaragi-hiu.com/")))) ("planet.emacslife.com" . "https://lars.ingebrigtsen.no/2025/09/24/who-is-that-actor-on-the-screen-emacs-llm-fun-redux/") #s(elfeed-entry ("planet.emacslife.com" . "https://lars.ingebrigtsen.no/2025/09/24/who-is-that-actor-on-the-screen-emacs-llm-fun-redux/") "Lars Ingebrigtsen: Who is that actor on the screen? Emacs/LLM/Fun Redux" "https://lars.ingebrigtsen.no/2025/09/24/who-is-that-actor-on-the-screen-emacs-llm-fun-redux/" 1758720702.0 #s(elfeed-ref "f2a543b1d4a5a60b1f97be2bd758acbf1aa94571") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Lars Ingebrigtsen" :uri "https://lars.ingebrigtsen.no")))) ("planet.emacslife.com" . "https://randyridenour.net/posts/2025-09-21-obscure-emacs-package-yankpad.html") #s(elfeed-entry ("planet.emacslife.com" . "https://randyridenour.net/posts/2025-09-21-obscure-emacs-package-yankpad.html") "Randy Ridenour: An Obscure Emacs Package: Yankpad" "https://randyridenour.net/posts/2025-09-21-obscure-emacs-package-yankpad.html" 1758711360.0 #s(elfeed-ref "4517e354d408cf5b0df305d04ef115e656028c23") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Randy Ridenour")))) ("planet.emacslife.com" . "https://protesilaos.com/codelog/2025-09-24-prot-asks-ekaitz-guix-bootstrapability-foss-basque/") #s(elfeed-entry ("planet.emacslife.com" . "https://protesilaos.com/codelog/2025-09-24-prot-asks-ekaitz-guix-bootstrapability-foss-basque/") "Protesilaos Stavrou: Prot Asks: Ekaitz about Guix, bootstrapability, FOSS advocacy, and the Basque country" "https://protesilaos.com/codelog/2025-09-24-prot-asks-ekaitz-guix-bootstrapability-foss-basque/" 1758672000.0 #s(elfeed-ref "50753adc48bead9cafda410d5c9ddaf697d8c8ad") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Protesilaos Stavrou" :uri "https://protesilaos.com/codelog")))) ("planet.emacslife.com" . "https://protesilaos.com/codelog/2025-09-24-emacs-example-denote-custom-identifier/") #s(elfeed-entry ("planet.emacslife.com" . "https://protesilaos.com/codelog/2025-09-24-emacs-example-denote-custom-identifier/") "Protesilaos Stavrou: Emacs: example of a custom Denote identifier to include day of week data" "https://protesilaos.com/codelog/2025-09-24-emacs-example-denote-custom-identifier/" 1758672000.0 #s(elfeed-ref "f8a5219842ea9501b9a0c07b42b2c491a1c19102") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Protesilaos Stavrou" :uri "https://protesilaos.com/codelog")))) ("planet.emacslife.com" . "https://www.cyan.sh/blog/posts/obscure-package-tmr.html") #s(elfeed-entry ("planet.emacslife.com" . "https://www.cyan.sh/blog/posts/obscure-package-tmr.html") "Jakub Nowak: Obscure Package (?): tmr" "https://www.cyan.sh/blog/posts/obscure-package-tmr.html" 1758672000.0 #s(elfeed-ref "90cf286edc2a8e6cc5b411229c525d4219de7b44") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Jakub Nowak" :uri "https://www.cyan.sh/blog/feed.xml")))) ("planet.emacslife.com" . "https://baty.net/journal/2025/09/23/today/") #s(elfeed-entry ("planet.emacslife.com" . "https://baty.net/journal/2025/09/23/today/") "Jack Baty: Tuesday, September 23, 2025" "https://baty.net/journal/2025/09/23/today/" 1758635830.0 #s(elfeed-ref "57ba81d2c935d5512e0988752d95346da6efbd0b") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Jack Baty" :uri "https://baty.net/")))) ("planet.emacslife.com" . "https://mbork.pl/2025-09-22_Faking_today&apos;s_date_in_Org") #s(elfeed-entry ("planet.emacslife.com" . "https://mbork.pl/2025-09-22_Faking_today&apos;s_date_in_Org") "Marcin Borkowski: Faking today's date in Org" "https://mbork.pl/2025-09-22_Faking_today's_date_in_Org" 1758562796.0 #s(elfeed-ref "a68682e2240f8b2443b8a38c3c0345173c583ec3") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Marcin Borkowski" :uri "https://mbork.pl/Homepage")))) ("planet.emacslife.com" . "https://sachachua.com/blog/2025/09/emacs-cycle-through-different-paragraph-formats-all-on-one-line-wrapped-max-one-sentence-per-line-one-sentence-per-line/") #s(elfeed-entry ("planet.emacslife.com" . "https://sachachua.com/blog/2025/09/emacs-cycle-through-different-paragraph-formats-all-on-one-line-wrapped-max-one-sentence-per-line-one-sentence-per-line/") "Sacha Chua: Emacs: Cycle through different paragraph formats: all on one line, wrapped, max one sentence per line, one sentence per line" "https://sachachua.com/blog/2025/09/emacs-cycle-through-different-paragraph-formats-all-on-one-line-wrapped-max-one-sentence-per-line-one-sentence-per-line/" 1758553101.0 #s(elfeed-ref "9e8faf33da2e3dc10fe4a1b7732aadde9c9fcac6") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Sacha Chua" :uri "https://sachachua.com/blog/category/emacs/feed/index.xml")))) ("planet.emacslife.com" . "https://sachachua.com/blog/2025/09/2025-09-22-emacs-news/") #s(elfeed-entry ("planet.emacslife.com" . "https://sachachua.com/blog/2025/09/2025-09-22-emacs-news/") "Sacha Chua: 2025-09-22 Emacs news" "https://sachachua.com/blog/2025/09/2025-09-22-emacs-news/" 1758545276.0 #s(elfeed-ref "62f77fca7d5a9fe3f313c4521b3862db9a100245") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Sacha Chua" :uri "https://sachachua.com/blog/category/emacs/feed/index.xml")))) ("planet.emacslife.com" . "https://donaldh.wtf/2025/09/a-minimal-config-for-emacs-on-macos/") #s(elfeed-entry ("planet.emacslife.com" . "https://donaldh.wtf/2025/09/a-minimal-config-for-emacs-on-macos/") "Donald Hunter: A minimal config for Emacs on macOS" "https://donaldh.wtf/2025/09/a-minimal-config-for-emacs-on-macos/" 1758488400.0 #s(elfeed-ref "1b86c2bd8545497a8fdde27ad4607f89899f5ad7") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Donald Hunter" :uri "https://donaldh.wtf/tags/emacs/")))) ("planet.emacslife.com" . "https://sachachua.com/blog/2025/09/adding-org-mode-link-awesomeness-elsewhere-my-org-insert-link-dwim/") #s(elfeed-entry ("planet.emacslife.com" . "https://sachachua.com/blog/2025/09/adding-org-mode-link-awesomeness-elsewhere-my-org-insert-link-dwim/") "Sacha Chua: Adding Org Mode link awesomeness elsewhere: my-org-insert-link-dwim" "https://sachachua.com/blog/2025/09/adding-org-mode-link-awesomeness-elsewhere-my-org-insert-link-dwim/" 1758481876.0 #s(elfeed-ref "b9f08c43a0024104eb984fc7dc9bce7aeb10c0f4") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Sacha Chua" :uri "https://sachachua.com/blog/category/emacs/feed/index.xml")))) ("planet.emacslife.com" . "https://takeonrules.com/2025/09/21/adding-more-link-description-defaults/") #s(elfeed-entry ("planet.emacslife.com" . "https://takeonrules.com/2025/09/21/adding-more-link-description-defaults/") "Jeremy Friesen: Adding More Link Description Defaults" "https://takeonrules.com/2025/09/21/adding-more-link-description-defaults/" 1758462817.0 #s(elfeed-ref "669049cf2635cc3db073c89fdc0492b7e9932de0") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Jeremy Friesen" :uri "https://takeonrules.com/")))) ("planet.emacslife.com" . "https://lars.ingebrigtsen.no/2025/09/21/who-knows-what-actors-lurk-in-the-heart-of-movies-the-llm-knows/") #s(elfeed-entry ("planet.emacslife.com" . "https://lars.ingebrigtsen.no/2025/09/21/who-knows-what-actors-lurk-in-the-heart-of-movies-the-llm-knows/") "Lars Ingebrigtsen: Who knows what actors lurk in the hearts of movies? The LLM knows!" "https://lars.ingebrigtsen.no/2025/09/21/who-knows-what-actors-lurk-in-the-heart-of-movies-the-llm-knows/" 1758416907.0 #s(elfeed-ref "7df8e4f8bf077fa3dd36de26294419fcd3e1fb4c") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Lars Ingebrigtsen" :uri "https://lars.ingebrigtsen.no")))) ("planet.emacslife.com" . "https://manueluberti.eu/posts/2025-09-21-date-at-point/") #s(elfeed-entry ("planet.emacslife.com" . "https://manueluberti.eu/posts/2025-09-21-date-at-point/") "Manuel Uberti: Insert date at point" "https://manueluberti.eu/posts/2025-09-21-date-at-point/" 1758412800.0 #s(elfeed-ref "8780b2aae90eafc4d907a92354bc30945725b906") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Manuel Uberti" :uri "https://manueluberti.eu/tags/emacs/")))) ("planet.emacslife.com" . "https://takeonrules.com/2025/09/20/generating-descriptions-of-org-insert-link/") #s(elfeed-entry ("planet.emacslife.com" . "https://takeonrules.com/2025/09/20/generating-descriptions-of-org-insert-link/") "Jeremy Friesen: Generating Descriptions of org-insert-link" "https://takeonrules.com/2025/09/20/generating-descriptions-of-org-insert-link/" 1758398354.0 #s(elfeed-ref "ba2f64126eb460e5d4ab5f710544e5f79e6e0323") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Jeremy Friesen" :uri "https://takeonrules.com/")))) ("lwn.net" . "https://lwn.net/Articles/1031669/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1031669/") "[$] A look at the Robot Operating System" "https://lwn.net/Articles/1031669/" 1759504007.0 #s(elfeed-ref "2d37a515d51a528405420a65b4f014b874fadb97") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "jzb")))) ("lwn.net" . "https://lwn.net/Articles/1040729/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1040729/") "Security updates for Friday" "https://lwn.net/Articles/1040729/" 1759498299.0 #s(elfeed-ref "25baa74dc3d374bc218e203004dca582ffc70962") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "daroc")))) ("lwn.net" . "https://lwn.net/Articles/1040663/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1040663/") "Ian Kelling is the new FSF president" "https://lwn.net/Articles/1040663/" 1759469983.0 #s(elfeed-ref "8293ad3a2467b72b83bab5c2ed6790cf08991978") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "corbet")))) ("lwn.net" . "https://lwn.net/Articles/1039784/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1039784/") "[$] Kernel hackers at Cauldron, 2025 edition" "https://lwn.net/Articles/1039784/" 1759415513.0 #s(elfeed-ref "8c83579cc769e6e2d05c4a456634a1869e58534f") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "corbet")))) ("lwn.net" . "https://lwn.net/Articles/1040593/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1040593/") "Seven new stable kernels" "https://lwn.net/Articles/1040593/" 1759415490.0 #s(elfeed-ref "66593848c7dd2759419c6d8d094b020d9b804184") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "jake")))) ("lwn.net" . "https://lwn.net/Articles/1040591/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1040591/") "Security updates for Thursday" "https://lwn.net/Articles/1040591/" 1759415133.0 #s(elfeed-ref "ec265cade51a6e969c9845ea51a2abdbea6ffb02") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "jake")))) ("lwn.net" . "https://lwn.net/Articles/1039529/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1039529/") "[$] LWN.net Weekly Edition for October 2, 2025" "https://lwn.net/Articles/1039529/" 1759367112.0 #s(elfeed-ref "439a2591e6ce6d536365809b2313e0b248c61ff4") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "corbet")))) ("lwn.net" . "https://lwn.net/Articles/1040410/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1040410/") "Alpine Linux plans /usr merge" "https://lwn.net/Articles/1040410/" 1759341163.0 #s(elfeed-ref "8fc43c5e60d7a3485cdfaca0e9e2e9ed55f50942") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "jzb")))) ("lwn.net" . "https://lwn.net/Articles/1039623/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1039623/") "[$] Fedora floats AI-assisted contributions policy" "https://lwn.net/Articles/1039623/" 1759327588.0 #s(elfeed-ref "2c15e80d66fc251fde8a0692fdf9cc28528514ec") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "jzb")))) ("lwn.net" . "https://lwn.net/Articles/1040375/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1040375/") "Security updates for Wednesday" "https://lwn.net/Articles/1040375/" 1759324406.0 #s(elfeed-ref "e726636c0e367a91d028ee90b33902412ed0a1eb") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "jzb")))) ("lwn.net" . "https://lwn.net/Articles/1040323/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1040323/") "OpenSUSE Leap 16 released" "https://lwn.net/Articles/1040323/" 1759323671.0 #s(elfeed-ref "8945765a3c6514459f95601512c474a877d4d28a") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "corbet")))) ("lwn.net" . "https://lwn.net/Articles/1040236/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1040236/") "Radicle 1.5.0 released" "https://lwn.net/Articles/1040236/" 1759262088.0 #s(elfeed-ref "f06ea80dec73ee151d0e5e349cf1ab5d1f969435") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "jzb")))) ("lwn.net" . "https://lwn.net/Articles/1038750/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1038750/") "[$] Linting Rust code in the kernel" "https://lwn.net/Articles/1038750/" 1759252978.0 #s(elfeed-ref "b7b49862b90203e1ab6edd9d20b6e157c3108ca0") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "daroc")))) ("lwn.net" . "https://lwn.net/Articles/1040152/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1040152/") "Security updates for Tuesday" "https://lwn.net/Articles/1040152/" 1759223454.0 #s(elfeed-ref "4f68e0c946cb27d71b55444ef6f398655be9f3b6") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "corbet")))) ("lwn.net" . "https://lwn.net/Articles/1040120/") #s(elfeed-entry ("lwn.net" . "https://lwn.net/Articles/1040120/") "Bcachefs removed from the mainline kernel" "https://lwn.net/Articles/1040120/" 1759216220.0 #s(elfeed-ref "d0ea79005c697814851935bfdb64138ad58b8a47") html nil (linux unread) "https://lwn.net/headlines/rss" (:authors ((:name "corbet")))) ("irreal.org" . "https://irreal.org/blog/?p=13311") #s(elfeed-entry ("irreal.org" . "https://irreal.org/blog/?p=13311") "Blogging With Emacs" "https://irreal.org/blog/?p=13311" 1759505091.0 #s(elfeed-ref "7e9b272cdffaf32ac3ee9272a1a315dd1121bcd2") html nil (dev emacs mustread unread) "https://irreal.org/blog/?feed=rss2" (:authors ((:name "jcs")) :categories ("General" "Emacs"))) ("irreal.org" . "https://irreal.org/blog/?p=13309") #s(elfeed-entry ("irreal.org" . "https://irreal.org/blog/?p=13309") "Org-transclusion" "https://irreal.org/blog/?p=13309" 1759420058.0 #s(elfeed-ref "b2730916e7d1624f6a16cf46ec6ea81b7046445c") html nil (dev emacs mustread unread) "https://irreal.org/blog/?feed=rss2" (:authors ((:name "jcs")) :categories ("General" "Emacs" "Org-mode"))) ("irreal.org" . "https://irreal.org/blog/?p=13307") #s(elfeed-entry ("irreal.org" . "https://irreal.org/blog/?p=13307") "Bending Emacs: Episode 1" "https://irreal.org/blog/?p=13307" 1759337001.0 #s(elfeed-ref "7b66fd3ddabf3c9417879d1c8adf0cf7ccb294cc") html nil (dev emacs mustread unread) "https://irreal.org/blog/?feed=rss2" (:authors ((:name "jcs")) :categories ("General" "Emacs"))) ("irreal.org" . "https://irreal.org/blog/?p=13305") #s(elfeed-entry ("irreal.org" . "https://irreal.org/blog/?p=13305") "The Author On Inhibit Mouse" "https://irreal.org/blog/?p=13305" 1759259568.0 #s(elfeed-ref "ce58b724f81b97f1ffe009d775543e049fb788e6") html nil (dev emacs mustread unread) "https://irreal.org/blog/?feed=rss2" (:authors ((:name "jcs")) :categories ("General" "Emacs"))) ("irreal.org" . "https://irreal.org/blog/?p=13302") #s(elfeed-entry ("irreal.org" . "https://irreal.org/blog/?p=13302") "Eliminating Emacs “Bloat”" "https://irreal.org/blog/?p=13302" 1759161656.0 #s(elfeed-ref "3c44947e53325443b971a67c34cc3c05bb9b8c6a") html nil (dev emacs mustread unread) "https://irreal.org/blog/?feed=rss2" (:authors ((:name "jcs")) :categories ("General" "Emacs"))) ("irreal.org" . "https://irreal.org/blog/?p=13300") #s(elfeed-entry ("irreal.org" . "https://irreal.org/blog/?p=13300") "Obscure Emacs Packages: tmr" "https://irreal.org/blog/?p=13300" 1759073700.0 #s(elfeed-ref "9a7d85ce146b6a454d7d6aa3404341b85fb32059") html nil (dev emacs mustread unread) "https://irreal.org/blog/?feed=rss2" (:authors ((:name "jcs")) :categories ("General" "Emacs"))) ("irreal.org" . "https://irreal.org/blog/?p=13298") #s(elfeed-entry ("irreal.org" . "https://irreal.org/blog/?p=13298") "Adding Web Links To BibTeX Via Org Protocol" "https://irreal.org/blog/?p=13298" 1758990701.0 #s(elfeed-ref "a2ee996a76ca5d176cf5be891333b69e438d2798") html nil (dev emacs mustread unread) "https://irreal.org/blog/?feed=rss2" (:authors ((:name "jcs")) :categories ("General" "Emacs"))) ("irreal.org" . "https://irreal.org/blog/?p=13296") #s(elfeed-entry ("irreal.org" . "https://irreal.org/blog/?p=13296") "Casual BibTeX" "https://irreal.org/blog/?p=13296" 1758905711.0 #s(elfeed-ref "4b417130c33f61f6c2748d3edefbf57920c4d932") html nil (dev emacs mustread unread) "https://irreal.org/blog/?feed=rss2" (:authors ((:name "jcs")) :categories ("General" "Emacs"))) ("irreal.org" . "https://irreal.org/blog/?p=13294") #s(elfeed-entry ("irreal.org" . "https://irreal.org/blog/?p=13294") "Obscure Emacs Packages: Yankpad" "https://irreal.org/blog/?p=13294" 1758815456.0 #s(elfeed-ref "ee4a8e9b43180fe19f3ecd10fe09d5f06f2ec152") html nil (dev emacs mustread unread) "https://irreal.org/blog/?feed=rss2" (:authors ((:name "jcs")) :categories ("General" "Emacs"))) ("irreal.org" . "https://irreal.org/blog/?p=13292") #s(elfeed-entry ("irreal.org" . "https://irreal.org/blog/?p=13292") "On “Everything In Emacs”" "https://irreal.org/blog/?p=13292" 1758740412.0 #s(elfeed-ref "3748e02dfde496a0d676d8cbfaab40d0bcf45c0e") html nil (dev emacs mustread unread) "https://irreal.org/blog/?feed=rss2" (:authors ((:name "jcs")) :categories ("General" "Emacs"))) ("blog.sigplan.org" . "https://blog.sigplan.org/?p=3062") #s(elfeed-entry ("blog.sigplan.org" . "https://blog.sigplan.org/?p=3062") "Think Globally, Discuss PL Locally" "https://blog.sigplan.org/2025/09/16/think-globally-discuss-pl-locally/" 1758028176.0 #s(elfeed-ref "b242e6e70acdb58bc64c63eb6b3ad9295ee06dc6") html nil (dev theory unread) "https://blog.sigplan.org/feed/" (:authors ((:name "Harrison Goldstein")) :categories ("Uncategorized"))) ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/new-blog-post-a-very-early-history-of-algebraic/") #s(elfeed-entry ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/new-blog-post-a-very-early-history-of-algebraic/") "New Blog Post: \" A Very Early History of Algebraic Data Types\"" "https://buttondown.com/hillelwayne/archive/new-blog-post-a-very-early-history-of-algebraic/" 1758819058.0 #s(elfeed-ref "aecd824ea4c977821b060ff67b73b45fa583ffe2") html nil (dev theory unread) "https://buttondown.email/hillelwayne/rss" nil) ("feeds.feedburner.com" . "https://symfony.com/blog/a-week-of-symfony-979-september-29-october-5-2025?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") #s(elfeed-entry ("feeds.feedburner.com" . "https://symfony.com/blog/a-week-of-symfony-979-september-29-october-5-2025?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") "A Week of Symfony #979 (September 29 – October 5, 2025)" "https://symfony.com/blog/a-week-of-symfony-979-september-29-october-5-2025?utm_source=Symfony%20Blog%20Feed&utm_medium=feed" 1759647900.0 #s(elfeed-ref "05d04ce057bcffb5bbbc6766c10798c831e2249b") html nil (dev unread web) "http://feeds.feedburner.com/symfony/blog" (:authors ((:name " Javier Eguiluz ")))) ("www.youtube.com" . "yt:video:7HCgYshdap0") #s(elfeed-entry ("www.youtube.com" . "yt:video:7HCgYshdap0") "So This Is Why Meta's Demo Failed" "https://www.youtube.com/watch?v=7HCgYshdap0" 1759589340.0 nil nil nil (tech unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCUyeluBRhGPCW4rPe_UvBZQ" (:authors ((:name "ThePrimeTime" :uri "https://www.youtube.com/channel/UCUyeluBRhGPCW4rPe_UvBZQ")))) ("www.youtube.com" . "yt:video:-j8PzkZ70Lg") #s(elfeed-entry ("www.youtube.com" . "yt:video:-j8PzkZ70Lg") "Why complex exponents matter | Laplace Transform Prelude" "https://www.youtube.com/watch?v=-j8PzkZ70Lg" 1759672408.0 nil nil nil (edu unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UCYO_jab_esuFRV4b17AJtAw" (:authors ((:name "3Blue1Brown" :uri "https://www.youtube.com/channel/UCYO_jab_esuFRV4b17AJtAw")))) ("www.youtube.com" . "yt:video:fQryiKaNmzE") #s(elfeed-entry ("www.youtube.com" . "yt:video:fQryiKaNmzE") "Prot Asks: Christian about indie dev, philosophy of experiences, Zettelkasten" "https://www.youtube.com/watch?v=fQryiKaNmzE" 1759662765.0 nil nil nil (emacs unread youtube) "https://www.youtube.com/feeds/videos.xml?channel_id=UC0uTPqBCFIpZxlz_Lv1tk_g" (:authors ((:name "Protesilaos Stavrou" :uri "https://www.youtube.com/channel/UC0uTPqBCFIpZxlz_Lv1tk_g")))) ("irreal.org" . "https://irreal.org/blog/?p=13315") #s(elfeed-entry ("irreal.org" . "https://irreal.org/blog/?p=13315") "How RSS Beat Microsoft" "https://irreal.org/blog/?p=13315" 1759677175.0 #s(elfeed-ref "012a454eca0d0c1528071d74f8fb16fc75ab5961") html nil (dev emacs mustread unread) "https://irreal.org/blog/?feed=rss2" (:authors ((:name "jcs")) :categories ("General" "RSS" "Tech"))) ("irreal.org" . "https://irreal.org/blog/?p=13313") #s(elfeed-entry ("irreal.org" . "https://irreal.org/blog/?p=13313") "Ashton Wiersdorf On Organizing Papers For Research" "https://irreal.org/blog/?p=13313" 1759589845.0 #s(elfeed-ref "5a6659e4c1bf3a8d3116045c7d9191a56bfc9af8") html nil (dev emacs mustread) "https://irreal.org/blog/?feed=rss2" (:authors ((:name "jcs")) :categories ("General" "Emacs"))) ("planet.emacslife.com" . "https://onlisp.co.uk/Emacs-Garbage-collection-improvements-by-using-the-GCMH-package.html") #s(elfeed-entry ("planet.emacslife.com" . "https://onlisp.co.uk/Emacs-Garbage-collection-improvements-by-using-the-GCMH-package.html") "J.e.r.e.m.y B.r.y.a.n.t: Emacs Garbage collection improvements by using the GCMH package" "https://onlisp.co.uk/Emacs-Garbage-collection-improvements-by-using-the-GCMH-package.html" 1759689062.0 #s(elfeed-ref "12b83fe9f103c1bfbc9703a15a5b80319a8fd690") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "J.e.r.e.m.y B.r.y.a.n.t")))) ("planet.emacslife.com" . "https://protesilaos.com/codelog/2025-10-05-prot-asks-christian-indie-dev-philosophy-experiences-zettelkasten/") #s(elfeed-entry ("planet.emacslife.com" . "https://protesilaos.com/codelog/2025-10-05-prot-asks-christian-indie-dev-philosophy-experiences-zettelkasten/") "Protesilaos Stavrou: Prot Asks: Christian about indie dev, philosophy of experiences, Zettelkasten" "https://protesilaos.com/codelog/2025-10-05-prot-asks-christian-indie-dev-philosophy-experiences-zettelkasten/" 1759622400.0 #s(elfeed-ref "5e38a6393796c64622df2de761b1490b71c68232") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Protesilaos Stavrou" :uri "https://protesilaos.com/codelog")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=13313") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=13313") "Irreal: Ashton Wiersdorf On Organizing Papers For Research" "https://irreal.org/blog/?p=13313" 1759589845.0 #s(elfeed-ref "e0cdfa70a49b2105789bf0970ae02779fb349610") html nil (dev emacs mustread unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Irreal" :uri "https://irreal.org/blog")))) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-10-05-prot-asks-christian-indie-dev-philosophy-experiences-zettelkasten/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-10-05-prot-asks-christian-indie-dev-philosophy-experiences-zettelkasten/") "Prot Asks: Christian about indie dev, philosophy of experiences, Zettelkasten" "https://protesilaos.com/codelog/2025-10-05-prot-asks-christian-indie-dev-philosophy-experiences-zettelkasten/" 1759622400.0 #s(elfeed-ref "5534793bb33fe49665972f1726f8c5be4e36b459") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/keeb/2025-10-04-switch-marketing-impressions/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/keeb/2025-10-04-switch-marketing-impressions/") "My impression of the marketing around mechanical keyboard switches" "https://protesilaos.com/keeb/2025-10-04-switch-marketing-impressions/" 1759536000.0 #s(elfeed-ref "5ab4b65a130f37c891196223ce2c7e1e4355d749") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-10-03-emacs-standard-themes-on-top-modus/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-10-03-emacs-standard-themes-on-top-modus/") "Emacs: the ‘standard-themes’ are also built on top of the ‘modus-themes’" "https://protesilaos.com/codelog/2025-10-03-emacs-standard-themes-on-top-modus/" 1759449600.0 #s(elfeed-ref "eb39aa18769257a47e8cab861f8e91f93a49ced1") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/interpretations/2025-10-02-asimos-world-bankruptcy/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/interpretations/2025-10-02-asimos-world-bankruptcy/") "Interpretation of “At this world’s bankruptcy” by Nikolas Asimos" "https://protesilaos.com/interpretations/2025-10-02-asimos-world-bankruptcy/" 1759363200.0 #s(elfeed-ref "916d54124a6893dd012533afc93531bea43ca0f9") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-10-01-emacs-modus-framework-ef-built-on-top/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-10-01-emacs-modus-framework-ef-built-on-top/") "Emacs: ‘modus-themes’ as a basis for other themes; ‘ef-themes’ is first" "https://protesilaos.com/codelog/2025-10-01-emacs-modus-framework-ef-built-on-top/" 1759276800.0 #s(elfeed-ref "d395bf8ff0308a7456dda6edcf0752c8a1634368") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-09-30-emacs-building-on-top-modus-themes/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-09-30-emacs-building-on-top-modus-themes/") "Emacs: building on top of the Modus themes" "https://protesilaos.com/codelog/2025-09-30-emacs-building-on-top-modus-themes/" 1759190400.0 #s(elfeed-ref "c9cd3ab27bf80fea927c3fddd2e97dd5ae4e7229") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/poems/2025-09-28-regretful-and-bitter/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/poems/2025-09-28-regretful-and-bitter/") "Poem: Regretful and bitter" "https://protesilaos.com/poems/2025-09-28-regretful-and-bitter/" 1759017600.0 #s(elfeed-ref "d49a6686061b92ccf198d44c7654970497f22a0d") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-09-27-emacs-next-ef-themes-built-on-modus/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-09-27-emacs-next-ef-themes-built-on-modus/") "Emacs: the next ‘ef-themes’ will build on top of the ‘modus-themes’" "https://protesilaos.com/codelog/2025-09-27-emacs-next-ef-themes-built-on-modus/" 1758931200.0 #s(elfeed-ref "1ca1f82b7fcb636e07c3cba36b4c43034cdddcd5") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/commentary/2025-09-26-when-no-way-dig/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/commentary/2025-09-26-when-no-way-dig/") "When there is no way, you have to dig" "https://protesilaos.com/commentary/2025-09-26-when-no-way-dig/" 1758844800.0 #s(elfeed-ref "2fcf514700022a22f2a8401bed0f13aee3fc85a1") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-09-25-emacs-ef-themes-1-11-0/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-09-25-emacs-ef-themes-1-11-0/") "Emacs: ef-themes version 1.11.0" "https://protesilaos.com/codelog/2025-09-25-emacs-ef-themes-1-11-0/" 1758758400.0 #s(elfeed-ref "8dc16b8b66f0329a97d44e606de35b64b1b63692") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/poems/2025-09-24-letters-in-bottles/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/poems/2025-09-24-letters-in-bottles/") "Poem: Letters in bottles" "https://protesilaos.com/poems/2025-09-24-letters-in-bottles/" 1758672000.0 #s(elfeed-ref "aedada58f20089f7944346c42dbd3f088fbec777") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-09-24-prot-asks-ekaitz-guix-bootstrapability-foss-basque/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-09-24-prot-asks-ekaitz-guix-bootstrapability-foss-basque/") "Prot Asks: Ekaitz about Guix, bootstrapability, FOSS advocacy, and the Basque country" "https://protesilaos.com/codelog/2025-09-24-prot-asks-ekaitz-guix-bootstrapability-foss-basque/" 1758672000.0 #s(elfeed-ref "e83e6c8f61f7f724d71b4e9cf45da6c97c67efbd") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-09-24-emacs-example-denote-custom-identifier/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-09-24-emacs-example-denote-custom-identifier/") "Emacs: example of a custom Denote identifier to include day of week data" "https://protesilaos.com/codelog/2025-09-24-emacs-example-denote-custom-identifier/" 1758672000.0 #s(elfeed-ref "0d61f4c1605be3b51f9664b657b564f13323321b") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/poems/2025-09-23-point-we-meet/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/poems/2025-09-23-point-we-meet/") "Poem: At the point we meet" "https://protesilaos.com/poems/2025-09-23-point-we-meet/" 1758585600.0 #s(elfeed-ref "f5d5063305df511c7b00aacc13e167becf8b7c06") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/commentary/2025-09-23-how-walk-four-dogs/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/commentary/2025-09-23-how-walk-four-dogs/") "Re: How do you walk four dogs?" "https://protesilaos.com/commentary/2025-09-23-how-walk-four-dogs/" 1758585600.0 #s(elfeed-ref "758fbd1f780ae6b3db4dc59727121773842c2889") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/books/2025-09-21-first-walk-then-think-for-yourself/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/books/2025-09-21-first-walk-then-think-for-yourself/") "Philosophy: first you walk, then you think for yourself" "https://protesilaos.com/books/2025-09-21-first-walk-then-think-for-yourself/" 1758412800.0 #s(elfeed-ref "962b2550e23a616dc2fc63a835cf5b5e6a62e5e9") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/poems/2025-09-20-happenstance/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/poems/2025-09-20-happenstance/") "Poem: Happenstance" "https://protesilaos.com/poems/2025-09-20-happenstance/" 1758326400.0 #s(elfeed-ref "fc9f9f9d61859bb73a3cf84d29f4d3fb6db89778") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-09-20-emacs-denote-custom-identifiers/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-09-20-emacs-denote-custom-identifiers/") "Emacs: the next version of Denote will support custom identifiers" "https://protesilaos.com/codelog/2025-09-20-emacs-denote-custom-identifiers/" 1758326400.0 #s(elfeed-ref "dce328715d54cf1e2a4276a85d25ca2f3ff46dd3") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/commentary/2025-09-20-conditioning-inner-critic/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/commentary/2025-09-20-conditioning-inner-critic/") "Conditioning the inner critic" "https://protesilaos.com/commentary/2025-09-20-conditioning-inner-critic/" 1758326400.0 #s(elfeed-ref "815ea8d5097199c9e31df94fddc74eba4c27b9b3") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/poems/2025-09-19-my-hesitation/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/poems/2025-09-19-my-hesitation/") "Poem: My hesitation" "https://protesilaos.com/poems/2025-09-19-my-hesitation/" 1758240000.0 #s(elfeed-ref "db4e64a8030d597e4d8692e7887ec0a2b35b40a5") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/commentary/2025-09-19-re-toughness-ancient-sparta/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/commentary/2025-09-19-re-toughness-ancient-sparta/") "Re: is ancient Sparta an influence on you?" "https://protesilaos.com/commentary/2025-09-19-re-toughness-ancient-sparta/" 1758240000.0 #s(elfeed-ref "356a7b62cbd8dce7647c5db6b538d5de2a45db56") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/codelog/2025-09-18-prot-asks-julien-emacs-nix-guix-reproducibility/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/codelog/2025-09-18-prot-asks-julien-emacs-nix-guix-reproducibility/") "Prot Asks: Julien about Emacs, functional package managers, Nix, Guix, and reproducibility" "https://protesilaos.com/codelog/2025-09-18-prot-asks-julien-emacs-nix-guix-reproducibility/" 1758153600.0 #s(elfeed-ref "a83fe936dbfe30419e5f4d1b3151a7b9a980e6e8") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/commentary/2025-09-17-re-how-do-you-do-food/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/commentary/2025-09-17-re-how-do-you-do-food/") "Re: how do you do food?" "https://protesilaos.com/commentary/2025-09-17-re-how-do-you-do-food/" 1758067200.0 #s(elfeed-ref "b7157c1686ff4d1a0f022bb8711fb0530eb1922b") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("protesilaos.com" . "https://protesilaos.com/news/2025-09-15-oreeon-snake-bite-update/") #s(elfeed-entry ("protesilaos.com" . "https://protesilaos.com/news/2025-09-15-oreeon-snake-bite-update/") "Vlog: Oreeon got bitten by a snake and is okay now" "https://protesilaos.com/news/2025-09-15-oreeon-snake-bite-update/" 1757894400.0 #s(elfeed-ref "101fd4d7386a3aad1ec40306e29512442a959502") html nil (dev emacs mustread unread) "https://protesilaos.com/master.xml" nil) ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=81&rev2=80") #s(elfeed-entry ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=81&rev2=80") "Linux_6.17" "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=81&rev2=80" 1759663602.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (c dev unread) "https://kernelnewbies.org/RecentChanges?action=rss_rc&ddiffs=1" nil) ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=80&rev2=79") #s(elfeed-entry ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=80&rev2=79") "Linux_6.17" "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=80&rev2=79" 1759660764.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (c dev unread) "https://kernelnewbies.org/RecentChanges?action=rss_rc&ddiffs=1" nil) ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=79&rev2=78") #s(elfeed-entry ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=79&rev2=78") "Linux_6.17" "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=79&rev2=78" 1759660650.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (c dev unread) "https://kernelnewbies.org/RecentChanges?action=rss_rc&ddiffs=1" nil) ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=78&rev2=77") #s(elfeed-entry ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=78&rev2=77") "Linux_6.17" "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=78&rev2=77" 1759660102.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (c dev unread) "https://kernelnewbies.org/RecentChanges?action=rss_rc&ddiffs=1" nil) ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=77&rev2=76") #s(elfeed-entry ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=77&rev2=76") "Linux_6.17" "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=77&rev2=76" 1759660064.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (c dev unread) "https://kernelnewbies.org/RecentChanges?action=rss_rc&ddiffs=1" nil) ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=76&rev2=75") #s(elfeed-entry ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=76&rev2=75") "Linux_6.17" "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=76&rev2=75" 1759660024.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (c dev unread) "https://kernelnewbies.org/RecentChanges?action=rss_rc&ddiffs=1" nil) ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=75&rev2=74") #s(elfeed-entry ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=75&rev2=74") "Linux_6.17" "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=75&rev2=74" 1759659997.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (c dev unread) "https://kernelnewbies.org/RecentChanges?action=rss_rc&ddiffs=1" nil) ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=74&rev2=73") #s(elfeed-entry ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=74&rev2=73") "Linux_6.17" "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=74&rev2=73" 1759659915.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (c dev unread) "https://kernelnewbies.org/RecentChanges?action=rss_rc&ddiffs=1" nil) ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=73&rev2=72") #s(elfeed-entry ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=73&rev2=72") "Linux_6.17" "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=73&rev2=72" 1759659877.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (c dev unread) "https://kernelnewbies.org/RecentChanges?action=rss_rc&ddiffs=1" nil) ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=72&rev2=71") #s(elfeed-entry ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=72&rev2=71") "Linux_6.17" "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=72&rev2=71" 1759655370.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (c dev unread) "https://kernelnewbies.org/RecentChanges?action=rss_rc&ddiffs=1" nil) ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=71&rev2=70") #s(elfeed-entry ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=71&rev2=70") "Linux_6.17" "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=71&rev2=70" 1759653961.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (c dev unread) "https://kernelnewbies.org/RecentChanges?action=rss_rc&ddiffs=1" nil) ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=70&rev2=69") #s(elfeed-entry ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=70&rev2=69") "Linux_6.17" "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=70&rev2=69" 1759653512.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (c dev unread) "https://kernelnewbies.org/RecentChanges?action=rss_rc&ddiffs=1" nil) ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=69&rev2=68") #s(elfeed-entry ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=69&rev2=68") "Linux_6.17" "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=69&rev2=68" 1759651644.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (c dev unread) "https://kernelnewbies.org/RecentChanges?action=rss_rc&ddiffs=1" nil) ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=68&rev2=67") #s(elfeed-entry ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=68&rev2=67") "Linux_6.17" "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=68&rev2=67" 1759651508.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (c dev unread) "https://kernelnewbies.org/RecentChanges?action=rss_rc&ddiffs=1" nil) ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=67&rev2=66") #s(elfeed-entry ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=67&rev2=66") "Linux_6.17" "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=67&rev2=66" 1759651480.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (c dev unread) "https://kernelnewbies.org/RecentChanges?action=rss_rc&ddiffs=1" nil))) :index #s(avl-tree- [[[[[[[[[[[nil nil ("planet.emacslife.com" . "https://onlisp.co.uk/Emacs-Garbage-collection-improvements-by-using-the-GCMH-package.html") 0] [nil [nil nil ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=81&rev2=80") 0] ("www.youtube.com" . "yt:video:-j8PzkZ70Lg") 1] ("irreal.org" . "https://irreal.org/blog/?p=13315") 1] [[nil nil ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=80&rev2=79") 0] nil ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=79&rev2=78") -1] ("www.youtube.com" . "yt:video:fQryiKaNmzE") -1] [[[[nil nil ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=77&rev2=76") 0] [nil nil ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=75&rev2=74") 0] ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=76&rev2=75") 0] [[[nil nil ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=73&rev2=72") 0] [nil nil ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=71&rev2=70") 0] ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=72&rev2=71") 0] [[nil nil ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=69&rev2=68") 0] [nil nil ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=67&rev2=66") 0] ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=68&rev2=67") 0] ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=70&rev2=69") 0] ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=74&rev2=73") 1] [[nil nil ("protesilaos.com" . "https://protesilaos.com/codelog/2025-10-05-prot-asks-christian-indie-dev-philosophy-experiences-zettelkasten/") 0] [[nil nil ("planet.emacslife.com" . "https://irreal.org/blog/?p=13313") 0] nil ("irreal.org" . "https://irreal.org/blog/?p=13313") -1] ("planet.emacslife.com" . "https://protesilaos.com/codelog/2025-10-05-prot-asks-christian-indie-dev-philosophy-experiences-zettelkasten/") 1] ("feeds.feedburner.com" . "https://symfony.com/blog/a-week-of-symfony-979-september-29-october-5-2025?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") -1] ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.17?action=diff&rev1=78&rev2=77") 1] [[[[nil [nil nil ("protesilaos.com" . "https://protesilaos.com/keeb/2025-10-04-switch-marketing-impressions/") 0] ("www.youtube.com" . "yt:video:9xPFlFbk4fg") 1] [[nil nil ("planet.emacslife.com" . "https://irreal.org/blog/?p=13311") 0] [nil nil ("lwn.net" . "https://lwn.net/Articles/1031669/") 0] ("irreal.org" . "https://irreal.org/blog/?p=13311") 0] ("www.youtube.com" . "yt:video:SquU4Bpc73Y") 0] [[[nil nil ("lwn.net" . "https://lwn.net/Articles/1040729/") 0] [[nil nil ("protesilaos.com" . "https://protesilaos.com/codelog/2025-10-03-emacs-standard-themes-on-top-modus/") 0] nil ("planet.emacslife.com" . "https://protesilaos.com/codelog/2025-10-03-emacs-standard-themes-on-top-modus/") -1] ("lwn.net" . "https://lwn.net/Articles/1040663/") 1] [nil [nil nil ("planet.emacslife.com" . "https://flandrew.srht.site/listful/democratize-can-now-offer-more-than-6000-emacs-lisp-usage-examples.html") 0] ("planet.emacslife.com" . "https://www.hoowl.se/find_recently_modified_files_using_vertico_in_emacs.html") 1] ("planet.emacslife.com" . "https://lambdaland.org/posts/2025-10-03_reading_papers/") -1] ("www.youtube.com" . "yt:video:iN1qbdRxy9E") 1] [[[[nil nil ("planet.emacslife.com" . "https://irreal.org/blog/?p=13309") 0] [nil nil ("lwn.net" . "https://lwn.net/Articles/1039784/") 0] ("irreal.org" . "https://irreal.org/blog/?p=13309") 0] [[[nil nil ("lwn.net" . "https://lwn.net/Articles/1040591/") 0] [nil nil ("protesilaos.com" . "https://protesilaos.com/interpretations/2025-10-02-asimos-world-bankruptcy/") 0] ("lwn.net" . "https://lwn.net/Articles/1039529/") 0] [[nil nil ("lwn.net" . "https://lwn.net/Articles/1040410/") 0] [nil nil ("irreal.org" . "https://irreal.org/blog/?p=13307") 0] ("planet.emacslife.com" . "https://irreal.org/blog/?p=13307") 0] ("www.youtube.com" . "yt:video:hkSj-QapfZo") 0] ("lwn.net" . "https://lwn.net/Articles/1040593/") 1] [[[nil nil ("planet.emacslife.com" . "https://sachachua.com/blog/2025/10/doodling-icons-in-a-grid/") 0] [nil [nil nil ("lwn.net" . "https://lwn.net/Articles/1040323/") 0] ("lwn.net" . "https://lwn.net/Articles/1040375/") 1] ("lwn.net" . "https://lwn.net/Articles/1039623/") 1] [[[nil nil ("protesilaos.com" . "https://protesilaos.com/codelog/2025-10-01-emacs-modus-framework-ef-built-on-top/") 0] [nil nil ("lwn.net" . "https://lwn.net/Articles/1040236/") 0] ("planet.emacslife.com" . "https://protesilaos.com/codelog/2025-10-01-emacs-modus-framework-ef-built-on-top/") 0] [[nil nil ("irreal.org" . "https://irreal.org/blog/?p=13305") 0] [nil nil ("lwn.net" . "https://lwn.net/Articles/1038750/") 0] ("www.youtube.com" . "yt:video:Bo6lYPJSqlA") 0] ("planet.emacslife.com" . "https://irreal.org/blog/?p=13305") 0] ("feeds.feedburner.com" . "https://symfony.com/blog/symfonycon-amsterdam-2025-let-s-build-a-raffler-with-websockets?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") 0] ("sachachua.com" . "https://sachachua.com/blog/2025/10/doodling-icons-in-a-grid/") 0] ("feeds.feedburner.com" . "https://symfony.com/blog/symfonycon-amsterdam-2025-emerging-ai-design-patterns-in-symfony?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") 0] ("www.youtube.com" . "yt:video:7HCgYshdap0") 0] [[[[[nil nil ("planet.emacslife.com" . "https://sachachua.com/blog/2025/09/org-mode-calculating-table-sums-using-tag-hierarchies/") 0] nil ("feeds.feedburner.com" . "https://symfony.com/blog/symfonycon-amsterdam-2025-unleash-the-power-of-symfony-messenger?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") -1] [[nil nil ("lwn.net" . "https://lwn.net/Articles/1040152/") 0] [nil nil ("protesilaos.com" . "https://protesilaos.com/codelog/2025-09-30-emacs-building-on-top-modus-themes/") 0] ("lwn.net" . "https://lwn.net/Articles/1040120/") 0] ("nullprogram.com" . "urn:uuid:ffce917f-c757-42e7-a4d1-55e8d80c5051") 0] [[nil nil ("planet.emacslife.com" . "https://protesilaos.com/codelog/2025-09-30-emacs-building-on-top-modus-themes/") 0] [[nil nil ("planet.emacslife.com" . "https://blog.laurentcharignon.com/post/2025-09-30-llm-workflow-part4-experiments/") 0] [nil nil ("planet.emacslife.com" . "https://blog.laurentcharignon.com/post/2025-09-30-llm-workflow-part2-ergonomics/") 0] ("planet.emacslife.com" . "https://blog.laurentcharignon.com/post/2025-09-30-llm-workflow-part3-abstractions/") 0] ("planet.emacslife.com" . "https://blog.laurentcharignon.com/post/2025-09-30-llm-workflow-part5-learning/") 1] ("planet.emacslife.com" . "https://xenodium.com/bending-emacs-episode-1") 0] [[[[nil nil ("planet.emacslife.com" . "https://baty.net/posts/2025/09/cal-dav-to-my-emacs-diary/") 0] [nil nil ("planet.emacslife.com" . "https://mbork.pl/2025-09-29_Improving_dired-show-file-type") 0] ("www.youtube.com" . "yt:video:bS9R6aCVEzw") 0] [[nil [nil nil ("irreal.org" . "https://irreal.org/blog/?p=13302") 0] ("planet.emacslife.com" . "https://irreal.org/blog/?p=13302") 1] [nil nil ("planet.emacslife.com" . "https://sachachua.com/blog/2025/09/2025-09-29-emacs-news/") 0] ("sachachua.com" . "https://sachachua.com/blog/2025/09/2025-09-29-emacs-news/") -1] ("www.youtube.com" . "yt:video:MJIMxBEdKBQ") 1] [[nil nil ("planet.emacslife.com" . "https://baty.net/posts/2025/09/ah-blogging/") 0] [[nil nil ("planet.emacslife.com" . "https://www.jamescherti.com/emacs-inhibit-mouse-disable-mouse/") 0] [nil nil ("irreal.org" . "https://irreal.org/blog/?p=13300") 0] ("planet.emacslife.com" . "https://irreal.org/blog/?p=13300") 0] ("www.youtube.com" . "yt:video:F1KgHCSpT_0") 1] ("planet.emacslife.com" . "https://chrismaiorana.com/efw-version2/") -1] ("planet.emacslife.com" . "https://blog.laurentcharignon.com/post/2025-09-30-llm-workflow-part1-pain-points/") 1] ("sachachua.com" . "https://sachachua.com/blog/2025/09/org-mode-calculating-table-sums-using-tag-hierarchies/") -1] [[[[[[[nil nil ("protesilaos.com" . "https://protesilaos.com/poems/2025-09-28-regretful-and-bitter/") 0] nil ("www.youtube.com" . "yt:video:4RdIU71yJlY") -1] [[nil nil ("irreal.org" . "https://irreal.org/blog/?p=13298") 0] nil ("planet.emacslife.com" . "https://www.jamescherti.com/emacs-flymake-bashate-bash/") -1] ("planet.emacslife.com" . "https://irreal.org/blog/?p=13298") 0] [[nil nil ("planet.emacslife.com" . "https://www.jamescherti.com/emacs-flymake-ansible-lint/") 0] nil ("feeds.feedburner.com" . "https://symfony.com/blog/symfony-7-3-4-released?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") -1] ("planet.emacslife.com" . "https://www.jamescherti.com/emacs-enhanced-evil-paredit/") -1] [[[nil nil ("www.youtube.com" . "yt:video:dwJsaYGBKyc") 0] [nil nil ("protesilaos.com" . "https://protesilaos.com/codelog/2025-09-27-emacs-next-ef-themes-built-on-modus/") 0] ("planet.emacslife.com" . "https://lifeofpenguin.blogspot.com/2025/09/lisp-on-plan-9.html") 0] [nil [nil nil ("planet.emacslife.com" . "https://stebalien.com/blog/dim-minibuffer-prompt-when-unfocused/") 0] ("planet.emacslife.com" . "http://ag91.github.io/blog/2025/09/27/how-to-make-ob-python-and-uv-work-together") 1] ("planet.emacslife.com" . "https://protesilaos.com/codelog/2025-09-27-emacs-next-ef-themes-built-on-modus/") 0] ("feeds.feedburner.com" . "https://symfony.com/blog/symfony-6-4-26-released?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") -1] [[[[nil [nil nil ("irreal.org" . "https://irreal.org/blog/?p=13296") 0] ("planet.emacslife.com" . "https://irreal.org/blog/?p=13296") 1] [nil nil ("planet.emacslife.com" . "https://www.masteringemacs.org/article/thoughts-on-mechanical-keyboards-zsa-moonlander?utm_source=newsletter&utm_medium=rss") 0] ("planet.emacslife.com" . "https://baty.net/posts/2025/09/including-emacs-diary-entries-in-howm-menu/") -1] [[nil nil ("planet.emacslife.com" . "https://emacs.dyerdwelling.family/emacs/20250926100543-emacs--planning-my-weekly-meals-in-emacs/") 0] [nil nil ("planet.emacslife.com" . "http://yummymelon.com/devnull/storing-a-link-from-your-web-browser-to-bibtex-using-org-protocol.html") 0] ("protesilaos.com" . "https://protesilaos.com/commentary/2025-09-26-when-no-way-dig/") 0] ("feeds.feedburner.com" . "https://symfony.com/blog/symfonycon-amsterdam-2025-a-productive-frontend-stack-with-symfony-ux?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") -1] [[[[[nil nil ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/new-blog-post-a-very-early-history-of-algebraic/") 0] nil ("planet.emacslife.com" . "https://irreal.org/blog/?p=13294") -1] [nil nil ("planet.emacslife.com" . "https://baty.net/posts/2025/09/why-does-it-matter-if-i-use-emacs-or-not/") 0] ("irreal.org" . "https://irreal.org/blog/?p=13294") -1] [[nil nil ("protesilaos.com" . "https://protesilaos.com/codelog/2025-09-25-emacs-ef-themes-1-11-0/") 0] [nil nil ("planet.emacslife.com" . "https://protesilaos.com/codelog/2025-09-25-emacs-ef-themes-1-11-0/") 0] ("planet.emacslife.com" . "https://xenodium.com/introducing-agent-shell") 0] ("planet.emacslife.com" . "https://macadie.info/2025/09/25/2025-09-austin-emacs-meetup/") -1] [[nil nil ("planet.emacslife.com" . "https://onlisp.co.uk/Use-a-more-responsive-Emacs-by-testing-the-IGC-development-branch.html") 0] [[nil nil ("planet.emacslife.com" . "https://irreal.org/blog/?p=13292") 0] [nil nil ("www.youtube.com" . "yt:video:DC2p3kFjcK0") 0] ("irreal.org" . "https://irreal.org/blog/?p=13292") 0] ("www.youtube.com" . "yt:video:yUOScCe6yiQ") 1] ("planet.emacslife.com" . "http://yummymelon.com/devnull/announcing-casual-bibtex.html") -1] ("www.youtube.com" . "yt:video:AE77XJNVGMQ") 1] ("www.youtube.com" . "yt:video:HQgVsSI2kI0") 1] [[[[[nil [nil nil ("planet.emacslife.com" . "https://emacs-apac.gitlab.io/announcements/september-2025/") 0] ("planet.emacslife.com" . "https://sachachua.com/blog/2025/09/org-mode-a-latex-letter-that-includes-pdfs-and-hyperlinked-page-numbers/") 1] [nil nil ("planet.emacslife.com" . "https://kisaragi-hiu.com/2025-09-25-emacs-cmake/") 0] ("nullprogram.com" . "urn:uuid:30d4b889-d14b-4b32-b389-858fb3dde34b") -1] [[nil nil ("www.youtube.com" . "yt:video:h3WaPyDc3ik") 0] [[nil nil ("protesilaos.com" . "https://protesilaos.com/poems/2025-09-24-letters-in-bottles/") 0] [nil nil ("protesilaos.com" . "https://protesilaos.com/codelog/2025-09-24-emacs-example-denote-custom-identifier/") 0] ("protesilaos.com" . "https://protesilaos.com/codelog/2025-09-24-prot-asks-ekaitz-guix-bootstrapability-foss-basque/") 0] ("planet.emacslife.com" . "https://randyridenour.net/posts/2025-09-21-obscure-emacs-package-yankpad.html") 1] ("planet.emacslife.com" . "https://lars.ingebrigtsen.no/2025/09/24/who-is-that-actor-on-the-screen-emacs-llm-fun-redux/") 0] [[nil [nil nil ("planet.emacslife.com" . "https://protesilaos.com/codelog/2025-09-24-emacs-example-denote-custom-identifier/") 0] ("planet.emacslife.com" . "https://protesilaos.com/codelog/2025-09-24-prot-asks-ekaitz-guix-bootstrapability-foss-basque/") 1] [[[nil nil ("planet.emacslife.com" . "https://baty.net/journal/2025/09/23/today/") 0] nil ("feeds.feedburner.com" . "https://symfony.com/blog/symfonycon-amsterdam-2025-rediscover-the-console?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") -1] [[nil nil ("protesilaos.com" . "https://protesilaos.com/commentary/2025-09-23-how-walk-four-dogs/") 0] [nil nil ("www.youtube.com" . "yt:video:LkAj5DcrgsA") 0] ("planet.emacslife.com" . "https://mbork.pl/2025-09-22_Faking_today&apos;s_date_in_Org") 0] ("protesilaos.com" . "https://protesilaos.com/poems/2025-09-23-point-we-meet/") 0] ("www.youtube.com" . "yt:video:5Z2oPUyDANI") 1] ("planet.emacslife.com" . "https://www.cyan.sh/blog/posts/obscure-package-tmr.html") 0] [[[[[nil nil ("planet.emacslife.com" . "https://sachachua.com/blog/2025/09/emacs-cycle-through-different-paragraph-formats-all-on-one-line-wrapped-max-one-sentence-per-line-one-sentence-per-line/") 0] nil ("feeds.feedburner.com" . "https://symfony.com/blog/symfonycon-amsterdam-2025-strategic-ddd?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") -1] [nil [nil nil ("planet.emacslife.com" . "https://donaldh.wtf/2025/09/a-minimal-config-for-emacs-on-macos/") 0] ("planet.emacslife.com" . "https://sachachua.com/blog/2025/09/2025-09-22-emacs-news/") 1] ("sachachua.com" . "https://sachachua.com/blog/2025/09/2025-09-22-emacs-news/") 0] [[nil [nil nil ("planet.emacslife.com" . "https://sachachua.com/blog/2025/09/adding-org-mode-link-awesomeness-elsewhere-my-org-insert-link-dwim/") 0] ("sachachua.com" . "https://sachachua.com/blog/2025/09/adding-org-mode-link-awesomeness-elsewhere-my-org-insert-link-dwim/") 1] [[[nil nil ("planet.emacslife.com" . "https://takeonrules.com/2025/09/21/adding-more-link-description-defaults/") 0] [nil nil ("feeds.feedburner.com" . "https://symfony.com/blog/a-week-of-symfony-977-september-15-21-2025?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") 0] ("www.youtube.com" . "yt:video:iyVMLSPhdi0") 0] [[nil nil ("protesilaos.com" . "https://protesilaos.com/books/2025-09-21-first-walk-then-think-for-yourself/") 0] [nil nil ("planet.emacslife.com" . "https://takeonrules.com/2025/09/20/generating-descriptions-of-org-insert-link/") 0] ("planet.emacslife.com" . "https://manueluberti.eu/posts/2025-09-21-date-at-point/") 0] ("planet.emacslife.com" . "https://lars.ingebrigtsen.no/2025/09/21/who-knows-what-actors-lurk-in-the-heart-of-movies-the-llm-knows/") 0] ("www.youtube.com" . "yt:video:lSBkMKnsieo") 1] ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/react-service-workers") 1] [[[[nil nil ("protesilaos.com" . "https://protesilaos.com/poems/2025-09-20-happenstance/") 0] [nil nil ("protesilaos.com" . "https://protesilaos.com/codelog/2025-09-20-emacs-denote-custom-identifiers/") 0] ("protesilaos.com" . "https://protesilaos.com/commentary/2025-09-20-conditioning-inner-critic/") 0] [[[nil nil ("protesilaos.com" . "https://protesilaos.com/poems/2025-09-19-my-hesitation/") 0] [nil nil ("www.youtube.com" . "yt:video:GOejI6c0CMQ") 0] ("protesilaos.com" . "https://protesilaos.com/commentary/2025-09-19-re-toughness-ancient-sparta/") 0] [nil nil ("www.youtube.com" . "yt:video:M-MgQC6z3VU") 0] ("www.youtube.com" . "yt:video:v9gsMFozXK0") -1] ("www.youtube.com" . "yt:video:wsHt2YReQzA") 1] [[nil [nil nil ("protesilaos.com" . "https://protesilaos.com/codelog/2025-09-18-prot-asks-julien-emacs-nix-guix-reproducibility/") 0] ("www.youtube.com" . "yt:video:Yv8BC8ISAPQ") 1] [[nil nil ("protesilaos.com" . "https://protesilaos.com/commentary/2025-09-17-re-how-do-you-do-food/") 0] [nil nil ("www.youtube.com" . "yt:video:qyw5uzDXjbA") 0] ("blog.sigplan.org" . "https://blog.sigplan.org/?p=3062") 0] ("www.youtube.com" . "yt:video:OfOPrmnHRxw") 0] ("www.youtube.com" . "yt:video:FaMADv_GXqs") -1] ("www.youtube.com" . "yt:video:SkQsOReCjRU") 0] ("sachachua.com" . "https://sachachua.com/blog/2025/09/emacs-cycle-through-different-paragraph-formats-all-on-one-line-wrapped-max-one-sentence-per-line-one-sentence-per-line/") 1] ("sachachua.com" . "https://sachachua.com/blog/2025/09/org-mode-a-latex-letter-that-includes-pdfs-and-hyperlinked-page-numbers/") 0] ("feeds.feedburner.com" . "https://symfony.com/blog/a-week-of-symfony-978-september-22-28-2025?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") 0] [[[[[[[nil nil ("protesilaos.com" . "https://protesilaos.com/news/2025-09-15-oreeon-snake-bite-update/") 0] [nil nil ("planet.emacslife.com" . "https://takeonrules.com/2025/09/14/dynamic-org-mode-block-to-list-books-read/") 0] ("lwn.net" . "https://lwn.net/Articles/1038074/") 0] [[nil [nil nil ("feeds.feedburner.com" . "https://symfony.com/blog/a-week-of-symfony-976-september-8-14-2025?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") 0] ("irreal.org" . "https://irreal.org/blog/?p=13270") 1] [nil [nil nil ("planet.emacslife.com" . "https://www.hristos.co/blog/linux-gaming-fallout1/") 0] ("planet.emacslife.com" . "https://xenodium.com/introducing-acpel") 1] ("protesilaos.com" . "https://protesilaos.com/poems/2025-09-14-find-me/") 0] ("planet.emacslife.com" . "https://irreal.org/blog/?p=13270") 1] [[[[nil nil ("sachachua.com" . "https://sachachua.com/blog/2025/09/emacs-and-dom-el-quick-notes-on-parsing-html-and-turning-doms-back-into-html/") 0] [nil nil ("www.youtube.com" . "yt:video:6S2PnbQ8LwA") 0] ("planet.emacslife.com" . "https://sachachua.com/blog/2025/09/emacs-and-dom-el-quick-notes-on-parsing-html-and-turning-doms-back-into-html/") 0] [[nil nil ("irreal.org" . "https://irreal.org/blog/?p=13266") 0] [[nil nil ("fasterthanli.me" . "https://fasterthanli.me/articles/crates-io-phishing-attempt") 0] [nil nil ("blog.rust-lang.org" . "https://blog.rust-lang.org/2025/09/12/crates-io-phishing-campaign/") 0] ("lwn.net" . "https://lwn.net/Articles/1037919/") 0] ("lwn.net" . "https://lwn.net/Articles/1036908/") 1] ("planet.emacslife.com" . "/posts/tab-sets/") 1] [[[nil nil ("planet.emacslife.com" . "https://irreal.org/blog/?p=13263") 0] [nil nil ("lwn.net" . "https://lwn.net/Articles/1037069/") 0] ("irreal.org" . "https://irreal.org/blog/?p=13263") 0] [[nil nil ("lwn.net" . "https://lwn.net/Articles/1037703/") 0] [[nil nil ("www.youtube.com" . "yt:video:ZRC7cIGCC7A") 0] nil ("lwn.net" . "https://lwn.net/Articles/1036683/") -1] ("feeds.feedburner.com" . "https://symfony.com/blog/save-the-date-symfonyday-montreal-2026?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") 1] ("lwn.net" . "https://lwn.net/Articles/1037777/") 1] ("lwn.net" . "https://lwn.net/Articles/1037788/") 0] ("irreal.org" . "https://irreal.org/blog/?p=13268") 1] [[[[[[nil nil ("planet.emacslife.com" . "https://protesilaos.com/codelog/2025-09-11-prot-asks-port19-rsi-keyboard-ergonomics-dictation-geriatric-care/") 0] [nil nil ("planet.emacslife.com" . "https://irreal.org/blog/?p=13261") 0] ("lwn.net" . "https://lwn.net/Articles/1034811/") 0] [nil nil ("lwn.net" . "https://lwn.net/Articles/1037496/") 0] ("irreal.org" . "https://irreal.org/blog/?p=13261") -1] [[nil nil ("lwn.net" . "https://lwn.net/Articles/1037477/") 0] [[nil nil ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/many-hard-leetcode-problems-are-easy-constraint/") 0] [nil nil ("feeds.feedburner.com" . "https://symfony.com/blog/symfonycon-amsterdam-2025-call-for-it-student-volunteers-volunteer-learn-and-connect?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") 0] ("planet.emacslife.com" . "https://emacs.dyerdwelling.family/emacs/20250826103741-emacs--debugging-software-breakage-with-git-stash-and-emacs/") 0] ("lwn.net" . "https://lwn.net/Articles/1037471/") 1] ("lwn.net" . "https://lwn.net/Articles/1037166/") 0] [[[nil nil ("blog.rust-lang.org" . "https://blog.rust-lang.org/2025/09/10/rust-compiler-performance-survey-2025-results/") 0] nil ("lwn.net" . "https://lwn.net/Articles/1037391/") -1] [[[nil nil ("www.youtube.com" . "yt:video:QVqIx-Y8s-s") 0] nil ("planet.emacslife.com" . "https://irreal.org/blog/?p=13259") -1] [[nil nil ("blog.sigplan.org" . "https://blog.sigplan.org/?p=3051") 0] nil ("planet.emacslife.com" . "https://xenodium.com/so-you-want-acp-for-emacs") -1] ("irreal.org" . "https://irreal.org/blog/?p=13259") 0] ("lwn.net" . "https://lwn.net/Articles/1037359/") 1] ("protesilaos.com" . "https://protesilaos.com/poems/2025-09-10-the-unexpected/") 0] [[[nil nil ("planet.emacslife.com" . "https://flandrew.srht.site/listful/sw-emacs-vexil.html") 0] [[nil nil ("planet.emacslife.com" . "http://yummymelon.com/devnull/announcing-numeri-an-emacs-package-for-roman-number-translation.html") 0] [nil nil ("planet.emacslife.com" . "https://irreal.org/blog/?p=13257") 0] ("fasterthanli.me" . "https://fasterthanli.me/articles/color-npm-package-compromised") 0] ("planet.emacslife.com" . "https://mbork.pl/2025-09-08_Emacs_Artist_clock") 1] [[[nil nil ("sachachua.com" . "https://sachachua.com/blog/2025/09/2025-09-08-emacs-news/") 0] [[nil nil ("feeds.feedburner.com" . "https://symfony.com/blog/seven-symfony-core-team-members-speaking-next-week-at-the-api-platform-conference-2025?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") 0] nil ("planet.emacslife.com" . "https://tusharhero.codeberg.page/obscure-emacs-packages.html") -1] ("planet.emacslife.com" . "https://sachachua.com/blog/2025/09/2025-09-08-emacs-news/") 1] [[nil nil ("planet.emacslife.com" . "https://irreal.org/blog/?p=13255") 0] [[nil nil ("www.youtube.com" . "yt:video:1lZpowy21Gc") 0] [nil nil ("www.youtube.com" . "yt:video:8iovwdREt1o") 0] ("www.youtube.com" . "yt:video:_BrFKp-U8GI") 0] ("irreal.org" . "https://irreal.org/blog/?p=13255") 1] ("protesilaos.com" . "https://protesilaos.com/commentary/2025-09-08-blood-moon-my-place-in-the-world/") 0] ("irreal.org" . "https://irreal.org/blog/?p=13257") 1] ("planet.emacslife.com" . "https://flandrew.srht.site/listful/sw-emacs-mondo.html") 0] ("protesilaos.com" . "https://protesilaos.com/codelog/2025-09-11-prot-asks-port19-rsi-keyboard-ergonomics-dictation-geriatric-care/") 0] [[[[[[nil nil ("protesilaos.com" . "https://protesilaos.com/codelog/2025-09-07-prot-asks-greg-emacs-android-fishing-dogs-pennsylvania/") 0] [nil [nil nil ("planet.emacslife.com" . "https://protesilaos.com/codelog/2025-09-07-emacs-show-font-1-0-0/") 0] ("planet.emacslife.com" . "https://protesilaos.com/codelog/2025-09-07-prot-asks-greg-emacs-android-fishing-dogs-pennsylvania/") 1] ("protesilaos.com" . "https://protesilaos.com/codelog/2025-09-07-emacs-show-font-1-0-0/") 1] [nil [nil nil ("irreal.org" . "https://irreal.org/blog/?p=13250") 0] ("irreal.org" . "https://irreal.org/blog/?p=13252") 1] ("planet.emacslife.com" . "https://irreal.org/blog/?p=13252") -1] [[nil nil ("lwn.net" . "https://lwn.net/Articles/1036907/") 0] [[nil nil ("gustedt.wordpress.com" . "http://gustedt.wordpress.com/?p=4564") 0] nil ("planet.emacslife.com" . "https://emacs.dyerdwelling.family/emacs/20250905100614-emacs--customizing-emacs-completion-from-fidos-fuzzy-matching-to-literal-substring-search/") -1] ("lwn.net" . "https://lwn.net/Articles/1036856/") 1] ("lwn.net" . "https://lwn.net/Articles/1036465/") -1] [[[[nil nil ("feeds.feedburner.com" . "https://symfony.com/blog/celebrating-ryan-weaver-through-his-talks?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") 0] nil ("planet.emacslife.com" . "https://taingram.org/blog/minimal-debian-texlive.html") -1] [[nil nil ("www.youtube.com" . "yt:video:XGmZFNG-qQQ") 0] [nil nil ("irreal.org" . "https://irreal.org/blog/?p=13248") 0] ("planet.emacslife.com" . "https://irreal.org/blog/?p=13248") 0] ("protesilaos.com" . "https://protesilaos.com/greek/2025-09-05-when-your-country-is-a-theme-park/") 0] [[nil nil ("lwn.net" . "https://lwn.net/Articles/1036785/") 0] [nil [nil nil ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/the-angels-and-demons-of-nondeterminism/") 0] ("lwn.net" . "https://lwn.net/Articles/1036733/") 1] ("lwn.net" . "https://lwn.net/Articles/1036222/") 1] ("feeds.feedburner.com" . "https://symfony.com/blog/symfonycon-amsterdam-2025-where-have-the-women-of-tech-history-gone-2-0?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") 0] ("feeds.feedburner.com" . "https://symfony.com/blog/symfony-to-provide-the-official-mcp-sdk?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") -1] [[[[nil [nil nil ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/switch-git-status-buffer") 0] ("planet.emacslife.com" . "https://kelar.org/~bandali/2025/09/03/prot-asks.html") 1] [nil [nil nil ("www.youtube.com" . "yt:video:kbJ3i3QMozs") 0] ("lwn.net" . "https://lwn.net/Articles/1036635/") 1] ("planet.emacslife.com" . "https://rahuljuliato.com/posts/switch-git-status-buffer") 0] [[nil nil ("lwn.net" . "https://lwn.net/Articles/1036624/") 0] [[nil nil ("lwn.net" . "https://lwn.net/Articles/1035169/") 0] [nil nil ("irreal.org" . "https://irreal.org/blog/?p=13245") 0] ("planet.emacslife.com" . "https://irreal.org/blog/?p=13245") 0] ("lwn.net" . "https://lwn.net/Articles/1034603/") 1] ("lwn.net" . "https://lwn.net/Articles/1036625/") 0] [[[nil nil ("lwn.net" . "https://lwn.net/Articles/1036567/") 0] [[nil nil ("protesilaos.com" . "https://protesilaos.com/codelog/2025-09-03-prot-asks-amin-emacsconf-gnu-debian-internet-archive-canada/") 0] [nil nil ("blog.rust-lang.org" . "https://blog.rust-lang.org/2025/09/03/welcoming-the-rust-innovation-lab/") 0] ("planet.emacslife.com" . "https://protesilaos.com/codelog/2025-09-03-prot-asks-amin-emacsconf-gnu-debian-internet-archive-canada/") 0] ("feeds.feedburner.com" . "https://symfony.com/blog/symfonycon-amsterdam-2025-make-your-ai-useful-with-mcp?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") 1] [nil [nil nil ("lwn.net" . "https://lwn.net/Articles/1035491/") 0] ("irreal.org" . "https://irreal.org/blog/?p=13243") 1] ("planet.emacslife.com" . "https://irreal.org/blog/?p=13243") -1] ("lwn.net" . "https://lwn.net/Articles/1036569/") 0] ("lwn.net" . "https://lwn.net/Articles/1035384/") -1] ("feeds.feedburner.com" . "https://symfony.com/blog/a-week-of-symfony-975-september-1-7-2025?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") 0] [[[[[[nil [nil nil ("feeds.feedburner.com" . "https://symfony.com/blog/symfonycon-amsterdam-2025-practical-ai-integrations-with-symfony?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") 0] ("lwn.net" . "https://lwn.net/Articles/1036369/") 1] [nil nil ("protesilaos.com" . "https://protesilaos.com/politics/2025-09-02-when-your-country-is-a-theme-park/") 0] ("planet.emacslife.com" . "https://so.nwalsh.com/2025/09/02-org-to-xml") -1] [[nil nil ("lwn.net" . "https://lwn.net/Articles/1036218/") 0] [[nil nil ("lwn.net" . "https://lwn.net/Articles/1035727/") 0] nil ("planet.emacslife.com" . "https://irreal.org/blog/?p=13241") -1] ("planet.emacslife.com" . "https://mbork.pl/2025-09-01_Differentiating_between_C-c_C-c_and_C-c_C-k") 1] ("planet.emacslife.com" . "https://xenodium.com/diverted-mode") 0] [[[[nil nil ("lwn.net" . "https://lwn.net/Articles/1036084/") 0] nil ("sachachua.com" . "https://sachachua.com/blog/2025/09/2025-09-01-emacs-news/") -1] [nil nil ("lwn.net" . "https://lwn.net/Articles/1036041/") 0] ("planet.emacslife.com" . "https://sachachua.com/blog/2025/09/2025-09-01-emacs-news/") -1] [[nil [nil nil ("protesilaos.com" . "https://protesilaos.com/codelog/2025-09-01-emacs-doric-themes-0-4-0/") 0] ("protesilaos.com" . "https://protesilaos.com/interpretations/2025-09-01-papakonstantinou-i-need/") 1] [[nil nil ("planet.emacslife.com" . "https://protesilaos.com/codelog/2025-09-01-emacs-doric-themes-0-4-0/") 0] [nil [nil nil ("planet.emacslife.com" . "https://sdf.org/~pkal/blog/emacs/pitch.html") 0] ("planet.emacslife.com" . "https://kelar.org/~bandali/2025/08/31/activities.html") 1] ("blog.rust-lang.org" . "https://blog.rust-lang.org/2025/09/01/rust-lld-on-1.90.0-stable/") 1] ("planet.emacslife.com" . "https://www.hristos.co/blog/enjoying-morrowind-on-linux-part-one-original-engine-revisited/") 1] ("protesilaos.com" . "https://protesilaos.com/poems/2025-09-01-cowardice/") 1] ("irreal.org" . "https://irreal.org/blog/?p=13241") 1] [[[[[nil nil ("planet.emacslife.com" . "https://sachachua.com/blog/2025/08/emacs-elevator-pitch-tinkerers-unite/") 0] [nil [nil nil ("www.youtube.com" . "yt:video:VdjYhZqnQks") 0] ("irreal.org" . "https://irreal.org/blog/?p=13239") 1] ("planet.emacslife.com" . "https://irreal.org/blog/?p=13239") 1] [[[nil nil ("feeds.feedburner.com" . "https://symfony.com/blog/a-week-of-symfony-974-august-25-31-2025?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") 0] [nil nil ("planet.emacslife.com" . "https://xenodium.com/who-moved-my-text") 0] ("protesilaos.com" . "https://protesilaos.com/news/2025-08-31-hut-another-balcony-door/") 0] [nil nil ("planet.emacslife.com" . "https://irreal.org/blog/?p=13237") 0] ("planet.emacslife.com" . "https://zacromero.com/post/integrating-work-calendar-with-emacs/") -1] ("planet.emacslife.com" . "https://list.orgmode.org/87iki3epf9.fsf@gmail.com") 0] [[[nil [nil nil ("www.youtube.com" . "yt:video:9kSod-DS5WE") 0] ("www.youtube.com" . "yt:video:qxV_Uja4oYE") 1] [nil nil ("planet.emacslife.com" . "https://protesilaos.com/codelog/2025-08-30-prot-asks-alex-lsp-elisp-guix-cycling-philosophy-go-swaywm/") 0] ("protesilaos.com" . "https://protesilaos.com/codelog/2025-08-30-prot-asks-alex-lsp-elisp-guix-cycling-philosophy-go-swaywm/") -1] [[nil nil ("planet.emacslife.com" . "https://www.jamescherti.com/pre-commit-elisp-emacs-lisp-git/") 0] [nil nil ("www.youtube.com" . "yt:video:8_GgeASwHwQ") 0] ("lwn.net" . "https://lwn.net/Articles/1035736/") 0] ("irreal.org" . "https://irreal.org/blog/?p=13235") -1] ("irreal.org" . "https://irreal.org/blog/?p=13237") 0] [[[[nil nil ("lwn.net" . "https://lwn.net/Articles/1034966/") 0] nil ("lwn.net" . "https://lwn.net/Articles/1028275/") -1] [[nil nil ("feeds.feedburner.com" . "https://symfony.com/blog/announcing-the-symfony-comic-book?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") 0] [[nil nil ("feeds.feedburner.com" . "https://symfony.com/blog/symfony-7-3-3-released?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") 0] [nil nil ("planet.emacslife.com" . "https://taonaw.com/2025/08/28/a-quick-overiew-about-how.html") 0] ("feeds.feedburner.com" . "https://symfony.com/blog/symfony-6-4-25-released?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") 0] ("blog.sigplan.org" . "https://blog.sigplan.org/?p=3026") 1] ("lwn.net" . "https://lwn.net/Articles/1035724/") 1] [[[[nil nil ("lwn.net" . "https://lwn.net/Articles/1035537/") 0] nil ("planet.emacslife.com" . "https://irreal.org/blog/?p=13228") -1] [[nil nil ("lwn.net" . "https://lwn.net/Articles/1035512/") 0] nil ("planet.emacslife.com" . "https://christiantietze.de/posts/2025/08/clickable-swift-testing-failure-messages-in-emacs-compile-mode/") -1] ("irreal.org" . "https://irreal.org/blog/?p=13228") 0] [[[nil nil ("feeds.feedburner.com" . "https://symfony.com/blog/remembering-ryan-weaver-teacher-core-team-member-friend?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") 0] [nil nil ("lwn.net" . "https://lwn.net/Articles/1034684/") 0] ("www.youtube.com" . "yt:video:itRV2jEtV8Q") 0] [[nil nil ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/logical-duals-in-software-engineering/") 0] [nil nil ("planet.emacslife.com" . "https://irreal.org/blog/?p=13226") 0] ("www.youtube.com" . "yt:video:pOF11EDprxc") 0] ("lwn.net" . "https://lwn.net/Articles/1035464/") 0] ("planet.emacslife.com" . "https://olddeuteronomy.github.io/post/emacs-ibuffer-config/") 0] ("planet.emacslife.com" . "https://xenodium.com/dired-buffers-with-media-overlays") 0] ("irreal.org" . "https://irreal.org/blog/?p=13231") 0] ("sachachua.com" . "https://sachachua.com/blog/2025/08/emacs-elevator-pitch-tinkerers-unite/") 0] [[[[[[[nil nil ("feeds.feedburner.com" . "https://symfony.com/blog/symfonycon-amsterdam-2025-level-up-your-skills-with-our-workshops?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") 0] nil ("planet.emacslife.com" . "https://tusharhero.codeberg.page/emacs-elevator-pitch.html") -1] [nil nil ("planet.emacslife.com" . "https://irreal.org/blog/?p=13224") 0] ("planet.emacslife.com" . "https://www.cyan.sh/blog/posts/controlling-godot-with-emacs.html") -1] [[[nil nil ("planet.emacslife.com" . "https://emacs.dyerdwelling.family/emacs/20250826095622-emacs--a-better-way-to-indent-your-entire-buffer-in-emacs/") 0] [nil nil ("protesilaos.com" . "https://protesilaos.com/codelog/2025-08-26-emacs-show-font-0-4-0/") 0] ("planet.emacslife.com" . "https://macadie.info/2025/08/26/emacs-carnival-elevator-pitch-and-post-pitch-talking-points/") 0] [[nil nil ("www.youtube.com" . "yt:video:ly6YKz9UfQ4") 0] nil ("planet.emacslife.com" . "https://irreal.org/blog/?p=13221") -1] ("planet.emacslife.com" . "https://protesilaos.com/codelog/2025-08-26-emacs-show-font-0-4-0/") 0] ("irreal.org" . "https://irreal.org/blog/?p=13224") 0] [[[nil nil ("planet.emacslife.com" . "https://willschenk.com/howto/2025/claude_code_in_emacs/") 0] [nil [nil nil ("www.youtube.com" . "yt:video:qvWSGzfR1wA") 0] ("planet.emacslife.com" . "https://sachachua.com/blog/2025/08/2025-08-25-emacs-news/") 1] ("sachachua.com" . "https://sachachua.com/blog/2025/08/2025-08-25-emacs-news/") 1] [[nil nil ("planet.emacslife.com" . "http://yummymelon.com/devnull/a-proof-of-concept-to-put-a-better-emacs-ui-on-top-of-gnuplot.html") 0] [nil nil ("protesilaos.com" . "https://protesilaos.com/codelog/2025-08-25-prot-asks-ronnie-free-software-privacy-parenting-iraqi-kurdistan/") 0] ("protesilaos.com" . "https://protesilaos.com/interpretations/2025-08-25-penny-baltatzi-personally/") 0] ("planet.emacslife.com" . "https://mbork.pl/2025-08-25_Counting_Org_mode_headlines") -1] ("irreal.org" . "https://irreal.org/blog/?p=13221") 0] [[[[nil nil ("planet.emacslife.com" . "https://protesilaos.com/codelog/2025-08-25-prot-asks-ronnie-free-software-privacy-parenting-iraqi-kurdistan/") 0] [nil nil ("planet.emacslife.com" . "https://randyridenour.net/posts/2025-08-23-creating-attendance-sheets-with-org-mode.html") 0] ("planet.emacslife.com" . "https://irreal.org/blog/?p=13217") 0] [[nil nil ("feeds.feedburner.com" . "https://symfony.com/blog/a-week-of-symfony-973-august-18-24-2025?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") 0] [[nil nil ("www.youtube.com" . "yt:video:3N5FVSSQGYs") 0] nil ("protesilaos.com" . "https://protesilaos.com/commentary/2025-08-23-freedom-robust-constraints/") -1] ("planet.emacslife.com" . "https://irreal.org/blog/?p=13215") 1] ("planet.emacslife.com" . "https://flandrew.srht.site/listful/llamascii-art.html") 1] [[[nil nil ("fasterthanli.me" . "https://fasterthanli.me/articles/the-science-of-loudness") 0] [nil nil ("planet.emacslife.com" . "https://feyor.sh/blog/my-other-email-client-is-a-mail-daemon/") 0] ("planet.emacslife.com" . "https://feyor.sh/blog/godbolt-in-emacs-with-disaster-and-zig/") 0] [[[nil nil ("www.youtube.com" . "yt:video:j5h9dBtWZXM") 0] nil ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/sapir-whorf-does-not-apply-to-programming/") -1] [nil nil ("planet.emacslife.com" . "https://takeonrules.com/2025/08/20/elevator-pitches-for-emacs/") 0] ("planet.emacslife.com" . "https://kelar.org/~bandali/2025/08/20/lispy-gopher-climate.html") -1] ("planet.emacslife.com" . "http://yitang.uk/emacs/2025/08/22/multiple-working-emacs/") 1] ("planet.emacslife.com" . "https://emacs-apac.gitlab.io/announcements/august-2025/") 0] ("planet.emacslife.com" . "https://xenodium.com/a-tiny-upgrade-to-the-llm-model-picker") 0] [[[[[nil [nil nil ("www.youtube.com" . "yt:video:c5KV_P7K73Y") 0] ("kernelnewbies.org" . "http://kernelnewbies.org/MatthewWilcox/Memdescs/PageFlags?action=recall&rev=1") 1] [nil nil ("protesilaos.com" . "https://protesilaos.com/codelog/2025-08-20-prot-asks-dimos-emacs-interconenctedness-collective-work-conspiracies/") 0] ("planet.emacslife.com" . "https://macadie.info/2025/08/19/2025-08-austin-emacs-meetup/") -1] [nil [nil nil ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/nvim-tabline") 0] ("planet.emacslife.com" . "https://protesilaos.com/codelog/2025-08-20-prot-asks-dimos-emacs-interconenctedness-collective-work-conspiracies/") 1] ("planet.emacslife.com" . "https://xenodium.com/emacs-elevator-pitch") -1] [[nil [nil nil ("www.youtube.com" . "yt:video:CfWxxi4J7_4") 0] ("sachachua.com" . "https://sachachua.com/blog/2025/08/2025-08-18-emacs-news/") 1] [[[nil nil ("www.youtube.com" . "yt:video:4NlrfOl0l8U") 0] nil ("feeds.feedburner.com" . "https://symfony.com/blog/a-week-of-symfony-972-august-11-17-2025?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") -1] [nil nil ("protesilaos.com" . "https://protesilaos.com/codelog/2025-08-17-prot-asks-erik-emacs-1990s-portland-oregon-podcasting/") 0] ("www.youtube.com" . "yt:video:6wkfFdiwpyU") -1] ("protesilaos.com" . "https://protesilaos.com/news/2025-08-18-walk-burnt-cyprus-mountains/") 1] ("blog.rust-lang.org" . "https://blog.rust-lang.org/2025/08/19/demoting-x86-64-apple-darwin-to-tier-2-with-host-tools/") 0] [[[[[nil nil ("feeds.feedburner.com" . "https://symfony.com/blog/let-s-build-the-symfony-ai-ecosystem-together?utm_source=Symfony%20Blog%20Feed&utm_medium=feed") 0] [nil nil ("www.youtube.com" . "yt:video:uHm6FEb2Re4") 0] ("fasterthanli.me" . "https://fasterthanli.me/articles/summer-fasterthanlime-update") 0] [[nil nil ("www.youtube.com" . "yt:video:TkodLFMrO6s") 0] nil ("protesilaos.com" . "https://protesilaos.com/codelog/2025-08-13-prot-asks-arni-emacs-no-distractions-art/") -1] ("protesilaos.com" . "https://protesilaos.com/codelog/2025-08-14-emacs-sxhkdrc-mode-1-2-0/") 0] [[nil nil ("protesilaos.com" . "https://protesilaos.com/poems/2025-08-11-unknown-journeyman/") 0] [[nil nil ("nullprogram.com" . "urn:uuid:3e24c35f-9fac-470a-8225-2e0a0bc8f7ac") 0] [nil nil ("protesilaos.com" . "https://protesilaos.com/codelog/2025-08-10-prot-asks-pizzatorque-emacs-programming-linguistics-community-life/") 0] ("www.youtube.com" . "yt:video:-g8o0M9CRkA") 0] ("protesilaos.com" . "https://protesilaos.com/codelog/2025-08-11-emacs-doric-themes-0-3-0/") 1] ("sachachua.com" . "https://sachachua.com/blog/2025/08/2025-08-11-emacs-news/") 0] [[[nil nil ("www.youtube.com" . "yt:video:8tx2viHpgA8") 0] nil ("blog.rust-lang.org" . "https://blog.rust-lang.org/2025/08/07/Rust-1.89.0/") -1] [[[nil nil ("www.youtube.com" . "yt:video:0XvOOi6g5Ok") 0] nil ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/software-books-i-wish-i-could-read/") -1] [nil nil ("protesilaos.com" . "https://protesilaos.com/codelog/2025-08-06-emacs-writing-studio-book/") 0] ("protesilaos.com" . "https://protesilaos.com/codelog/2025-08-06-prot-asks-james-biology-teaching-emacs-free-software-politics/") -1] ("kernelnewbies.org" . "http://kernelnewbies.org/DevelopmentStatistics?action=diff&rev1=71&rev2=70") 1] ("kernelnewbies.org" . "http://kernelnewbies.org/MatthewWilcox/Memdescs/Path?action=diff&rev1=16&rev2=15") 0] ("protesilaos.com" . "https://protesilaos.com/codelog/2025-08-17-emacs-doric-beach-and-doric-valley-themes/") 0] ("planet.emacslife.com" . "https://www.cyan.sh/blog/posts/make-neotree-tab-local.html") 0] ("irreal.org" . "https://irreal.org/blog/?p=13226") 0] ("lwn.net" . "https://lwn.net/Articles/1036373/") 0] ("protesilaos.com" . "https://protesilaos.com/news/2025-09-15-selfie-project/") 0] [[[[[[[nil nil ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/react-workers") 0] [nil nil ("protesilaos.com" . "https://protesilaos.com/codelog/2025-08-04-emacs-doric-oak-pine-themes/") 0] ("sachachua.com" . "https://sachachua.com/blog/2025/08/2025-08-04-emacs-news/") 0] [[[nil nil ("protesilaos.com" . "https://protesilaos.com/codelog/2025-08-01-linkarzu-chat-emacs-neovim-philosophy/") 0] [nil nil ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/2000-words-about-arrays-and-tables/") 0] ("www.youtube.com" . "yt:video:miTpJmMt7uo") 0] [nil [nil nil ("protesilaos.com" . "https://protesilaos.com/codelog/2025-07-29-videos-internet-archive/") 0] ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/emacs-kick-0-3-0") 1] ("protesilaos.com" . "https://protesilaos.com/codelog/2025-07-30-prot-asks-rudy-emacs-game-dev-lisp-hacking-learning/") 0] ("protesilaos.com" . "https://protesilaos.com/codelog/2025-08-02-prot-asks-diego-emacs-use-head-engineering-industry-combat-sports/") 1] [[[nil nil ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.16?action=diff&rev1=61&rev2=60") 0] [nil nil ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.16?action=diff&rev1=60&rev2=59") 0] ("kernelnewbies.org" . "http://kernelnewbies.org/LinuxChanges?action=diff&rev1=407&rev2=406") 0] [[nil nil ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.16?action=diff&rev1=58&rev2=57") 0] [nil [nil nil ("protesilaos.com" . "https://protesilaos.com/codelog/2025-07-27-talk-emacs-linkarzu-youtube-channel/") 0] ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.16?action=diff&rev1=56&rev2=55") 1] ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.16?action=diff&rev1=57&rev2=56") 1] ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.16?action=diff&rev1=59&rev2=58") 1] ("sachachua.com" . "https://sachachua.com/blog/2025/07/2025-07-28-emacs-news/") 0] [[[[nil nil ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.16?action=diff&rev1=54&rev2=53") 0] [nil nil ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.16?action=diff&rev1=52&rev2=51") 0] ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.16?action=diff&rev1=53&rev2=52") 0] [[[nil nil ("www.youtube.com" . "yt:video:dScf-zwq4GM") 0] [nil nil ("www.youtube.com" . "yt:video:iv-5mZ_9CPY") 0] ("protesilaos.com" . "https://protesilaos.com/codelog/2025-07-26-prot-asks-ihor-emacs-org-maintainer-history-travel-material-science/") 0] [[nil nil ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/programming-language-escape-hatches/") 0] nil ("protesilaos.com" . "https://protesilaos.com/news/2025-07-24-wildfires-cyprus-me-okay/") -1] ("protesilaos.com" . "https://protesilaos.com/news/2025-07-25-dealt-cyprus-wildfires/") 0] ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.16?action=diff&rev1=51&rev2=50") 1] [[[[nil [nil nil ("www.youtube.com" . "yt:video:ze1J7MG0sFg") 0] ("protesilaos.com" . "https://protesilaos.com/codelog/2025-07-22-emacs-cursory-1-2-0/") 1] [nil [nil nil ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/maybe-writing-speed-actually-is-a-bottleneck-for/") 0] ("protesilaos.com" . "https://protesilaos.com/codelog/2025-07-18-emacs-dired-preview-0-6-0/") 1] ("protesilaos.com" . "https://protesilaos.com/codelog/2025-07-19-prot-asks-gino-emacs-data-engineer-open-source-chile/") 0] [[nil nil ("protesilaos.com" . "https://protesilaos.com/codelog/2025-07-14-common-questions-about-prot-asks-videos-emacs-life/") 0] [nil nil ("blog.rust-lang.org" . "https://blog.rust-lang.org/2025/07/11/crates-io-development-update-2025-07/") 0] ("protesilaos.com" . "https://protesilaos.com/codelog/2025-07-12-prot-asks-carlos-emacs-engineering-life-spain/") 0] ("protesilaos.com" . "https://protesilaos.com/codelog/2025-07-16-prot-asks-thomas-emacs-bjj-sport-cult-manga/") -1] [[nil [nil nil ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/logic-for-programmers-turns-one/") 0] ("protesilaos.com" . "https://protesilaos.com/codelog/2025-07-09-emacs-denote-reorder-components/") 1] [[[nil nil ("www.youtube.com" . "yt:video:Ta2bR6fNwBQ") 0] nil ("protesilaos.com" . "https://protesilaos.com/codelog/2025-07-05-emacs-doric-themes-0-2-0/") -1] [nil nil ("protesilaos.com" . "https://protesilaos.com/commentary/2025-07-04-take-puppies-from-mother/") 0] ("feeds.feedburner.com" . "https://informationisbeautiful.net/?p=11036") -1] ("protesilaos.com" . "https://protesilaos.com/codelog/2025-07-07-emacs-mct-1-1-0/") 1] ("protesilaos.com" . "https://protesilaos.com/codelog/2025-07-10-prot-asks-chats-videos-proposal/") 0] ("protesilaos.com" . "https://protesilaos.com/codelog/2025-07-23-prot-asks-eric-emacs-lisp-music-aesthetics-minnesota/") 1] ("kernelnewbies.org" . "http://kernelnewbies.org/Linux_6.16?action=diff&rev1=55&rev2=54") 1] [[[[[[[nil nil ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/logical-quantifiers-in-software/") 0] nil ("protesilaos.com" . "https://protesilaos.com/news/2025-07-02-vlog-two-new-puppies-hut/") -1] [nil [nil nil ("www.youtube.com" . "yt:video:kB-t9PSkch8") 0] ("protesilaos.com" . "https://protesilaos.com/commentary/2025-06-29-audience-public-contributions/") 1] ("gustedt.wordpress.com" . "http://gustedt.wordpress.com/?p=4454") 0] [[[nil nil ("fasterthanli.me" . "https://fasterthanli.me/articles/all-color-is-best-effort") 0] nil ("protesilaos.com" . "https://protesilaos.com/commentary/2025-06-27-feral-black-dog-wild-red-fox/") -1] [nil nil ("protesilaos.com" . "https://protesilaos.com/commentary/2025-06-26-the-year-my-dogs-got-old/") 0] ("nullprogram.com" . "urn:uuid:abb3bf93-074f-4876-8d46-42997edebb34") -1] ("protesilaos.com" . "https://protesilaos.com/codelog/2025-06-28-emacs-beframe-1-4-0/") 0] [[[nil nil ("blog.rust-lang.org" . "https://blog.rust-lang.org/2025/06/26/Rust-1.88.0/") 0] [nil nil ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/you-can-cheat-a-test-suite-with-a-big-enough/") 0] ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/emacs-tab-bar-groups") 0] [nil [nil nil ("www.youtube.com" . "yt:video:xqf6exp7wlI") 0] ("protesilaos.com" . "https://protesilaos.com/commentary/2025-06-22-cool-uncle-archetype/") 1] ("protesilaos.com" . "https://protesilaos.com/books/2025-06-24-my-body-my-rules/") 0] ("jvns.ca" . "https://jvns.ca/blog/2025/06/24/new-zine--the-secret-rules-of-the-terminal/") -1] [[[[[nil nil ("feeds.feedburner.com" . "https://informationisbeautiful.net/?p=11023") 0] nil ("protesilaos.com" . "https://protesilaos.com/politics/2025-06-19-america-interventionism-destiny/") -1] [[nil nil ("feeds.feedburner.com" . "https://informationisbeautiful.net/?p=11019") 0] [nil nil ("protesilaos.com" . "https://protesilaos.com/politics/2025-06-16-eu-strategic-weakness/") 0] ("feeds.feedburner.com" . "https://informationisbeautiful.net/?p=11016") 0] ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/emacs-clipboard-terminal") 0] [[[nil nil ("www.youtube.com" . "yt:video:X7dSTEJK-uU") 0] [nil nil ("www.youtube.com" . "yt:video:0gy454cRrLo") 0] ("protesilaos.com" . "https://protesilaos.com/commentary/2025-06-13-between-humans-other-animals/") 0] [[nil nil ("feeds.feedburner.com" . "https://informationisbeautiful.net/?p=11010") 0] [nil nil ("protesilaos.com" . "https://protesilaos.com/codelog/2025-06-11-emacs-modus-themes-4-8-0/") 0] ("protesilaos.com" . "https://protesilaos.com/commentary/2025-06-12-developing-through-crisis/") 0] ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/solving-linkedin-queens-with-smt/") 0] ("blog.rust-lang.org" . "https://blog.rust-lang.org/2025/06/16/rust-compiler-performance-survey-2025/") 0] [[[nil nil ("www.youtube.com" . "yt:video:_EbE1XQsExY") 0] [[nil nil ("www.youtube.com" . "yt:video:IaAgfAGapD4") 0] nil ("protesilaos.com" . "https://protesilaos.com/poems/2025-06-07-play-of-the-swallows/") -1] ("protesilaos.com" . "https://protesilaos.com/commentary/2025-06-08-two-baby-foxes/") 1] [[[nil nil ("fasterthanli.me" . "https://fasterthanli.me/articles/introducing-facet-reflection-for-rust") 0] [nil nil ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/ai-is-a-gamechanger-for-tla-users/") 0] ("www.youtube.com" . "yt:video:aoTQPoz9_As") 0] [nil nil ("emacsredux.com" . "https://emacsredux.com/blog/2025/06/03/tree-sitter-powered-code-completion") 0] ("protesilaos.com" . "https://protesilaos.com/commentary/2025-06-05-find-sobriety-more-meaningful-psychedelics/") -1] ("protesilaos.com" . "https://protesilaos.com/interpretations/2025-06-06-karapataki-alkaline-leaves/") 0] ("jvns.ca" . "https://jvns.ca/blog/2025/06/10/how-to-compile-a-c-program/") 0] ("blog.rust-lang.org" . "https://blog.rust-lang.org/2025/06/20/may-project-goals-update/") 0] [[[[nil nil ("emacsredux.com" . "https://emacsredux.com/blog/2025/06/01/let-s-make-keyboard-quit-smarter") 0] [[nil nil ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/jj-cheat-sheet") 0] [nil nil ("www.youtube.com" . "yt:video:MEdGTQMqMYs") 0] ("www.youtube.com" . "yt:video:X2XpNcn8XT8") 0] ("protesilaos.com" . "https://protesilaos.com/codelog/2025-06-01-emacs-spacious-padding-0-7-0/") 1] [[nil nil ("protesilaos.com" . "https://protesilaos.com/commentary/2025-05-30-shiny-pokemon-named-prot/") 0] [nil nil ("fasterthanli.me" . "https://fasterthanli.me/articles/the-virtue-of-unsynn") 0] ("www.youtube.com" . "yt:video:lkB5nNGVINw") 0] ("protesilaos.com" . "https://protesilaos.com/poems/2025-05-31-mercenary-motive/") -1] [[[[[nil nil ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/what-does-undecidable-mean-anyway/") 0] [nil nil ("www.youtube.com" . "yt:video:CgzDcw3o6cI") 0] ("protesilaos.com" . "https://protesilaos.com/commentary/2025-05-28-rediscovering-jasmine/") 0] [nil [nil nil ("www.youtube.com" . "yt:video:0-lS8Y79L7g") 0] ("protesilaos.com" . "https://protesilaos.com/codelog/2025-05-27-emacs-doric-themes-0-1-0/") 1] ("protesilaos.com" . "https://protesilaos.com/interpretations/2025-05-27-kleopas-ode-to-sun/") 0] [[nil nil ("protesilaos.com" . "https://protesilaos.com/books/2025-05-25-invisible-man/") 0] [[nil nil ("www.youtube.com" . "yt:video:zi99nFfNT-k") 0] [nil nil ("www.youtube.com" . "yt:video:slIxE8oYzus") 0] ("protesilaos.com" . "https://protesilaos.com/commentary/2025-05-23-garden-forest/") 0] ("www.youtube.com" . "yt:video:JSilR3BLXbw") 1] ("blog.rust-lang.org" . "https://blog.rust-lang.org/2025/05/26/demoting-i686-pc-windows-gnu/") 0] [[[nil nil ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/finding-hard-24-puzzles-with-planner-programming/") 0] [nil nil ("www.youtube.com" . "yt:video:gleyKDvZ3x0") 0] ("www.youtube.com" . "yt:video:V7abyVkS6U8") 0] [[nil nil ("protesilaos.com" . "https://protesilaos.com/books/2025-05-19-even-gods-convinced-necessity/") 0] [nil [nil nil ("www.youtube.com" . "yt:video:YwKYuqsFFPQ") 0] ("www.youtube.com" . "yt:video:ugT2aLo1wDg") 1] ("www.youtube.com" . "yt:video:E31KuUJmqCU") 1] ("blog.sigplan.org" . "https://blog.sigplan.org/?p=3018") 1] ("protesilaos.com" . "https://protesilaos.com/codelog/2025-05-21-emacs-live-denote-doric-themes/") 0] ("protesilaos.com" . "https://protesilaos.com/news/2025-05-29-vlog-two-our-mountain-climb-natural-philosophy/") 1] ("emacsredux.com" . "https://emacsredux.com/blog/2025/06/03/little-known-macos-keybindings") 0] ("blog.rust-lang.org" . "https://blog.rust-lang.org/2025/07/03/stabilizing-naked-functions/") 0] [[[[[nil nil ("protesilaos.com" . "https://protesilaos.com/keeb/2025-05-17-cherry-silent-black-switches-thoughts/") 0] [nil nil ("www.youtube.com" . "yt:video:LbxASXgOBqc") 0] ("protesilaos.com" . "https://protesilaos.com/commentary/2025-05-16-not-one-selfie/") 0] [[nil [nil nil ("feeds.feedburner.com" . "https://informationisbeautiful.net/?p=10982") 0] ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/modeling-awkward-social-situations-with-tla/") 1] [[nil nil ("www.youtube.com" . "yt:video:wDRCQfV-Hp0") 0] nil ("protesilaos.com" . "https://protesilaos.com/commentary/2025-05-12-re-feeling-purposeless/") -1] ("protesilaos.com" . "https://protesilaos.com/codelog/2025-05-13-emacs-doric-themes/") 0] ("protesilaos.com" . "https://protesilaos.com/poems/2025-05-15-what-you-seek/") 1] [[[[nil [nil nil ("feeds.feedburner.com" . "https://informationisbeautiful.net/?p=10974") 0] ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/write-the-most-clever-code-you-possibly-can/") 1] [[nil nil ("www.youtube.com" . "yt:video:Dlsa9EBKDGI") 0] [nil nil ("feeds.feedburner.com" . "https://informationisbeautiful.net/?p=10946") 0] ("protesilaos.com" . "https://protesilaos.com/poems/2025-05-02-escape/") 0] ("protesilaos.com" . "https://protesilaos.com/commentary/2025-05-06-inspiration-willpower/") 0] [[nil [nil nil ("www.youtube.com" . "yt:video:XX8mjBXBqz8") 0] ("www.youtube.com" . "yt:video:RQWpF2Gb-gU") 1] [nil nil ("protesilaos.com" . "https://protesilaos.com/codelog/2025-04-29-emacs-ef-themes-1-10-0/") 0] ("protesilaos.com" . "https://protesilaos.com/poems/2025-04-30-late-bloomer/") -1] ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/dired-enhanced") 0] [[[nil nil ("protesilaos.com" . "https://protesilaos.com/codelog/2025-04-26-emacs-show-font-0-3-0/") 0] nil ("protesilaos.com" . "https://protesilaos.com/politics/2025-04-25-eu-indifference-palestinians/") -1] [[[nil nil ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/requirements-change-until-they-dont/") 0] [nil nil ("fasterthanli.me" . "https://fasterthanli.me/articles/open-sourcing-the-home-cms") 0] ("feeds.feedburner.com" . "https://informationisbeautiful.net/?p=10935") 0] [nil [nil nil ("www.youtube.com" . "yt:video:aQwEJKWATlE") 0] ("protesilaos.com" . "https://protesilaos.com/commentary/2025-04-21-doing-it-alone-versus-others/") 1] ("protesilaos.com" . "https://protesilaos.com/interpretations/2025-04-22-galani-just-two-days/") 0] ("protesilaos.com" . "https://protesilaos.com/commentary/2025-04-25-dealing-indecision-maintenance-adventure/") 1] ("protesilaos.com" . "https://protesilaos.com/codelog/2025-04-27-aporetic-fonts-version-1-2-0/") 0] ("protesilaos.com" . "https://protesilaos.com/codelog/2025-05-09-live-stream-emacs-linux-life/") 1] [[[[[[nil nil ("nullprogram.com" . "urn:uuid:dc2863e4-9601-4e42-bbd2-3cb4a5315d4d") 0] nil ("protesilaos.com" . "https://protesilaos.com/interpretations/2025-04-19-paschalidis-perseids/") -1] [nil nil ("protesilaos.com" . "https://protesilaos.com/commentary/2025-04-17-concern-psychedelics/") 0] ("protesilaos.com" . "https://protesilaos.com/codelog/2025-04-18-emacs-tmr-1-1-0/") -1] [[nil nil ("fasterthanli.me" . "https://fasterthanli.me/articles/the-promise-of-rust") 0] [nil nil ("protesilaos.com" . "https://protesilaos.com/codelog/2025-04-15-emacs-denote-4-0-0/") 0] ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/the-halting-problem-is-a-terrible-example-of-np/") 0] ("protesilaos.com" . "https://protesilaos.com/codelog/2025-04-17-emacs-modus-themes-4-7-0/") -1] [[[[nil nil ("fasterthanli.me" . "https://fasterthanli.me/articles/that-health-is-mental") 0] [nil nil ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/a48fce5b-8a05-4302-b620-9b26f057f145/") 0] ("protesilaos.com" . "https://protesilaos.com/codelog/2025-04-09-emacs-dired-preview-0-5-0/") 0] [nil [nil nil ("www.youtube.com" . "yt:video:M6LUPYsjods") 0] ("fasterthanli.me" . "https://fasterthanli.me/articles/more-devops-than-i-bargained-for") 1] ("www.youtube.com" . "yt:video:aw-8BhCilj0") 0] [[nil nil ("emacsredux.com" . "https://emacsredux.com/blog/2025/04/06/goodbye-setq-hello-setopt") 0] [[nil nil ("nullprogram.com" . "urn:uuid:9881d125-2f2c-4fee-a959-222c9449399b") 0] nil ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/april-cools-gaming-games-for-non-gamers/") -1] ("protesilaos.com" . "https://protesilaos.com/codelog/2025-04-06-emacs-modus-tinted-refinements/") 1] ("gustedt.wordpress.com" . "http://gustedt.wordpress.com/?p=4413") 0] ("protesilaos.com" . "https://protesilaos.com/codelog/2025-04-12-emacs-lisp-elements-book/") 0] [[[[nil nil ("blog.sigplan.org" . "https://blog.sigplan.org/?p=3005") 0] [[nil nil ("gustedt.wordpress.com" . "http://gustedt.wordpress.com/?p=4399") 0] [nil nil ("fasterthanli.me" . "https://fasterthanli.me/articles/impromptu-disaster-recovery") 0] ("protesilaos.com" . "https://protesilaos.com/books/2025-03-29-so-smart-should-do-stuff/") 0] ("protesilaos.com" . "https://protesilaos.com/codelog/2025-03-31-emacs-denote-journal-calendar/") 1] [[[nil [nil nil ("www.youtube.com" . "yt:video:mHya9J9pkq4") 0] ("protesilaos.com" . "https://protesilaos.com/codelog/2025-03-28-emacs-denote-query-links/") 1] [nil [nil nil ("www.youtube.com" . "yt:video:C8baNzpnZ7o") 0] ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/betteridges-law-of-software-engineering/") 1] ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/emacs-solo-demo") 0] [[nil nil ("protesilaos.com" . "https://protesilaos.com/codelog/2025-03-24-emacs-denote-query-links/") 0] [nil nil ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/vc-git-functions") 0] ("feeds.feedburner.com" . "https://informationisbeautiful.net/?p=10927") 0] ("protesilaos.com" . "https://protesilaos.com/news/2025-03-25-hut-manual-labour-avoid-distractions/") -1] ("emacsredux.com" . "https://emacsredux.com/blog/2025/03/28/speed-up-emacs-startup-by-tweaking-the-gc-settings") 1] [[[nil nil ("emacsredux.com" . "https://emacsredux.com/blog/2025/03/19/relative-line-numbers") 0] [nil [nil nil ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/new-blog-post-a-perplexing-javascript-parsing/") 0] ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/verification-first-development/") 1] ("emacsredux.com" . "https://emacsredux.com/blog/2025/03/18/you-have-no-idea-how-powerful-isearch-is") 1] [[nil nil ("jvns.ca" . "https://jvns.ca/blog/2025/03/07/escape-code-standards/") 0] [nil nil ("nullprogram.com" . "urn:uuid:f7101ee1-a2e6-4895-b763-bd7b2a842280") 0] ("www.masteringemacs.org" . "/article/replacing-tmux-gnu-screen-emacs") 0] ("gustedt.wordpress.com" . "http://gustedt.wordpress.com/?p=4327") -1] ("blog.sigplan.org" . "https://blog.sigplan.org/?p=2973") -1] ("emacsredux.com" . "https://emacsredux.com/blog/2025/03/31/essential-flyspell") 1] ("protesilaos.com" . "https://protesilaos.com/news/2025-04-20-vlog-tour-hut-back-side/") 1] ("protesilaos.com" . "https://protesilaos.com/politics/2025-05-17-thoughts-adhd-politics/") 0] ("blog.rust-lang.org" . "https://blog.rust-lang.org/2025/08/05/july-project-goals-update/") -1] [[[[[[[[nil nil ("nullprogram.com" . "urn:uuid:852fe937-3510-4752-a9a8-97fde5321e7e") 0] [nil nil ("www.masteringemacs.org" . "/article/whats-new-in-emacs-301") 0] ("emacsredux.com" . "https://emacsredux.com/blog/2025/03/01/debugging-errors-in-emacs") 0] [nil [nil nil ("nullprogram.com" . "urn:uuid:a3ad2465-f53c-43d3-acc7-988d9d4d3989") 0] ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/five-kinds-of-nondeterminism/") 1] ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/compiling_emacs_30_1") 0] [[[nil nil ("gustedt.wordpress.com" . "http://gustedt.wordpress.com/?p=4290") 0] [nil nil ("fasterthanli.me" . "https://fasterthanli.me/articles/the-case-for-sans-io") 0] ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/are-efficiency-and-horizontal-scalability-at-odds/") 0] [[[nil nil ("nullprogram.com" . "urn:uuid:eff3b773-99ee-4c38-9f9c-f51294a1b9e0") 0] [nil nil ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/what-hard-thing-does-your-tech-make-easy/") 0] ("jvns.ca" . "https://jvns.ca/blog/2025/02/05/some-terminal-frustrations/") 0] [[nil nil ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/in-buffer-icomplete-2") 0] [nil nil ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/what-are-the-rosettas-of-formal-specification/") 0] ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/the-jugglers-curse/") 0] ("blog.sigplan.org" . "https://blog.sigplan.org/?p=2905") 0] ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/nvim-0x0") 1] ("jvns.ca" . "https://jvns.ca/blog/2025/02/13/how-to-add-a-directory-to-your-path/") 1] [[[nil [nil nil ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/logic-for-programmers-project-update/") 0] ("jvns.ca" . "https://jvns.ca/blog/2025/01/11/getting-a-modern-terminal-setup/") 1] [[nil nil ("blog.sigplan.org" . "https://blog.sigplan.org/?p=2881") 0] [nil [nil nil ("fasterthanli.me" . "https://fasterthanli.me/articles/catching-up-with-async-rust") 0] ("karthinks.com" . "https://karthinks.com/software/fringe-matters-finding-the-right-difference/") 1] ("karthinks.com" . "https://karthinks.com/software/tool-use-with-gptel-looking-for-testers/") 1] ("gustedt.wordpress.com" . "http://gustedt.wordpress.com/?p=4243") 1] [[[nil nil ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/formally-modeling-dreidel-the-sequel/") 0] nil ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/multiple-eln-cache") -1] [[nil nil ("buttondown.email" . "https://buttondown.com/hillelwayne/archive/stroustrups-rule/") 0] [nil nil ("fasterthanli.me" . "https://fasterthanli.me/articles/highlighted-code-in-slides") 0] ("jvns.ca" . "https://jvns.ca/blog/2024/11/29/why-pipes-get-stuck-buffering/") 0] ("jvns.ca" . "https://jvns.ca/blog/2024/11/26/terminal-rules/") 0] ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/in-buffer-icomplete") -1] ("blog.sigplan.org" . "https://blog.sigplan.org/?p=2890") 0] [[[nil [nil nil ("jvns.ca" . "https://jvns.ca/blog/2024/11/09/new-microblog/") 0] ("jvns.ca" . "https://jvns.ca/blog/2024/11/18/how-to-import-a-javascript-library/") 1] [[nil nil ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/emacs-docker-podman") 0] [[nil nil ("danluu.com" . "https://danluu.com/ballmer/") 0] nil ("jvns.ca" . "https://jvns.ca/blog/2024/10/27/asn-ip-address-memory/") -1] ("jvns.ca" . "https://jvns.ca/blog/2024/10/31/ascii-control-characters/") 1] ("blog.sigplan.org" . "https://blog.sigplan.org/?p=2861") 1] [[[[nil nil ("blog.sigplan.org" . "https://blog.sigplan.org/?p=2837") 0] [nil nil ("gustedt.wordpress.com" . "http://gustedt.wordpress.com/?p=4215") 0] ("without.boats" . "https://without.boats/blog/unpin-cell/") 0] [[nil nil ("jvns.ca" . "https://jvns.ca/blog/2024/10/07/some-notes-on-upgrading-hugo/") 0] [nil [nil nil ("fasterthanli.me" . "https://fasterthanli.me/articles/ktls-now-under-rustls-org") 0] ("jvns.ca" . "https://jvns.ca/blog/2024/09/27/some-go-web-dev-notes/") 1] ("jvns.ca" . "https://jvns.ca/blog/2024/10/01/terminal-colours/") 1] ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/emacs-kick") 1] [[[nil nil ("jvns.ca" . "https://jvns.ca/blog/2024/09/12/reasons-i--still--love-fish/") 0] [[nil nil ("blog.regehr.org" . "https://blog.regehr.org/?p=2124") 0] nil ("jvns.ca" . "https://jvns.ca/blog/2024/08/19/migrating-mess-with-dns-to-use-powerdns/") -1] ("gustedt.wordpress.com" . "http://gustedt.wordpress.com/?p=4172") 1] [[nil nil ("danluu.com" . "https://danluu.com/codenames/") 0] [nil nil ("jvns.ca" . "https://jvns.ca/blog/2024/08/06/go-structs-copied-on-assignment/") 0] ("fasterthanli.me" . "https://fasterthanli.me/articles/state-of-the-fasterthanlime-2024") 0] ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/golang_debian") -1] ("www.masteringemacs.org" . "/article/combobulate-bulk-editing-treesitter-nodes-multiple-cursors") 0] ("without.boats" . "https://without.boats/blog/generators-with-unpin-cell/") 1] ("blog.sigplan.org" . "https://blog.sigplan.org/?p=2870") 0] [[[[[[nil nil ("www.masteringemacs.org" . "/article/the-emacs-29-edition-of-mastering-emacs-out-now") 0] [nil [nil nil ("jvns.ca" . "https://jvns.ca/blog/2024/07/08/readline/") 0] ("without.boats" . "https://without.boats/blog/pin/") 1] ("gustedt.wordpress.com" . "http://gustedt.wordpress.com/?p=4143") 1] [[nil nil ("jvns.ca" . "https://jvns.ca/blog/2024/07/03/reasons-to-use-job-control/") 0] nil ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/react-game-of-life") -1] ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/eslint-on-emacs") -1] [[nil nil ("danluu.com" . "https://danluu.com/ai-bias/") 0] [[nil nil ("danluu.com" . "https://danluu.com/ftc-google-antitrust/") 0] nil ("git-annex.branchable.com" . "http://git-annex.branchable.com/devblog/day_652-664__git-remote-annex/") -1] ("gustedt.wordpress.com" . "http://gustedt.wordpress.com/?p=4135") 1] ("without.boats" . "https://without.boats/blog/ownership/") -1] [[[[nil nil ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/github_to_codeberg") 0] [nil [nil nil ("blog.regehr.org" . "https://blog.regehr.org/?p=2578") 0] ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/nerd-fonts") 1] ("karthinks.com" . "https://karthinks.com/software/emacs-window-management-almanac/") 1] [[nil nil ("www.masteringemacs.org" . "/article/combobulate-interactive-node-editing-treesitter") 0] [nil [nil nil ("danluu.com" . "https://danluu.com/slow-device/") 0] ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/zod-tutorial") 1] ("feeds.feedburner.com" . "https://medium.com/p/e4273bfee211") 1] ("without.boats" . "https://without.boats/blog/coroutines-and-effects/") 0] [[[[nil nil ("fasterthanli.me" . "https://fasterthanli.me/articles/face-cams-the-missing-guide") 0] [nil nil ("without.boats" . "https://without.boats/blog/asynchronous-clean-up/") 0] ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/lemacs") 0] [nil nil ("danluu.com" . "https://danluu.com/diseconomies-scale/") 0] ("without.boats" . "https://without.boats/blog/futures-unordered/") -1] [[[nil nil ("danluu.com" . "https://danluu.com/impossible-agree/") 0] [nil [nil nil ("danluu.com" . "https://danluu.com/why-video/") 0] ("danluu.com" . "https://danluu.com/cruise-report/") 1] ("without.boats" . "https://without.boats/blog/let-futures-be-futures/") 1] [[nil [nil nil ("danluu.com" . "https://danluu.com/seo-spam/") 0] ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/rahuls-lab") 1] [nil nil ("without.boats" . "https://without.boats/blog/three-problems-of-pinning/") 0] ("without.boats" . "https://without.boats/blog/poll-progress/") -1] ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/compiling_emacs_29_2") 0] ("karthinks.com" . "https://karthinks.com/software/reftex-in-org-mode/") 1] ("without.boats" . "https://without.boats/blog/iterators-and-traversables/") 1] ("without.boats" . "https://without.boats/blog/references-are-like-jumps/") 1] [[[[[nil nil ("without.boats" . "https://without.boats/blog/poll-next/") 0] [nil nil ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/pyradio-m3u") 0] ("karthinks.com" . "https://karthinks.com/software/different-strokes-for-different-folks/") 0] [[nil nil ("blog.regehr.org" . "https://blog.regehr.org/?p=2485") 0] [nil nil ("fasterthanli.me" . "https://fasterthanli.me/articles/just-paying-figma-15-dollars") 0] ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/ellama") 0] ("without.boats" . "https://without.boats/blog/a-four-year-plan/") 0] [nil [nil nil ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/grub-os-probe") 0] ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/auto-dark-catppuccin") 1] ("without.boats" . "https://without.boats/blog/why-async-rust/") -1] [[[[nil nil ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/c-cedilla") 0] [nil [nil nil ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/mindful-upgrades") 0] ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/launching-emacs-terminal") 1] ("www.rahuljuliato.com" . "https://rahuljuliato.com/posts/basic-emacs-alias") 1] [[nil nil ("without.boats" . "https://without.boats/blog/follow-up-to-changing-the-rules-of-rust/") 0] [nil [nil nil ("fasterthanli.me" . "https://fasterthanli.me/articles/cracking-electron-apps-open") 0] ("karthinks.com" . "https://karthinks.com/software/cool-your-heels-emacs/") 1] ("without.boats" . "https://without.boats/blog/changing-the-rules-of-rust/") 1] ("without.boats" . "https://without.boats/blog/generic-trait-methods-and-new-auto-traits/") 0] [[[nil nil ("git-annex.branchable.com" . "http://git-annex.branchable.com/devblog/day_649-650__speeding_up_repeated_imports/") 0] [nil nil ("without.boats" . "https://without.boats/blog/iterator-generator/") 0] ("without.boats" . "https://without.boats/blog/if-you-can-keep-it/") 0] [nil nil ("without.boats" . "https://without.boats/blog/the-scoped-task-trilemma/") 0] ("git-annex.branchable.com" . "http://git-annex.branchable.com/devblog/day_644-648__terminal_escape_sequences/") -1] ("git-annex.branchable.com" . "http://git-annex.branchable.com/devblog/day_651__a_major_release__and_a_conference/") -1] ("without.boats" . "https://without.boats/blog/thread-per-core/") 1] ("without.boats" . "https://without.boats/blog/coroutines-async-and-iter/") -1] ("without.boats" . "https://without.boats/blog/pinned-places/") 1] [[[[[[[[[nil nil ("without.boats" . "https://without.boats/blog/async-iterator/") 0] [nil nil ("without.boats" . "https://without.boats/blog/patterns-and-abstractions/") 0] ("without.boats" . "https://without.boats/blog/const-as-an-auto-trait/") 0] [[nil nil ("karthinks.com" . "https://karthinks.com/software/persistent-prefix-keymaps-in-emacs/") 0] [nil nil ("fasterthanli.me" . "https://fasterthanli.me/series/building-a-rust-service-with-nix/part-11") 0] ("fasterthanli.me" . "https://fasterthanli.me/series/building-a-rust-service-with-nix/part-12") 0] ("without.boats" . "https://without.boats/blog/the-registers-of-rust/") 0] [[nil nil ("fasterthanli.me" . "https://fasterthanli.me/series/building-a-rust-service-with-nix/part-9") 0] [nil [nil nil ("fasterthanli.me" . "https://fasterthanli.me/series/building-a-rust-service-with-nix/part-6") 0] ("fasterthanli.me" . "https://fasterthanli.me/series/building-a-rust-service-with-nix/part-7") 1] ("fasterthanli.me" . "https://fasterthanli.me/series/building-a-rust-service-with-nix/part-8") 1] ("fasterthanli.me" . "https://fasterthanli.me/series/building-a-rust-service-with-nix/part-10") 0] [[[nil nil ("karthinks.com" . "https://karthinks.com/software/a-consistent-structural-editing-interface/") 0] [nil [nil nil ("danluu.com" . "https://danluu.com/futurist-predictions/") 0] ("danluu.com" . "https://danluu.com/elon-twitter-texts/") 1] ("danluu.com" . "https://danluu.com/elon-dave-chappelle/") 1] [[nil nil ("karthinks.com" . "https://karthinks.com/software/it-bears-repeating/") 0] [nil nil ("blog.regehr.org" . "https://blog.regehr.org/?p=2265") 0] ("karthinks.com" . "https://karthinks.com/software/more-less-emacs/") 0] ("karthinks.com" . "https://karthinks.com/software/notmuch-ado-about-nothing/") -1] ("git-annex.branchable.com" . "http://git-annex.branchable.com/devblog/day_643__adjusted_view_branches/") 0] [[[[nil nil ("blog.regehr.org" . "https://blog.regehr.org/?p=2148") 0] nil ("feeds.feedburner.com" . "https://medium.com/p/24cc14d7a1d9") -1] [nil [nil nil ("danluu.com" . "https://danluu.com/nothing-works/") 0] ("blog.tecosaur.com" . "https://blog.tecosaur.com/tmio/2022-04-01-confluence.html") 1] ("danluu.com" . "https://danluu.com/simple-architectures/") 0] [nil [nil nil ("feeds.feedburner.com" . "https://medium.com/p/99e20b57220e") 0] ("karthinks.com" . "https://karthinks.com/software/fast-latex-previews-in-org-mode/") 1] ("blog.tecosaur.com" . "https://blog.tecosaur.com/tmio/2022-02-30-orgnvim.html") -1] ("blog.tecosaur.com" . "https://blog.tecosaur.com/tmio/2022-05-31-folding.html") -1] [[[[nil nil ("karthinks.com" . "https://karthinks.com/software/dired-history-in-emacs/") 0] [[nil nil ("danluu.com" . "https://danluu.com/cocktail-ideas/") 0] nil ("danluu.com" . "https://danluu.com/cache-incidents/") -1] ("danluu.com" . "https://danluu.com/talent/") 1] [[[nil nil ("blog.tecosaur.com" . "https://blog.tecosaur.com/tmio/2021-12-31-retrospection.html") 0] nil ("karthinks.com" . "https://karthinks.com/software/a-tab-bar-menu-in-emacs/") -1] [[[nil nil ("danluu.com" . "https://danluu.com/cgroup-throttling/") 0] [nil nil ("danluu.com" . "https://danluu.com/latency-pitfalls/") 0] ("danluu.com" . "https://danluu.com/writing-non-advice/") 0] [[nil nil ("blog.tecosaur.com" . "https://blog.tecosaur.com/tmio/2021-05-31-async.html") 0] [nil nil ("danluu.com" . "https://danluu.com/people-matter/") 0] ("danluu.com" . "https://danluu.com/corrections/") 0] ("blog.tecosaur.com" . "https://blog.tecosaur.com/tmio/2021-11-30-element.html") 0] ("karthinks.com" . "https://karthinks.com/software/simple-folding-with-hideshow/") 1] ("blog.tecosaur.com" . "https://blog.tecosaur.com/tmio/2022-01-31-caching.html") 1] [[[[nil [nil nil ("blog.regehr.org" . "https://blog.regehr.org/?p=2173") 0] ("danluu.com" . "https://danluu.com/culture/") 1] [[nil nil ("karthinks.com" . "https://karthinks.com/software/latex-input-for-impatient-scholars/") 0] [nil nil ("karthinks.com" . "https://karthinks.com/software/elmo-embark-live-mode-for-emacs/") 0] ("blog.tecosaur.com" . "https://blog.tecosaur.com/tmio/2021-10-31-release.html") 0] ("git-annex.branchable.com" . "http://git-annex.branchable.com/devblog/day_641__an_alternative_smudge_filter/") 0] [[nil nil ("karthinks.com" . "https://karthinks.com/software/avy-can-do-anything/") 0] [nil [nil nil ("danluu.com" . "https://danluu.com/productivity-velocity/") 0] ("danluu.com" . "https://danluu.com/learn-what/") 1] ("danluu.com" . "https://danluu.com/look-stupid/") 1] ("karthinks.com" . "https://karthinks.com/software/an-elisp-editing-tip/") 0] [[[nil nil ("karthinks.com" . "https://karthinks.com/software/popper-echo-mode-for-emacs/") 0] [nil [nil nil ("danluu.com" . "https://danluu.com/in-house/") 0] ("karthinks.com" . "https://karthinks.com/software/fifteen-ways-to-use-embark/") 1] ("karthinks.com" . "https://karthinks.com/software/jumping-directories-in-eshell/") 1] [[[nil nil ("blog.tecosaur.com" . "https://blog.tecosaur.com/tmio/2021-04-30-export-plot.html") 0] [nil nil ("danluu.com" . "https://danluu.com/why-benchmark/") 0] ("blog.tecosaur.com" . "https://blog.tecosaur.com/tmio/2021-08-38-roaming.html") 0] [[nil nil ("karthinks.com" . "https://karthinks.com/software/a-better-yank-pop-binding/") 0] [nil nil ("karthinks.com" . "https://karthinks.com/software/bridging-islands-in-emacs-1/") 0] ("blog.regehr.org" . "https://blog.regehr.org/?p=2109") 0] ("blog.tecosaur.com" . "https://blog.tecosaur.com/tmio/2021-06-34-relaxed.html") 0] ("blog.tecosaur.com" . "https://blog.tecosaur.com/tmio/2021-07-31-citations.html") 0] ("karthinks.com" . "https://karthinks.com/software/declickbait-elfeed/") 0] ("git-annex.branchable.com" . "http://git-annex.branchable.com/devblog/day_642__cost_model/") 0] ("karthinks.com" . "https://karthinks.com/software/scaling-latex-previews-in-emacs/") 0] [[[[[nil [nil nil ("feeds.feedburner.com" . "https://medium.com/p/74bf5e43393c") 0] ("karthinks.com" . "https://karthinks.com/software/dealing-with-window-clutter-in-emacs/") 1] [[nil nil ("danluu.com" . "https://danluu.com/essential-complexity/") 0] nil ("karthinks.com" . "https://karthinks.com/software/more-batteries-included-with-emacs/") -1] ("karthinks.com" . "https://karthinks.com/software/persistent-project-switching-in-emacs/") 0] [[[nil nil ("without.boats" . "https://without.boats/blog/ringbahn-iii/") 0] nil ("without.boats" . "https://without.boats/blog/revisiting-a-smaller-rust/") -1] [[nil nil ("blog.regehr.org" . "https://blog.regehr.org/?p=2037") 0] [[nil nil ("blog.regehr.org" . "https://blog.regehr.org/?p=1837") 0] [nil nil ("without.boats" . "https://without.boats/blog/shipping-const-generics/") 0] ("blog.regehr.org" . "https://blog.regehr.org/?p=1832") 0] ("without.boats" . "https://without.boats/blog/propane/") 1] ("without.boats" . "https://without.boats/blog/iou-0-3/") 1] ("karthinks.com" . "https://karthinks.com/software/batteries-included-with-emacs/") 1] [[[[nil nil ("danluu.com" . "https://danluu.com/car-safety/") 0] nil ("without.boats" . "https://without.boats/blog/two-memory-bugs-from-ringbahn/") -1] [[nil nil ("danluu.com" . "https://danluu.com/voyager-story/") 0] [nil nil ("danluu.com" . "https://danluu.com/metrics-analytics/") 0] ("danluu.com" . "https://danluu.com/tracing-analytics/") 0] ("without.boats" . "https://without.boats/blog/futures-and-segmented-stacks/") 0] [[nil nil ("karthinks.com" . "https://karthinks.com/software/lazy-elfeed/") 0] [[nil nil ("without.boats" . "https://without.boats/blog/the-problem-of-effects/") 0] [nil nil ("without.boats" . "https://without.boats/blog/failure-to-fehler/") 0] ("without.boats" . "https://without.boats/blog/why-ok-wrapping/") 0] ("without.boats" . "https://without.boats/blog/io-uring/") 1] ("without.boats" . "https://without.boats/blog/ringbahn/") 0] ("without.boats" . "https://without.boats/blog/ringbahn-ii/") -1] [[[[nil nil ("without.boats" . "https://without.boats/blog/waitmap/") 0] nil ("danluu.com" . "https://danluu.com/corp-eng-blogs/") -1] [[[nil nil ("danluu.com" . "https://danluu.com/discontinuities/") 0] [nil nil ("danluu.com" . "https://danluu.com/algorithms-interviews/") 0] ("danluu.com" . "https://danluu.com/p95-skill/") 0] [nil nil ("without.boats" . "https://without.boats/blog/iou/") 0] ("without.boats" . "https://without.boats/blog/global-executors/") -1] ("danluu.com" . "https://danluu.com/cli-complexity/") 1] [[[nil nil ("karthinks.com" . "https://karthinks.com/about/") 0] [nil nil ("danluu.com" . "https://danluu.com/deconstruct-files/") 0] ("without.boats" . "https://without.boats/blog/notes-on-a-smaller-rust/") 0] [[nil nil ("karthinks.com" . "https://karthinks.com/blog/the-orphaning-of-ideas/") 0] nil ("without.boats" . "https://without.boats/blog/zero-cost-abstractions/") -1] ("without.boats" . "https://without.boats/blog/await-decision-ii/") 0] ("without.boats" . "https://without.boats/blog/poll-drop/") -1] ("without.boats" . "https://without.boats/blog/vulnerabilities/") -1] ("blog.tecosaur.com" . "https://blog.tecosaur.com/tmio/2021-04-26-Welcome.html") 0] [[[[[[[[nil nil ("without.boats" . "https://without.boats/blog/for-await-i/") 0] nil ("karthinks.com" . "https://karthinks.com/blog/bodies/") -1] [[nil nil ("danluu.com" . "https://danluu.com/overwatch-gender/") 0] [nil nil ("without.boats" . "https://without.boats/blog/generators-i/") 0] ("without.boats" . "https://without.boats/blog/generators-ii/") 0] ("feeds.feedburner.com" . "https://medium.com/p/939348406c73") 0] [[nil nil ("without.boats" . "https://without.boats/blog/wakers-i/") 0] [nil nil ("without.boats" . "https://without.boats/blog/romio/") 0] ("without.boats" . "https://without.boats/blog/rust-2019/") 0] ("without.boats" . "https://without.boats/blog/wakers-ii/") -1] [[[nil nil ("without.boats" . "https://without.boats/blog/anchored-uniform/") 0] [nil nil ("without.boats" . "https://without.boats/blog/shifgrethor-iii/") 0] ("without.boats" . "https://without.boats/blog/shifgrethor-iv/") 0] [[nil nil ("without.boats" . "https://without.boats/blog/the-hard-part-of-open-source/") 0] [nil nil ("without.boats" . "https://without.boats/blog/pin-cell/") 0] ("without.boats" . "https://without.boats/blog/shifgrethor-i/") 0] ("without.boats" . "https://without.boats/blog/shifgrethor-ii/") 0] ("without.boats" . "https://without.boats/blog/await-syntax/") -1] [[[[nil nil ("without.boats" . "https://without.boats/blog/rethinking-pin/") 0] [nil nil ("without.boats" . "https://without.boats/blog/signing-commits-without-gpg/") 0] ("without.boats" . "https://without.boats/blog/my-experience-with-rust-2018/") 0] [[nil nil ("without.boats" . "https://without.boats/blog/async-methods-i/") 0] [[nil nil ("danluu.com" . "https://danluu.com/fsyncgate/") 0] nil ("without.boats" . "https://without.boats/blog/async-vi/") -1] ("without.boats" . "https://without.boats/blog/async-await-final/") 1] ("without.boats" . "https://without.boats/blog/async-methods-ii/") 1] [[[nil nil ("without.boats" . "https://without.boats/blog/async-v-getting-back-to-the-futures/") 0] [nil nil ("without.boats" . "https://without.boats/blog/async-iii-moving-forward/") 0] ("without.boats" . "https://without.boats/blog/async-iv-an-even-better-proposal/") 0] [[nil nil ("without.boats" . "https://without.boats/blog/async-i-self-referential-structs/") 0] [nil nil ("without.boats" . "https://without.boats/blog/goals-for-rust/") 0] ("without.boats" . "https://without.boats/blog/configure/") 0] ("without.boats" . "https://without.boats/blog/async-ii-narrowing-the-scope/") 0] ("without.boats" . "https://without.boats/blog/failure-1.0/") -1] ("without.boats" . "https://without.boats/blog/names-and-scuba/") 0] [[[[nil [nil nil ("danluu.com" . "https://danluu.com/input-lag/") 0] ("without.boats" . "https://without.boats/blog/things-explicit-is-not/") 1] [[nil nil ("danluu.com" . "https://danluu.com/bad-decisions/") 0] [nil [nil nil ("danluu.com" . "https://danluu.com/ui-compatibility/") 0] ("danluu.com" . "https://danluu.com/android-updates/") 1] ("without.boats" . "https://without.boats/blog/announcing-failure/") 1] ("without.boats" . "https://without.boats/blog/failure-0-1-1/") 1] [[[nil nil ("danluu.com" . "https://danluu.com/filesystem-errors/") 0] nil ("danluu.com" . "https://danluu.com/keyboard-latency/") -1] [[[nil nil ("danluu.com" . "https://danluu.com/branch-prediction/") 0] [nil nil ("danluu.com" . "https://danluu.com/term-latency/") 0] ("danluu.com" . "https://danluu.com/sattolo/") 0] [nil [nil nil ("danluu.com" . "https://danluu.com/web-bloat/") 0] ("danluu.com" . "https://danluu.com/startup-options/") 1] ("danluu.com" . "https://danluu.com/keyboard-v-mouse/") 0] ("without.boats" . "https://without.boats/blog/blogging-with-gitlab-and-hugo/") 1] ("without.boats" . "https://without.boats/blog/alternative-registries/") 0] [[[[nil nil ("feeds.feedburner.com" . "https://medium.com/p/63ddaa67d539") 0] [nil nil ("danluu.com" . "https://danluu.com/hn-comments/") 0] ("without.boats" . "https://without.boats/blog/the-rust-module-system-is-too-confusing/") 0] [nil nil ("danluu.com" . "https://danluu.com/hiring-lemons/") 0] ("danluu.com" . "https://danluu.com/programming-books/") -1] [[nil [nil nil ("danluu.com" . "https://danluu.com/learning-to-program/") 0] ("danluu.com" . "https://danluu.com/bimodal-compensation/") 1] [[[nil nil ("danluu.com" . "https://danluu.com/concurrency-bugs/") 0] [nil nil ("feeds.feedburner.com" . "https://medium.com/p/dcc5dde0e1db") 0] ("feeds.feedburner.com" . "https://medium.com/p/92936938c85b") 0] [nil [nil nil ("danluu.com" . "https://danluu.com/programmer-moneyball/") 0] ("danluu.com" . "https://danluu.com/google-sre-book/") 1] ("danluu.com" . "https://danluu.com/programming-blogs/") 0] ("feeds.feedburner.com" . "https://medium.com/p/cd097483e3eb") 1] ("danluu.com" . "https://danluu.com/sounds-easy/") 1] ("without.boats" . "https://without.boats/blog/handshake-patterns/") 0] ("without.boats" . "https://without.boats/blog/unsafe-abstractions/") 0] [[[[[[nil nil ("danluu.com" . "https://danluu.com/su3su2u1/physics/") 0] nil ("danluu.com" . "https://danluu.com/su3su2u1/hpmor/") -1] [nil nil ("danluu.com" . "https://danluu.com/perf-tracing/") 0] ("feeds.feedburner.com" . "https://medium.com/p/48cf7837f56b") -1] [[[nil nil ("danluu.com" . "https://danluu.com/wat/") 0] [nil nil ("danluu.com" . "https://danluu.com/file-consistency/") 0] ("danluu.com" . "https://danluu.com/startup-tradeoffs/") 0] [nil [nil nil ("danluu.com" . "https://danluu.com/infinite-disk/") 0] ("danluu.com" . "https://danluu.com/butler-lampson-1999/") 1] ("danluu.com" . "https://danluu.com/why-ecc/") 0] ("danluu.com" . "https://danluu.com/cpu-bugs/") 0] [[[[nil nil ("danluu.com" . "https://danluu.com/intel-cat/") 0] nil ("danluu.com" . "https://danluu.com/limplock/") -1] [[nil nil ("danluu.com" . "https://danluu.com/postmortem-lessons/") 0] [nil nil ("www.terminally-incoherent.com" . "http://www.terminally-incoherent.com/blog/?p=18631") 0] ("www.terminally-incoherent.com" . "http://www.terminally-incoherent.com/blog/?p=18659") 0] ("danluu.com" . "https://danluu.com/yegge-predictions/") 0] [[[nil nil ("danluu.com" . "https://danluu.com/slashdot-sourceforge/") 0] nil ("danluu.com" . "https://danluu.com/googlebot-monopoly/") -1] [nil [nil nil ("danluu.com" . "https://danluu.com/monorepo/") 0] ("danluu.com" . "https://danluu.com/boring-languages/") 1] ("www.terminally-incoherent.com" . "http://www.terminally-incoherent.com/blog/?p=18566") 0] ("www.terminally-incoherent.com" . "http://www.terminally-incoherent.com/blog/?p=18587") 0] ("www.terminally-incoherent.com" . "http://www.terminally-incoherent.com/blog/?p=18695") 0] [[[[[nil [nil nil ("danluu.com" . "https://danluu.com/datacenter-power/") 0] ("www.terminally-incoherent.com" . "http://www.terminally-incoherent.com/blog/?p=18509") 1] [[nil nil ("www.terminally-incoherent.com" . "http://www.terminally-incoherent.com/blog/?p=18483") 0] [nil nil ("danluu.com" . "https://danluu.com/testing/") 0] ("danluu.com" . "https://danluu.com/dunning-kruger/") 0] ("www.terminally-incoherent.com" . "http://www.terminally-incoherent.com/blog/?p=18497") 0] [[[nil nil ("danluu.com" . "https://danluu.com/percentile-latency/") 0] [nil nil ("danluu.com" . "https://danluu.com/cpu-backdoors/") 0] ("danluu.com" . "https://danluu.com/customer-service/") 0] [[nil nil ("danluu.com" . "https://danluu.com/new-cpu-features/") 0] [nil nil ("danluu.com" . "https://danluu.com/integer-overflow/") 0] ("danluu.com" . "https://danluu.com/julialang/") 0] ("danluu.com" . "https://danluu.com/blog-ads/") 0] ("danluu.com" . "https://danluu.com/navigate-url/") 0] [[[[nil nil ("danluu.com" . "https://danluu.com/tech-discrimination/") 0] [nil nil ("danluu.com" . "https://danluu.com/everything-is-broken/") 0] ("danluu.com" . "https://danluu.com/linux-devs-say/") 0] [[nil nil ("danluu.com" . "https://danluu.com/broken-builds/") 0] nil ("danluu.com" . "https://danluu.com/empirical-pl/") -1] ("danluu.com" . "https://danluu.com/octopress-speedup/") 0] [[[nil nil ("danluu.com" . "https://danluu.com/tests-v-reason/") 0] nil ("danluu.com" . "https://danluu.com/2choices-eviction/") -1] [[nil nil ("danluu.com" . "https://danluu.com/verilog-vs-vhdl/") 0] [nil nil ("danluu.com" . "https://danluu.com/bugalytics/") 0] ("danluu.com" . "https://danluu.com/google-wage-fixing/") 0] ("danluu.com" . "https://danluu.com/assembly-intrinsics/") 0] ("danluu.com" . "https://danluu.com/clwb-pcommit/") 0] ("danluu.com" . "https://danluu.com/malloc-tutorial/") 0] [[[[nil nil ("danluu.com" . "https://danluu.com/gender-gap/") 0] [nil nil ("danluu.com" . "https://danluu.com/teach-debugging/") 0] ("danluu.com" . "https://danluu.com/anon-benchmark/") 0] [[nil nil ("danluu.com" . "https://danluu.com/3c-conflict/") 0] [nil nil ("danluu.com" . "https://danluu.com/hardware-unforgiving/") 0] ("danluu.com" . "https://danluu.com/linear-hammer/") 0] ("danluu.com" . "https://danluu.com/math-bias/") 0] [[[[nil nil ("danluu.com" . "https://danluu.com/randomize-hn/") 0] [nil nil ("danluu.com" . "https://danluu.com/why-hardware-development-is-hard/") 0] ("danluu.com" . "https://danluu.com/pl-troll/") 0] [[nil nil ("danluu.com" . "https://danluu.com/latency-mitigation/") 0] [nil nil ("danluu.com" . "https://danluu.com/bitc-retrospective/") 0] ("danluu.com" . "https://danluu.com/karajack/") 0] ("danluu.com" . "https://danluu.com/about/") 0] [[nil nil ("danluu.com" . "https://danluu.com/mit-stanford/") 0] [[nil nil ("danluu.com" . "https://danluu.com/symbolics-lisp-machines/") 0] [nil nil ("without.boats" . "https://without.boats/404.html") 0] ("danluu.com" . "https://danluu.com/subspace-history/") 0] ("danluu.com" . "https://danluu.com/bioware/") 1] ("danluu.com" . "https://danluu.com/open-social-networks/") 0] ("danluu.com" . "https://danluu.com/discourage-oss/") 1] ("danluu.com" . "https://danluu.com/edit-binary/") 0] ("www.terminally-incoherent.com" . "http://www.terminally-incoherent.com/blog/?p=18559") 1] ("www.terminally-incoherent.com" . "http://www.terminally-incoherent.com/blog/?p=18752") 0] ("without.boats" . "https://without.boats/blog/await-decision/") 0] ("without.boats" . "https://without.boats/blog/generators/") 0] ("emacsredux.com" . "https://emacsredux.com/blog/2025/03/03/the-role-of-the-escape-key-in-emacs") -1] nil nil 0] elfeed-db-compare) :last-update 1759705933.297462)