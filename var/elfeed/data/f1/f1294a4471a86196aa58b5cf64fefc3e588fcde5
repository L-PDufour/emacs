<p>TL;DR: rustc will start using the LLD linker by default on the <code>x86_64-unknown-linux-gnu</code> target starting with the next stable release (1.90.0, scheduled for 2025-09-18), which should significantly reduce linking times. Test it out on beta now, and please report any encountered issues.</p>
<h4 id="some-context"><a class="anchor" href="#some-context" aria-hidden="true"></a>
Some context</h4>
<p>Linking time is often a big part of compilation time. When rustc needs to build a binary or a shared library, it will usually call the default linker installed on the system to do that (this can be changed on the command-line or by the target for which the code is compiled).</p>
<p>The linkers do an important job, with concerns about stability, backwards-compatibility and so on. For these and other reasons, on the most popular operating systems they usually are older programs, designed when computers only had a single core. So, they usually tend to be slow on a modern machine. For example, when building ripgrep 13 in debug mode on Linux, roughly half of the time is actually spent in the linker.</p>
<p>There are different linkers, however, and the usual advice to improve linking times is to use one of these newer and faster linkers, like LLVM's <a href="https://lld.llvm.org/"><code>lld</code></a> or Rui Ueyama's <a href="https://github.com/rui314/mold"><code>mold</code></a>.</p>
<p>Some of Rust's wasm and aarch64 targets already use <code>lld</code> by default. When using rustup, rustc ships with a version of <code>lld</code> for this purpose. When CI builds LLVM to use in the compiler, it also builds the linker and packages it. It's referred to as <code>rust-lld</code> to avoid colliding with any <code>lld</code> already installed on the user's machine.</p>
<p>Since improvements to linking times are substantial, it would be a good default to use in the most popular targets. This has been discussed for a long time, for example in issues <a href="https://github.com/rust-lang/rust/issues/39915">#39915</a> and <a href="https://github.com/rust-lang/rust/issues/71515">#71515</a>.</p>
<p>To expand our testing, we have enabled rustc to use <code>rust-lld</code> by default on nightly, <a href="https://blog.rust-lang.org/2024/05/17/enabling-rust-lld-on-linux.html">in May 2024</a>. No major issues have been reported since then.</p>
<p>We believe we've done all the internal testing that we could, on CI, crater, on our benchmarking infrastructure and on nightly, and plan to enable <code>rust-lld</code> to be the linker used by default on <code>x86_64-unknown-linux-gnu</code> for stable builds in 1.90.0.</p>
<h4 id="benefits"><a class="anchor" href="#benefits" aria-hidden="true"></a>
Benefits</h4>
<p>While this also enables the compiler to use more linker features in the future, the most immediate benefit is much improved linking times.</p>
<p>Here are more details from the ripgrep example mentioned above: for an incremental rebuild, linking is reduced 7x, resulting in a 40% reduction in end-to-end compilation times. For a from-scratch debug build, it is a 20% improvement.</p>
<p><img src="https://blog.rust-lang.org/2025/09/01/rust-lld-on-1.90.0-stable/ripgrep-comparison.png" alt="Before/after comparison of a ripgrep incremental debug build" /></p>
<p>Most binaries should see some improvements here, but it's especially significant with e.g. bigger binaries, or for incremental rebuilds, or when involving debuginfo. These usually see bottlenecks in the linker.</p>
<p>Here's <a href="https://perf.rust-lang.org/compare.html?start=b3e117044c7f707293edc040edb93e7ec5f7040a&amp;end=baed03c51a68376c1789cc373581eea0daf89967&amp;stat=instructions%3Au&amp;tab=compile">a link</a> to the complete results from our benchmarks.</p>
<h4 id="possible-drawbacks"><a class="anchor" href="#possible-drawbacks" aria-hidden="true"></a>
Possible drawbacks</h4>
<p>From our prior testing, we don't really expect issues to happen in practice. It is a drop-in replacement for the vast majority of cases, but <code>lld</code> is not <em>bug-for-bug</em> compatible with GNU ld.</p>
<p>In any case, using <code>rust-lld</code> can be disabled if any problem occurs: use the <code>-C linker-features=-lld</code> flag to revert to using the system's default linker.</p>
<p>Some crates somehow relying on these differences could need additional link args, though we also expect this to be quite rare. Let us know if you encounter problems, by <a href="https://github.com/rust-lang/rust/issues/new/choose">opening an issue</a> on GitHub.</p>
<p>Some of the big gains in performance come from parallelism, which could be undesirable in resource-constrained environments, or for heavy projects that are already reaching hardware limits.</p>
<h4 id="summary-and-call-for-testing"><a class="anchor" href="#summary-and-call-for-testing" aria-hidden="true"></a>
Summary, and call for testing</h4>
<p>rustc will use <code>rust-lld</code> on <code>x86_64-unknown-linux-gnu</code>, starting with the 1.90.0 stable release, for much improved linking times. Rust 1.90.0 will be released next month, on the 18th of September 2025.</p>
<p>This linker change is already available on the current beta (<code>1.90.0-beta.6</code>). To help everyone prepare for this landing on stable, please test your projects on beta and let us know if you encounter problems, by <a href="https://github.com/rust-lang/rust/issues/new/choose">opening an issue</a> on GitHub.</p>
<p>If that happens, you can revert to the default linker with the <code>-C linker-features=-lld</code> flag. Either by adding it to the usual <code>RUSTFLAGS</code> environment variable, or to a project's <a href="https://doc.rust-lang.org/cargo/reference/config.html"><code>.cargo/config.toml</code></a> configuration file,
like so:</p>
<pre data-lang="toml" class="language-toml z-code"><code class="language-toml" data-lang="toml"><span class="z-source z-toml"><span class="z-punctuation z-definition z-table z-begin z-toml">[</span><span class="z-meta z-tag z-table z-toml"><span class="z-entity z-name z-table z-toml">target</span><span class="z-punctuation z-separator z-table z-toml">.</span><span class="z-entity z-name z-table z-toml">x86_64-unknown-linux-gnu</span></span><span class="z-punctuation z-definition z-table z-end z-toml">]</span>
</span><span class="z-source z-toml"><span class="z-meta z-tag z-key z-toml"><span class="z-entity z-name z-tag z-toml">rustflags</span></span> <span class="z-punctuation z-definition z-key-value z-toml">=</span> <span class="z-punctuation z-definition z-array z-begin z-toml">[</span><span class="z-string z-quoted z-double z-basic z-toml"><span class="z-punctuation z-definition z-string z-begin z-toml">&quot;</span>-Clinker-features=-lld<span class="z-punctuation z-definition z-string z-end z-toml">&quot;</span></span><span class="z-punctuation z-definition z-array z-end z-toml">]</span>
</span></code></pre>
