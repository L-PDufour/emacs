<html><head></head><body><p>I recently <a href="https://xenodium.com/so-you-want-acp-for-emacs">shared my early Emacs experiments with ACP</a>, the <a href="https://agentclientprotocol.com">Agent Client Protocol</a> now supported by <a href="https://github.com/google-gemini/gemini-cli">Gemini CLI</a> and <a href="https://github.com/zed-industries/claude-code-acp">Claude Code</a> LLM agents.</p>
<p>While we can already run these agents from Emacs with the likes of <a href="https://github.com/akermu/emacs-libvterm">vterm</a>, I'm keen to offer an Emacs-native alternative to drive them. To do that, I'm working an a new package: <code>agent-shell</code> (more on this to be shared soon). While this new Emacs agent shell has an opinionated user experience, it uses ACP under the hood. Being a protocol, it's entirely UI-agnostic. For this, I now have an early version available of the <a href="https://github.com/xenodium/acp.el">acp.el</a> library.</p>
<p><code>acp.el</code> implements Agent Client Protocol for Emacs lisp as per <a href="https://agentclientprotocol.com">agentclientprotocol.com</a>. While this library is in its infancy, it's enabling me to carry on with my <code>agent-shell</code> work. <code>acp.el</code> lives as a separate library, is UI-agnostic, and can be used by Emacs package authors to build the their desired ACP-powered agent experience.</p>
<p>You can instantiate an ACP client and send a request as follows:</p>
<pre><code class="language-{.commonlisp">(setq client (acp-make-client :command "gemini"
                              :command-params '("--experimental-acp")
                              :environment-variables (when api-key
                                                       (list (format "GEMINI_API_KEY=%s" "your-api-key")))))

(acp-send-request
 :client client
 :request (acp-make-initialize-request :protocol-version 1)
 :on-success (lambda (response)
               (message "Initialize success: %s" response))
 :on-failure (lambda (error)
               (message "Initialize failed: %s" error)))
</code></pre>
<pre><code class="language-{.commonlisp">((protocolVersion . 1)
 (authMethods . [((id . oauth-personal)
                  (name . Log in with Google)
                  (description . :null))
                 ((id . gemini-api-key)
                  (name . Use Gemini API key)
                  (description . Requires setting the `GEMINI_API_KEY` environment variable))
                 ((id . vertex-ai)
                  (name . Vertex AI)
                  (description . :null))])
 (agentCapabilities (loadSession . :false)
                    (promptCapabilities (image . t)
                                        (audio . t)
                                        (embeddedContext . t))))
</code></pre>
<p>I'm new at using ACP myself, so I've added a special logging buffer to <code>acp.el</code> which enables me to inspect traffic and learn about the exchanges between clients and agents. You can enable logging with:</p>
<pre><code class="language-{.commonlisp">(setq acp-logging-enabled t)
</code></pre>
<p>Look out for the <code>*acp traffic*</code> buffer, which looks a little like this:</p>
<p><img src="https://raw.githubusercontent.com/xenodium/acp.el/main/traffic.png" alt=""></p>
<p>If you're keen to experiment with ACP in Emacs lisp and build agent-agnostic packages, take a look at <code>acp.el</code> (<a href="https://github.com/xenodium/acp.el">now on GitHub</a>). As mentioned, it's early days for this library, but it's a start. Please file issues and feature requests. If you build anything on top of <code>acp.el</code>, lemme know. I'd love to see it in action.</p>
<h2>Make this work possible</h2>
<p>I'm working on two new Emacs packages: <a href="https://github.com/xenodium/acp.el">acp.el</a> (introduced in this post) and <code>agent-shell</code> (I'll soon share more about that). Please help me make development of these packages <a href="https://github.com/sponsors/xenodium">sustainable</a>. These packages take time and effort, but also cost me money as I have to pay for LLM tokens throughout testing and development. Please <a href="https://github.com/sponsors/xenodium">help fund it</a>.</p>
</body></html>