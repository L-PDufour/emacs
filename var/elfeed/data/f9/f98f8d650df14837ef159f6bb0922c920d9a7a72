
<p><em>This one is a hot mess but it's too late in the week to start over. Oh well!</em></p>
<p>Someone recognized me at last week's <a href="https://www.chipy.org/" target="_blank">Chipy</a> and asked for my opinion on Sapir-Whorf hypothesis in programming languages. I thought this was interesting enough to make a newsletter. First what it is, then why it <em>looks</em> like it applies, and then why it doesn't apply after all.</p>
<h3>The Sapir-Whorf Hypothesis</h3>
<blockquote>
<p>We dissect nature along lines laid down by our native language. — <a href="https://web.mit.edu/allanmc/www/whorf.scienceandlinguistics.pdf" target="_blank">Whorf</a></p>
</blockquote>
<p>To quote from a <a href="https://www.amazon.com/Linguistics-Complete-Introduction-Teach-Yourself/dp/1444180320" target="_blank">Linguistics book I've read</a>, the hypothesis is that "an individual's fundamental perception of reality is moulded by the language they speak." As a massive oversimplification, if English did not have a word for "rebellion", we would not be able to conceive of rebellion. This view, now called <a href="https://en.wikipedia.org/wiki/Linguistic_determinism" target="_blank">Linguistic Determinism</a>, is mostly rejected by modern linguists.</p>
<p>The "weak" form of SWH is that the language we speak influences, but does not <em>decide</em> our cognition. <a href="https://langcog.stanford.edu/papers/winawer2007.pdf" target="_blank">For example</a>, Russian has distinct words for "light blue" and "dark blue", so can discriminate between "light blue" and "dark blue" shades faster than they can discriminate two "light blue" shades. English does not have distinct words, so we discriminate those at the same speed. This <strong>linguistic relativism</strong> seems to have lots of empirical support in studies, but mostly with "small indicators". I don't think there's anything that convincingly shows linguistic relativism having effects on a societal level.<sup id="fnref:economic-behavior"><a class="footnote-ref" href="#fn:economic-behavior">1</a></sup></p>
<p>The weak form of SWH for software would then be the "the programming languages you know affects how you think about programs."</p>
<h3>SWH in software</h3>
<p>This seems like a natural fit, as different paradigms solve problems in different ways. Consider the <a href="https://hadid.dev/posts/living-coding/" target="_blank">hardest interview question ever</a>, "given a list of integers, sum the even numbers". Here it is in four paradigms:</p>
<ul>
<li>Procedural: <code>total = 0; foreach x in list {if IsEven(x) total += x}</code>. You iterate over data with an algorithm.</li>
<li>Functional: <code>reduce(+, filter(IsEven, list), 0)</code>. You apply transformations to data to get a result.</li>
<li>Array: <code>+ fold L * iseven L</code>.<sup id="fnref:J"><a class="footnote-ref" href="#fn:J">2</a></sup> In English: replace every element in L with 0 if odd and 1 if even, multiple the new array elementwise against <code>L</code>, and then sum the resulting array. It's like functional except everything is in terms of whole-array transformations.</li>
<li>Logical: Somethingish like <code>sumeven(0, []). sumeven(X, [Y|L]) :- iseven(Y) -&gt; sumeven(Z, L), X is Y + Z ; sumeven(X, L)</code>. You write a set of equations that express what it means for X to <em>be</em> the sum of events of L.</li>
</ul>
<p>There's some similarities between how these paradigms approach the problem, but each is also unique, too. It's plausible that where a procedural programmer "sees" a for loop, a functional programmer "sees" a map and an array programmer "sees" a singular operator.</p>
<p>I also have a personal experience with how a language changed the way I think. I use <a href="https://learntla.com/" target="_blank">TLA+</a> to detect concurrency bugs in software designs. After doing this for several years, I've gotten much better at intuitively seeing race conditions in things even <em>without</em> writing a TLA+ spec. It's even leaked out into my day-to-day life. I see concurrency bugs everywhere. Phone tag is a race condition.</p>
<p>But I still don't think SWH is the right mental model to use, for one big reason: language is <em>special</em>. We think in language, we dream in language, there are huge parts of our brain dedicated to processing language. <a href="https://web.eecs.umich.edu/~weimerw/p/weimer-icse2017-preprint.pdf" target="_blank">We don't use those parts of our brain to read code</a>. </p>
<p>SWH is so intriguing because it seems so unnatural, that the way we express thoughts changes the way we <em>think</em> thoughts. That I would be a different person if I was bilingual in Spanish, not because the life experiences it would open up but because <a href="https://en.wikipedia.org/wiki/Grammatical_gender" target="_blank">grammatical gender</a> would change my brain.</p>
<p>Compared to that, the idea that programming languages affect our brain is more natural and has a simpler explanation:</p>
<p>It's the goddamned <a href="https://en.wikipedia.org/wiki/Tetris_effect" target="_blank">Tetris Effect</a>.</p>
<h3>The Goddamned Tetris Effect</h3>
<div class="subscribe-form"></div>
<blockquote>
<p>The Tetris effect occurs when someone dedicates vast amounts of time, effort and concentration on an activity which thereby alters their thoughts, dreams, and other experiences not directly linked to said activity. — Wikipedia</p>
</blockquote>
<p>Every skill does this. I'm a juggler, so every item I can see right now has a tiny metadata field of "how would this tumble if I threw it up". I teach professionally, so I'm always noticing good teaching examples everywhere. I spent years writing specs in TLA+ and watching the model checker throw concurrency errors in my face, so now race conditions have visceral presence. Every skill does this. </p>
<p>And to really develop a skill, you gotta practice. This is where I think programming paradigms do something especially interesting that make them feel more like Sapir-Whorfy than, like, juggling. Some languages mix lots of different paradigms, like Javascript or Rust. Others like Haskell really focus on <em>excluding</em> paradigms. If something is easy for you in procedural and hard in FP, in JS you could just lean on the procedural bits. In Haskell, <em>too bad</em>, you're learning how to do it the functional way.<sup id="fnref:escape-hatch"><a class="footnote-ref" href="#fn:escape-hatch">3</a></sup></p>
<p>And that forces you to practice, which makes you see functional patterns everywhere. Tetris effect!</p>
<p>Anyway this may all seem like quibbling— why does it matter whether we call it "Tetris effect" or "Sapir-Whorf", if our brains is get rewired either way? For me, personally, it's because SWH sounds really special and <em>unique</em>, while Tetris effect sounds mundane and commonplace. Which it <em>is</em>. But also because TE suggests it's not just programming languages that affect how we think about software, it's <em>everything</em>. Spending lots of time debugging, profiling, writing exploits, whatever will change what you notice, what you think a program "is". And that's a way useful idea that shouldn't be restricted to just PLs.</p>
<p>(Then again, the Tetris Effect might also be a bad analogy to what's going on here, because I think part of it is that it wears off after a while. Maybe it's just "building a mental model is good".)</p>
<h3>I just realized all of this might have missed the point</h3>
<p>Wait are people actually using SWH to mean the <em>weak form</em> or the <em>strong</em> form? Like that if a language doesn't make something possible, its users can't conceive of it being possible. I've been arguing against the weaker form in software but I think I've seen strong form often too. Dammit.</p>
<p>Well, it's already Thursday and far too late to rewrite the whole newsletter, so I'll just outline the problem with the strong form: we describe the capabilities of our programming languages <em>with human language</em>. In college I wrote a lot of crappy physics lab C++ and one of my projects was filled with comments like "man I hate copying this triply-nested loop in 10 places with one-line changes, I wish I could put it in one function and just take the changing line as a parameter". Even if I hadn't <em>encountered</em> higher-order functions, I was still perfectly capable of expressing the idea. So if the strong SWH isn't true for human language, it's not true for programming languages either.</p>
<p class="empty-line" style="height:16px; margin:0px !important;"></p>
<hr/>
<h1>Systems Distributed talk now up!</h1>
<p><a href="https://www.youtube.com/watch?v=d9cM8f_qSLQ" target="_blank">Link here</a>! Original abstract:</p>
<blockquote>
<p>Building correct distributed systems takes thinking outside the box, and the fastest way to do that is to think inside a different box. One different box is "formal methods", the discipline of mathematically verifying software and systems. Formal methods encourages unusual perspectives on systems, models that are also broadly useful to all software developers. In this talk we will learn two of the most important FM perspectives: the abstract specifications behind software systems, and the property they are and aren't supposed to have.</p>
</blockquote>
<p>The talk ended up evolving away from that abstract but I like how it turned out!</p>
<div class="footnote">
<hr/>
<ol>
<li id="fn:economic-behavior">
<p>There is <a href="https://www.anderson.ucla.edu/faculty/keith.chen/papers/LanguageWorkingPaper.pdf" target="_blank">one paper</a> arguing that people who speak a language that doesn't have a "future tense" are more likely to save and eat healthy, but it is... <a href="https://www.reddit.com/r/linguistics/comments/rcne7m/comment/hnz2705/" target="_blank">extremely questionable</a>. <a class="footnote-backref" href="#fnref:economic-behavior" title="Jump back to footnote 1 in the text">↩</a></p>
</li>
<li id="fn:J">
<p>The original J is <code>+/ (* (0 =  2&amp;|))</code>. Obligatory <a href="https://www.jsoftware.com/papers/tot.htm" target="_blank">Notation as a Tool of Thought</a> reference <a class="footnote-backref" href="#fnref:J" title="Jump back to footnote 2 in the text">↩</a></p>
</li>
<li id="fn:escape-hatch">
<p>Though if it's <em>too</em> hard for you, that's why languages have <a href="https://buttondown.com/hillelwayne/archive/programming-language-escape-hatches/" target="_blank">escape hatches</a> <a class="footnote-backref" href="#fnref:escape-hatch" title="Jump back to footnote 3 in the text">↩</a></p>
</li>
</ol>
</div>
