
<p>The excellent-but-defunct blog <a href="https://prog21.dadgum.com/38.html" target="_blank">Programming in the 21st Century</a> defines "puzzle languages" as languages were part of the appeal is in figuring out how to express a program idiomatically, like a puzzle. As examples, he lists Haskell, Erlang, and J. All puzzle languages, the author says, have an "escape" out of the puzzle model that is pragmatic but stigmatized.</p>
<p>But many mainstream languages have escape hatches, too.</p>
<p>Languages have a lot of properties. One of these properties is the language's <a href="https://buttondown.com/hillelwayne/archive/the-capability-tractability-tradeoff/" target="_blank">capabilities</a>, roughly the set of things you can do in the language. Capability is desirable but comes into conflicts with a lot of other desirable properties, like simplicity or efficiency. In particular, reducing the capability of a language means that all remaining programs share more in common, meaning there's more assumptions the compiler and programmer can make ("tractability"). Assumptions are generally used to reason about correctness, but can also be about things like optimization: J's assumption that everything is an array leads to <a href="https://code.jsoftware.com/wiki/Vocabulary/SpecialCombinations" target="_blank">high-performance "special combinations"</a>. </p>
<p>Rust is the most famous example of <strong>mainstream</strong> language that trades capability for tractability.<sup id="fnref:gc"><a class="footnote-ref" href="#fn:gc">1</a></sup> Rust has a lot of rules designed to prevent common memory errors, like keeping a reference to deallocated memory or modifying memory while something else is reading it. As a consequence, there's a lot of things that cannot be done in (safe) Rust, like interface with an external C function (as it doesn't have these guarantees).</p>
<p>To do this, you need to use <a href="https://doc.rust-lang.org/book/ch20-01-unsafe-rust.html" target="_blank">unsafe Rust</a>, which lets you do additional things forbidden by safe Rust, such as deference a raw pointer. Everybody tells you not to use <code>unsafe</code> unless you absolutely 100% know what you're doing, and possibly not even then.</p>
<p>Sounds like an escape hatch to me!</p>
<p>To extrapolate, an <strong>escape hatch</strong> is a feature (either in the language itself or a particular implementation) that deliberately breaks core assumptions about the language in order to add capabilities. This explains both Rust and most of the so-called "puzzle languages": they need escape hatches because they have very strong conceptual models of the language which leads to lots of assumptions about programs. But plenty of "kitchen sink" mainstream languages have escape hatches, too:</p>
<ul>
<li>Some compilers let C++ code embed <a href="https://en.cppreference.com/w/cpp/language/asm.html" target="_blank">inline assembly</a>.</li>
<li>Languages built on .NET or the JVM has some sort of interop with C# or Java, and many of those languages make assumptions about programs that C#/Java do not.</li>
<li>The SQL language has stored procedures as an escape hatch <em>and</em> vendors create a second escape hatch of user-defined functions.</li>
<li>Ruby lets you bypass any form of encapsulation with <a href="https://ruby-doc.org/3.4.1/Object.html#method-i-send" target="_blank"><code>send</code></a>.</li>
<li>Frameworks have escape hatches, too! React has <a href="https://react.dev/learn/escape-hatches" target="_blank">an entire page on them</a>.</li>
</ul>
<p>(Does <code>eval</code> in interpreted languages count as an escape hatch? It feels different, but it does add a lot of capability. Maybe they don't "break assumptions" in the same way?)</p>
<h3>The problem with escape hatches</h3>
<p>In all languages with escape hatches, the rule is "use this as carefully and sparingly as possible", to the point where a messy solution <em>without</em> an escape hatch is preferable to a clean solution <em>with</em> one. Breaking a core assumption is a big deal! If the language is operating as if its still true, it's going to do incorrect things. </p>
<p>I recently had this problem in a TLA+ contract. TLA+ is a language for modeling complicated systems, and assumes that the model is a self-contained universe. The client wanted to use the TLA+ to test a real system. The model checker should send commands to a test device and check the next states were the same. This is straightforward to set up with the <a href="https://github.com/tlaplus/CommunityModules/blob/master/modules/IOUtils.tla" target="_blank">IOExec escape hatch</a>.<sup id="fnref:ioexec"><a class="footnote-ref" href="#fn:ioexec">2</a></sup> But the model checker assumed that state exploration was pure and it could skip around the state randomly, meaning it would do things like <code>set x = 10</code>, then skip to <code>set x = 1</code>, then skip back to <code>inc x; assert x == 11</code>. Oops!</p>
<p>We eventually found workarounds but it took a lot of clever tricks to pull off. I'll probably write up the technique when I'm less busy with The Book.</p>
<p>The other problem with escape hatches is the rest of the language is designed around <em>not</em> having said capabilities, meaning it can't support the feature as well as a language designed for them from the start. Even if your escape hatch code is clean, it might not cleanly <em>integrate</em> with the rest of your code. This is why people <a href="https://chadaustin.me/2024/10/intrusive-linked-list-in-rust/" target="_blank">complain about unsafe Rust</a> so often.</p>
<div class="footnote">
<hr/>
<ol>
<li id="fn:gc">
<p>It should be noted though that <em>all</em> languages with automatic memory management are trading capability for tractability, too. If you can't deference pointers, you can't deference <em>null</em> pointers. <a class="footnote-backref" href="#fnref:gc" title="Jump back to footnote 1 in the text">↩</a></p>
</li>
<li id="fn:ioexec">
<p>From the Community Modules (which come default with the VSCode extension). <a class="footnote-backref" href="#fnref:ioexec" title="Jump back to footnote 2 in the text">↩</a></p>
</li>
</ol>
</div>
