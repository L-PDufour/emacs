
<p><em>I started writing this early last week but Real Life Stuff happened and now you're getting the first-draft late this week. Warning, unedited thoughts ahead!</em></p>
<h2>New Logic for Programmers release!</h2>
<p><a href="https://leanpub.com/logic/" target="_blank">v0.9 is out</a>! This is a big release, with a new cover design, several rewritten chapters, <a href="https://github.com/logicforprogrammers/book-assets/tree/master/code" target="_blank">online code samples</a> and much more. See the full release notes at the <a href="https://github.com/logicforprogrammers/book-assets/blob/master/CHANGELOG.md" target="_blank">changelog page</a>, and <a href="https://leanpub.com/logic/" target="_blank">get the book here</a>!</p>
<p><img alt="The new cover! It's a lot nicer" class="newsletter-image" src="https://assets.buttondown.email/images/038a7092-5dc7-41a5-9a16-56bdef8b5d58.jpg?w=400&amp;fit=max"/></p>
<h2>Write the cleverest code you possibly can</h2>
<p>There are millions of articles online about how programmers should not write "clever" code, and instead write simple, maintainable code that everybody understands. Sometimes the example of "clever" code looks like this (<a href="https://codegolf.stackexchange.com/questions/57617/is-this-number-a-prime/57682#57682" target="_blank">src</a>):</p>
<div class="codehilite"><pre><span></span><code><span class="c1"># Python</span>

<span class="n">p</span><span class="o">=</span><span class="n">n</span><span class="o">=</span><span class="mi">1</span>
<span class="n">exec</span><span class="p">(</span><span class="s2">"p*=n*n;n+=1;"</span><span class="o">*~-</span><span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">()))</span>
<span class="nb">print</span><span class="p">(</span><span class="n">p</span><span class="o">%</span><span class="n">n</span><span class="p">)</span>
</code></pre></div>
<p>This is code-golfing, the sport of writing the most concise code possible. Obviously you shouldn't run this in production for the same reason you shouldn't eat dinner off a Rembrandt. </p>
<p>Other times the example looks like this:</p>
<div class="codehilite"><pre><span></span><code><span class="k">def</span><span class="w"> </span><span class="nf">is_prime</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">return</span> <span class="kc">False</span>
    <span class="k">return</span> <span class="nb">all</span><span class="p">([</span><span class="n">x</span><span class="o">%</span><span class="n">n</span> <span class="o">!=</span> <span class="mi">0</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">x</span><span class="p">)])</span>
</code></pre></div>
<p>This is "clever" because it uses a single list comprehension, as opposed to a "simple" for loop. Yes, "list comprehensions are too clever" is something I've read in one of these articles. </p>
<p>I've also talked to people who think that datatypes besides lists and hashmaps are too clever to use, that most optimizations are too clever to bother with, and even that functions and classes are too clever and code should be a linear script.<sup id="fnref:grad-students"><a class="footnote-ref" href="#fn:grad-students">1</a></sup>. Clever code is anything using features or domain concepts we don't understand. Something that seems unbearably clever to me might be utterly mundane for you, and vice versa. </p>
<p>How do we make something utterly mundane? By using it and working at the boundaries of our skills. Almost everything I'm "good at" comes from banging my head against it more than is healthy. That suggests a really good reason to write clever code: it's an excellent form of purposeful practice. Writing clever code forces us to code outside of our comfort zone, developing our skills as software engineers. </p>
<blockquote>
<p>Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you [will get excellent debugging practice at exactly the right level required to push your skills as a software engineer] — Brian Kernighan, probably</p>
</blockquote>
<p>There are other benefits, too, but first let's kill the elephant in the room:<sup id="fnref:bajillion"><a class="footnote-ref" href="#fn:bajillion">2</a></sup></p>
<h3>Don't <em>commit</em> clever code</h3>
<p>I am proposing writing clever code as a means of practice. Being at work is a <em>job</em> with coworkers who will not appreciate if your code is too clever. Similarly, don't use <a href="https://mcfunley.com/choose-boring-technology" target="_blank">too many innovative technologies</a>. Don't put anything in production you are <em>uncomfortable</em> with.</p>
<p>We can still responsibly write clever code at work, though: </p>
<ol>
<li>Solve a problem in both a simple and a clever way, and then only commit the simple way. This works well for small scale problems where trying the "clever way" only takes a few minutes.</li>
<li>Write our <em>personal</em> tools cleverly. I'm a big believer of the idea that most programmers would benefit from writing more scripts and support code customized to their particular work environment. This is a great place to practice new techniques, languages, etc.</li>
<li>If clever code is absolutely the best way to solve a problem, then commit it with <strong>extensive documentation</strong> explaining how it works and why it's preferable to simpler solutions. Bonus: this potentially helps the whole team upskill.</li>
</ol>
<h2>Writing clever code...</h2>
<div class="subscribe-form"></div>
<h3>...teaches simple solutions</h3>
<p>Usually, code that's called too clever composes several powerful features together — the "not a single list comprehension or function" people are the exception. <a href="https://www.joshwcomeau.com/career/clever-code-considered-harmful/" target="_blank">Josh Comeau's</a> "don't write clever code" article gives this example of "too clever":</p>
<div class="codehilite"><pre><span></span><code><span class="kd">const</span><span class="w"> </span><span class="nx">extractDataFromResponse</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="nx">response</span><span class="p">)</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="p">{</span>
<span class="w">  </span><span class="kd">const</span><span class="w"> </span><span class="p">[</span><span class="nx">Component</span><span class="p">,</span><span class="w"> </span><span class="nx">props</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nx">response</span><span class="p">;</span>

<span class="w">  </span><span class="kd">const</span><span class="w"> </span><span class="nx">resultsEntries</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">Object</span><span class="p">.</span><span class="nx">entries</span><span class="p">({</span><span class="w"> </span><span class="nx">Component</span><span class="p">,</span><span class="w"> </span><span class="nx">props</span><span class="w"> </span><span class="p">});</span>
<span class="w">  </span><span class="kd">const</span><span class="w"> </span><span class="nx">assignIfValueTruthy</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="nx">o</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="nx">k</span><span class="p">,</span><span class="w"> </span><span class="nx">v</span><span class="p">])</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="p">(</span><span class="nx">v</span>
<span class="w">    </span><span class="o">?</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="p">...</span><span class="nx">o</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="nx">k</span><span class="p">]</span><span class="o">:</span><span class="w"> </span><span class="nx">v</span><span class="w"> </span><span class="p">}</span>
<span class="w">    </span><span class="o">:</span><span class="w"> </span><span class="nx">o</span>
<span class="w">  </span><span class="p">);</span>

<span class="w">  </span><span class="k">return</span><span class="w"> </span><span class="nx">resultsEntries</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="nx">assignIfValueTruthy</span><span class="p">,</span><span class="w"> </span><span class="p">{});</span>
<span class="p">}</span>
</code></pre></div>
<p>What makes this "clever"? I count eight language features composed together: <code>entries</code>, argument unpacking, implicit objects, splats, ternaries, higher-order functions, and reductions. Would code that used only one or two of these features still be "clever"? I don't think so. These features exist for a reason, and oftentimes they make code simpler than not using them.</p>
<p>We can, of course, learn these features one at a time. Writing the clever version (but not <em>committing it</em>) gives us practice with all eight at once and also with how they compose together. That knowledge comes in handy when we want to apply a single one of the ideas.</p>
<p>I've recently had to do a bit of pandas for a project. Whenever I have to do a new analysis, I try to write it as a single chain of transformations, and then as a more balanced set of updates.</p>
<h3>...helps us master concepts</h3>
<p>Even if the composite parts of a "clever" solution aren't by themselves useful, it still makes us better at the overall language, and that's inherently valuable. A few years ago I wrote <a href="https://www.hillelwayne.com/post/python-abc/" target="_blank">Crimes with Python's Pattern Matching</a>. It involves writing horrible code like this:</p>
<div class="codehilite"><pre><span></span><code><span class="kn">from</span><span class="w"> </span><span class="nn">abc</span><span class="w"> </span><span class="kn">import</span> <span class="n">ABC</span>

<span class="k">class</span><span class="w"> </span><span class="nc">NotIterable</span><span class="p">(</span><span class="n">ABC</span><span class="p">):</span>

    <span class="nd">@classmethod</span>
    <span class="k">def</span><span class="w"> </span><span class="nf">__subclasshook__</span><span class="p">(</span><span class="bp">cls</span><span class="p">,</span> <span class="n">C</span><span class="p">):</span>
        <span class="k">return</span> <span class="ow">not</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">C</span><span class="p">,</span> <span class="s2">"__iter__"</span><span class="p">)</span>

<span class="k">def</span><span class="w"> </span><span class="nf">f</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">match</span> <span class="n">x</span><span class="p">:</span>
        <span class="k">case</span> <span class="n">NotIterable</span><span class="p">():</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">x</span><span class="si">}</span><span class="s2"> is not iterable"</span><span class="p">)</span>
        <span class="k">case</span><span class="w"> </span><span class="k">_</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">x</span><span class="si">}</span><span class="s2"> is iterable"</span><span class="p">)</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">"__main__"</span><span class="p">:</span>
    <span class="n">f</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
    <span class="n">f</span><span class="p">(</span><span class="s2">"string"</span><span class="p">)</span>
    <span class="n">f</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>
</code></pre></div>
<p>This composes Python match statements, which are broadly useful, and abstract base classes, which are incredibly niche. But even if I never use ABCs in real production code, it helped me understand Python's match semantics and <a href="https://docs.python.org/3/howto/mro.html#python-2-3-mro" target="_blank">Method Resolution Order</a> better. </p>
<h3>...prepares us for necessity</h3>
<p>Sometimes the clever way is the <em>only</em> way. Maybe we need something faster than the simplest solution. Maybe we are working with constrained tools or frameworks that demand cleverness. Peter Norvig argued that design patterns compensate for missing language features. I'd argue that cleverness is another means of compensating: if our tools don't have an easy way to do something, we need to find a clever way.</p>
<p>You see this a lot in formal methods like TLA+. Need to check a hyperproperty? <a href="https://www.hillelwayne.com/post/graphing-tla/" target="_blank">Cast your state space to a directed graph</a>. Need to compose ten specifications together? <a href="https://www.hillelwayne.com/post/composing-tla/" target="_blank">Combine refinements with state machines</a>. Most difficult problems have a "clever" solution. The real problem is that clever solutions have a skill floor. If normal use of the tool is at difficult 3 out of 10, then basic clever solutions are at 5 out of 10, and it's hard to jump those two steps in the moment you need the cleverness.</p>
<p>But if you've practiced with writing overly clever code, you're used to working at a 7 out of 10 level in short bursts, and then you can "drop down" to 5/10. I don't know if that makes too much sense, but I see it happen a lot in practice.</p>
<h3>...builds comradery</h3>
<p>On a few occasions, after getting a pull request merged, I pulled the reviewer over and said "check out this horrible way of doing the same thing". I find that as long as people know they're not going to be subjected to a clever solution in production, they enjoy seeing it!</p>
<p><em>Next week's newsletter will probably also be late, after that we should be back to a regular schedule for the rest of the summer.</em></p>
<div class="footnote">
<hr/>
<ol>
<li id="fn:grad-students">
<p>Mostly grad students outside of CS who have to write scripts to do research. And in more than one data scientist. I think it's correlated with using Jupyter. <a class="footnote-backref" href="#fnref:grad-students" title="Jump back to footnote 1 in the text">↩</a></p>
</li>
<li id="fn:bajillion">
<p>If I don't put this at the beginning, I'll get a bajillion responses like "your team will hate you" <a class="footnote-backref" href="#fnref:bajillion" title="Jump back to footnote 2 in the text">↩</a></p>
</li>
</ol>
</div>
