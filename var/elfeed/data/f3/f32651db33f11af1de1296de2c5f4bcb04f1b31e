<html><head></head><body><p>
In honor of the release of <a href="https://www.debian.org/News/2025/20250809">Debian 13 Trixie</a> I've treated myself to a
fresh install of Debian.  In the spirit of minimalism I've started
with a completely bare base-system, opting to skip all graphical
desktops for my initial install.  I enjoy the process of starting with
essentially a Linux server and only installing packages as I actually
need them.  Doing this highlights the applications I rely on, and in
turn the software those apps rely on.  In other words dependencies.
</p>

<p>
Now I'll admit this is mostly a fun exercise that appeals to my
brain in particular.  For the <i>most part</i> extra software is not a big
issue, and it is better to have a working computer than a few less
bytes on a hard drive.  I just find a minimal setup satisfying.  At
one point I was an <a href="https://archlinux.org/">Arch Linux</a> user, it is what it is.
</p>

<p>
The tradeoffs of software minimalism were highlighted for me when I
installed <a href="https://packages.debian.org/trixie/mpd"><code>mpd</code></a> (Music Player Daemon).  <code>mpd</code> has a lot of
dependencies and a few that I found unnecessary.  I will likely never
need to play Commodore 64 music files (<code>libsidplayfp6</code>), but that is
also what makes <code>mpd</code> great.  It is a flexible tool you can throw
anything at.  Still I was a little more annoyed to see JavaScript
libraries installed just to show the documentation pages (Sphinx).
</p>

<p>
If I was a python programmer I likely would have never noticed because
Sphinx is a dependency for nearly every <code>*python-doc</code> package.  For me
though <code>mpd</code> is the only package that requires these dependencies.
It's just a few extra bytes, I can live with it.  Perhaps someday I'll
be in the woods completely offline and need to consult a local copy of
the <code>mpd</code> docs.  In that moment I'll be so thankful.  I might not even
consider that Sphinx definitely has export options that does not
require JavaScript libraries.
</p>

<p>
Of course this is not a real deal breaker.  I could build <code>mpd</code>
myself, or build a custom deb package.  I could switch back to Arch
Linux.  Better yet I could switch to <a href="https://www.gentoo.org/">Gentoo</a> and spend all my days
compiling packages.  No, I use Debian because I <i>like</i> Debian.  I like
the philosophy, stability, and cooperative spirit of the project.
Debian maintainers are making sane choices that makes stuff work with
reasonable defaults that supports a huge range of use cases.
</p>

<p>
With all that in mind, lets talk about LaTeX.
</p>
<div class="outline-2">
<h2><span class="section-number-2">1.</span> Installing LaTeX on Debian</h2>
<div class="outline-text-2">
<p>
To build LaTeX documents we need to install the TeX Live distribution.
A full install of the <code>texlive</code> packages is huge and includes
thousands of TeX packages.  Majority of which I will never use and
don't want to install.  The problem is to compile Org-mode documents
we need several packages that are <i>only</i> included in the extensive
<code>texlive-latex-extra</code> and <code>texlive-pictures</code> packages.
</p>
</div>
<div class="outline-3">
<h3><span class="section-number-3">1.1.</span> Installing LaTeX the Normal Way</h3>
<div class="outline-text-3">
<div class="org-src-container">
<pre>sudo apt install texlive texlive-latex-extra texlive-pictures texlive-science
</pre>
</div>

<p>
You can see the list of TeX packages each of these installs in the
package descriptions.  Run <code>apt info</code> to see the full list. The
<code>texlive-latex-extra</code> lists around 1,500 packages.  I need ~3.
</p>

<div class="org-src-container">
<pre>apt info texlive-latex-extra
</pre>
</div>
</div>
</div>
<div class="outline-3">
<h3><span class="section-number-3">1.2.</span> Manual TeX Live Install</h3>
<div class="outline-text-3">
<p>
If you <i>really</i> want a minimal install the best option would be to
just manually install texlive and the packages you want.  You can do
that by following the instructions on <a href="https://tug.org/texlive/">tug.org/texlive/</a>, That is
probably the <b>right way</b> to circumvent installing every Debian texlive
package.  Once installed you'll be able to manage your whole texlive
install with the included package manager <code>tlmgr</code> (TeX Live Manager).
</p>
</div>
</div>
<div class="outline-3">
<h3><span class="section-number-3">1.3.</span> Mixed Install with <code>apt</code> and <code>tlmgr</code></h3>
<div class="outline-text-3">
<p>
The method I used was a little more chaotic.  I installed the base
<a href="https://packages.debian.org/trixie/texlive">texlive</a> system via <code>apt</code>.  This gives us all the critical stuff for
building basic documents (pdflatex, tlmgr) with minimal effort.
</p>

<div class="org-src-container">
<pre>apt install texlive
</pre>
</div>

<p>
After that I go to my documents and start trying to build them.  Even
for a basic Org to LaTeX document there are several TeX packages that
will be missing.  The compile warning will call out the missing
package <code>*.sty</code> and then I can install it with <code>tlmgr</code>.
</p>

<pre>ERROR: LaTeX Error: File `wrapfig.sty' not found.

--- TeX said ---
./test.tex:9:  ==&gt; Fatal error occurred, no output PDF file produced!
</pre>

<p>
On Debian the texlive package manager <code>tlmgr</code> is included with the
base <code>texlive</code> install.  The Debian maintainers have explicitly
recommend not to use this tool<sup><a href="#fn.1">1</a></sup>, because it may install TeX
packages are incompatible with the deb package versions.  So please
<span class="underline">do this at your own risk and do <b>NOT</b> pester Debian volunteers if
your TeX install breaks!</span>
</p>

<p>
One benefit of this mixed setup is the <code>tlmgr</code> tool is forced into
<code>--user</code> mode.  This means all packages are installed locally in your
home directory.  For my use case that is perfect.  If something breaks
I can always delete the directory and fall back to an <code>apt</code> install.
By default packages are stored in <code>~/texmf/</code>, and can be changed by
setting the <code>TEXMFHOME</code> environment variable.  In my <code>~/.bashrc</code> I
have this set:
</p>

<div class="org-src-container">
<pre><span class="org-builtin">export</span> <span class="org-variable-name">TEXMFHOME</span>=$<span class="org-variable-name">HOME</span>/.config/texlive/
</pre>
</div>

<p>
Then initialize our <code>tlmgr</code> folder with:
</p>

<div class="org-src-container">
<pre><span class="org-builtin">source</span> ~/.bashrc    <span class="org-comment-delimiter"># </span><span class="org-comment">Ensure your $TEXMFHOME is set
</span><span class="org-builtin">echo</span> $<span class="org-variable-name">TEXMFHOME</span>
tlmgr init-usertree
</pre>
</div>

<p>
Now we can install the couple missing dependences needed for Org LaTeX
export via <code>tlmgr</code>.  Once you've installed all the packages reported
in your LaTeX compile errors you should be all set going forward.
</p>

<div class="org-src-container">
<pre>tlmgr install warpfig rotating ulem capt-of
</pre>
</div>

<p>
Again this is a hack-y solution, but currently I only have ~10
packages manually installed.  That is in comparison to the hundreds of
packages included in all of texlive.  This solution may become more
fragile over time as Debian stable drifts further out of date with
current TeX Live releases.  Although I suspect most popular TeX
packages are pretty stable and slow moving.
</p>
</div>
</div>
</div>
<div>
<h2>Footnotes: </h2>
<div>

<div class="footdef"><sup><a href="#fnr.1">1</a></sup> <div class="footpara"><p>
See <code>/usr/share/doc/texlive-base/README.tlmgr-on-Debian.md</code>
</p></div></div>


</div>
</div></body></html>