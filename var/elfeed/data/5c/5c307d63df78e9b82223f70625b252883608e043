<html><head></head><body><div class="content">

 <p>
 <i>~590 words. ~2 minutes.</i>
</p>

 <div class="tagbar"> <span> <a href="tags.html">tags:</a></span>  <span> <a href="tags.html#emacs">emacs</a></span></div>


 <p>
This is my second submission to the Emacs Carnival (my first one was
 <a href="emacs-elevator-pitch.html">emacs elevator pitch</a>). The theme this time around is about  <a href="https://goritskov.com/posts/obscure_packages.html">obscure
emacs packages</a>. I figure I will just talk about the  <i>obscure</i> packages I
use.
</p>
 <div class="outline-2">
 <h2>Org Custom Cookies</h2>
 <div class="outline-text-2">
 <p>
 <i> <a href="https://github.com/gsingh93/org-custom-cookies">homepage</a></i>
</p>

 <p>
This package by  <a href="https://gsgx.me/">gsingh93</a> allows you to define your own custom cookies
for org-mode. This was the first package I ever contributed to :).
</p>

 <p>
I no longer use it though. I think I had used it to add a counter
cookie for the number of subheadings of an org heading.
</p>
</div>
</div>
 <div class="outline-2">
 <h2>Yeetube</h2>
 <div class="outline-text-2">
 <p>
 <i> <a href="https://thanosapollo.org/projects/yeetube/">homepage</a></i>
</p>

 <p>
This package by  <a href="https://thanosapollo.org/">Thanos Apollo</a> allows you to  <i>search</i> for YouTube videos
and play them through mpv (which uses yt-dlp under the hood). As we
all know, YouTube is a demonic proprietary website but unfortunately a
lot of videos are only available on YouTube. So as much as I would
like to only rely on  <a href="https://joinpeertube.org/">Peertube</a> and friends, I can't.
</p>

 <p>
Yeetube directly  <i>parses</i> the search results from the search page HTML,
this is what differentiates it from tools like ytfzf which rely on the
invidious api to get the search results. The problem with invidious is
that because YouTube keeps blocking them, there is no guarantee that
the instance you use now will work reliably tomorrow. AFAIK, ytfzf
also used to directly parse the YouTube search result pages, I am not
sure why they stopped.
</p>

 <p>
And after parsing the search results, it displays them in a neat table
with  <b>THUMBNAILS</b>! And it also allows you to control mpv from within
Emacs.
</p>
</div>
</div>
 <div class="outline-2">
 <h2>tinee: tinee is not emacs everywhere</h2>
 <div class="outline-text-2">
 <p>
 <i> <a href="http://codeberg.org/tusharhero/tinee">homepage</a></i>
</p>

 <p>
This time the author is me! The package name is a homage to the
venerable  <a href="https://github.com/tecosaur/emacs-everywhere">emacs-everywhere</a> package. Of which tinee is just a simple
substitute on Wayland.
</p>

 <p>
For those who don't know what emacs-everywhere or tinee are supposed
to do, they allow you to use Emacs to write everywhere on your
computer. This is done by binding a key to tinee/emacs-everywhere in
your desktop environment, which then opens up a small emacs frame for
you to type what you want, after you are done, it automatically sends
the content into the proper place.
</p>
</div>
</div>
 <div class="outline-2">
 <h2>Emacs Reader</h2>
 <div class="outline-text-2">
 <p>
 <i> <a href="https://codeberg.org/divyaranjan/emacs-reader">homepage</a></i>
</p>

 <p>
This is a very ambitious project by  <a href="https://mathstodon.xyz/@divyaranjan">Divya Ranjan</a>. It aims to
completely replace PDF-tools and DocView.
</p>

 <p>
It uses MuPDF in the backend via a  <a href="https://www.phimulambda.org/blog/emacs-dynamic-module.html">dynamic module</a>.
</p>

 <p>
Currently, it is still in very initial stages but we already have:
</p>
 <ul> <li> <b>RIDICULOUSLY</b> better performance and smoothness and responsiveness in
comparison to both PDF tools and DocView.</li>
 <li>All formats supported by MuPDF (not just PDFs, EPUBs, and stuff too).</li>
 <li>multithreaded rendering of the documents</li>
 <li>dark-mode</li>
 <li>imenu and outline</li>
 <li>bookmarks and saveplace support</li>
</ul> <p>
Currently, we are  <i> <a href="https://codeberg.org/divyaranjan/emacs-reader/pulls/126">trying</a></i> to implement text related features.
</p>
</div>
</div>
</div></body></html>