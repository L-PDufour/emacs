
<p>You're walking down the street and need to pass someone going the opposite way. You take a step left, but they're thinking the same thing and take a step to their <em>right</em>, aka your left. You're still blocking each other. Then you take a step to the right, and they take a step to their left, and you're back to where you started. I've heard this called "walkwarding"</p>
<p>Let's model this in <a href="https://lamport.azurewebsites.net/tla/tla.html" target="_blank">TLA+</a>. TLA+ is a <strong>formal methods</strong> tool for finding bugs in complex software designs, most often involving concurrency. Two people trying to get past each other just also happens to be a concurrent system. A gentler introduction to TLA+'s capabilities is <a href="https://www.hillelwayne.com/post/modeling-deployments/" target="_blank">here</a>, an in-depth guide teaching the language is <a href="https://learntla.com/" target="_blank">here</a>.</p>
<h2>The spec</h2>
<div class="codehilite"><pre><span></span><code>---- MODULE walkward ----
EXTENDS Integers

VARIABLES pos
vars == &lt;&lt;pos&gt;&gt;
</code></pre></div>
<p>Double equals defines a new operator, single equals is an equality check. <code>&lt;&lt;pos&gt;&gt;</code> is a sequence, aka array.</p>
<div class="codehilite"><pre><span></span><code>you == "you"
me == "me"
People == {you, me}

MaxPlace == 4

left == 0
right == 1
</code></pre></div>
<p>I've gotten into the habit of assigning string "symbols" to operators so that the compiler complains if I misspelled something. <code>left</code> and <code>right</code> are numbers so we can shift position with <code>right - pos</code>.</p>
<div class="codehilite"><pre><span></span><code>direction == [you |-&gt; 1, me |-&gt; -1]
goal == [you |-&gt; MaxPlace, me |-&gt; 1]

Init ==
  \* left-right, forward-backward
  pos = [you |-&gt; [lr |-&gt; left, fb |-&gt; 1], me |-&gt; [lr |-&gt; left, fb |-&gt; MaxPlace]]
</code></pre></div>
<p><code>direction</code>, <code>goal</code>, and <code>pos</code> are "records", or hash tables with string keys. I can get my left-right position with <code>pos.me.lr</code> or <code>pos["me"]["lr"]</code> (or <code>pos[me].lr</code>, as <code>me == "me"</code>).</p>
<div class="codehilite"><pre><span></span><code>Juke(person) ==
  pos' = [pos EXCEPT ![person].lr = right - @]
</code></pre></div>
<p>TLA+ breaks the world into a sequence of steps. In each step, <code>pos</code> is the value of <code>pos</code> in the <em>current</em> step and <code>pos'</code> is the value in the <em>next</em> step. The main outcome of this semantics is that we "assign" a new value to <code>pos</code> by declaring <code>pos'</code> equal to something. But the semantics also open up lots of cool tricks, like swapping two values with <code>x' = y /\ y' = x</code>.</p>
<p>TLA+ is a little weird about updating functions. To set <code>f[x] = 3</code>, you gotta write <code>f' = [f EXCEPT ![x] = 3]</code>. To make things a little easier, the rhs of a function update can contain <code>@</code> for the old value. <code>![me].lr = right - @</code> is the same as <code>right - pos[me].lr</code>, so it swaps left and right.</p>
<p>("Juke" comes from <a href="https://www.merriam-webster.com/dictionary/juke" target="_blank">here</a>)</p>
<div class="codehilite"><pre><span></span><code>Move(person) ==
  LET new_pos == [pos[person] EXCEPT !.fb = @ + direction[person]]
  IN
    /\ pos[person].fb # goal[person]
    /\ \A p \in People: pos[p] # new_pos
    /\ pos' = [pos EXCEPT ![person] = new_pos]
</code></pre></div>
<p>The <code>EXCEPT</code> syntax can be used in regular definitions, too. This lets someone move one step in their goal direction <em>unless</em> they are at the goal <em>or</em> someone is already in that space. <code>/\</code> means "and".</p>
<div class="codehilite"><pre><span></span><code>Next ==
  \E p \in People:
    \/ Move(p)
    \/ Juke(p)
</code></pre></div>
<p>I really like how TLA+ represents concurrency: "In each step, there is a person who either moves or jukes." It can take a few uses to really wrap your head around but it can express extraordinarily complicated distributed systems.</p>
<div class="codehilite"><pre><span></span><code>Spec == Init /\ [][Next]_vars

Liveness == &lt;&gt;(pos[me].fb = goal[me])
====
</code></pre></div>
<p><code>Spec</code> is our specification: we start at <code>Init</code> and take a <code>Next</code> step every step.</p>
<p>Liveness is the generic term for "something good is guaranteed to happen", see <a href="https://www.hillelwayne.com/post/safety-and-liveness/" target="_blank">here</a> for more.  <code>&lt;&gt;</code> means "eventually", so <code>Liveness</code> means "eventually my forward-backward position will be my goal". I could extend it to "both of us eventually reach out goal" but I think this is good enough for a demo.</p>
<h3>Checking the spec</h3>
<p>Four years ago, everybody in TLA+ used the <a href="https://lamport.azurewebsites.net/tla/toolbox.html" target="_blank">toolbox</a>. Now the community has collectively shifted over to using the <a href="https://github.com/tlaplus/vscode-tlaplus/" target="_blank">VSCode extension</a>.<sup id="fnref:ltla"><a class="footnote-ref" href="#fn:ltla">1</a></sup> VSCode requires we write a configuration file, which I will call <code>walkward.cfg</code>.</p>
<div class="codehilite"><pre><span></span><code>SPECIFICATION Spec
PROPERTY Liveness
</code></pre></div>
<p>I then check the model with the VSCode command <code>TLA+: Check model with TLC</code>. Unsurprisingly, it finds an error:</p>
<p><img alt="Screenshot 2025-05-12 153537.png" class="newsletter-image" src="https://assets.buttondown.email/images/af6f9e89-0bc6-4705-b293-4da5f5c16cfe.png?w=960&amp;fit=max"/></p>
<p>The reason it fails is "stuttering": I can get one step away from my goal and then just stop moving forever. We say the spec is <a href="https://www.hillelwayne.com/post/fairness/" target="_blank">unfair</a>: it does not guarantee that if progress is always possible, progress will be made. If I want the spec to always make progress, I have to make some of the steps <strong>weakly fair</strong>.</p>
<div class="codehilite"><pre><span></span><code><span class="gi">+ Fairness == WF_vars(Next)</span>

<span class="gd">- Spec == Init /\ [][Next]_vars</span>
<span class="gi">+ Spec == Init /\ [][Next]_vars /\ Fairness</span>
</code></pre></div>
<p>Now the spec is weakly fair, so someone will always do <em>something</em>. New error:</p>
<div class="codehilite"><pre><span></span><code>\* First six steps cut
7: &lt;Move("me")&gt;
pos = [you |-&gt; [lr |-&gt; 0, fb |-&gt; 4], me |-&gt; [lr |-&gt; 1, fb |-&gt; 2]]
8: &lt;Juke("me")&gt;
pos = [you |-&gt; [lr |-&gt; 0, fb |-&gt; 4], me |-&gt; [lr |-&gt; 0, fb |-&gt; 2]]
9: &lt;Juke("me")&gt; (back to state 7)
</code></pre></div>
<p>In this failure, I've successfully gotten past you, and then spend the rest of my life endlessly juking back and forth. The <code>Next</code> step keeps happening, so weak fairness is satisfied. What I actually want is for both my <code>Move</code> and my <code>Juke</code> to both be weakly fair independently of each other.</p>
<div class="codehilite"><pre><span></span><code><span class="gd">- Fairness == WF_vars(Next)</span>
<span class="gi">+ Fairness == WF_vars(Move(me)) /\ WF_vars(Juke(me))</span>
</code></pre></div>
<p>If my liveness property also specified that <em>you</em> reached your goal, I could instead write <code>\A p \in People: WF_vars(Move(p)) etc</code>. I could also swap the <code>\A</code> with a <code>\E</code> to mean at least one of us is guaranteed to have fair actions, but not necessarily both of us. </p>
<p>New error:</p>
<div class="codehilite"><pre><span></span><code>3: &lt;Move("me")&gt;
pos = [you |-&gt; [lr |-&gt; 0, fb |-&gt; 2], me |-&gt; [lr |-&gt; 0, fb |-&gt; 3]]
4: &lt;Juke("you")&gt;
pos = [you |-&gt; [lr |-&gt; 1, fb |-&gt; 2], me |-&gt; [lr |-&gt; 0, fb |-&gt; 3]]
5: &lt;Juke("me")&gt;
pos = [you |-&gt; [lr |-&gt; 1, fb |-&gt; 2], me |-&gt; [lr |-&gt; 1, fb |-&gt; 3]]
6: &lt;Juke("me")&gt;
pos = [you |-&gt; [lr |-&gt; 1, fb |-&gt; 2], me |-&gt; [lr |-&gt; 0, fb |-&gt; 3]]
7: &lt;Juke("you")&gt; (back to state 3)
</code></pre></div>
<p>Now we're getting somewhere! This is the original walkwarding situation we wanted to capture. We're in each others way, then you juke, but before either of us can move you juke, then we both juke back. We can repeat this forever, trapped in a social hell.</p>
<p>Wait, but doesn't <code>WF(Move(me))</code> guarantee I will eventually move? Yes, but <em>only if a move is permanently available</em>. In this case, it's not permanently available, because every couple of steps it's made temporarily unavailable.</p>
<p>How do I fix this? I can't add a rule saying that we only juke if we're blocked, because the whole point of walkwarding is that we're not coordinated. In the real world, walkwarding can go on for agonizing seconds. What I can do instead is say that Liveness holds <em>as long as <code>Move</code> is strongly fair</em>. Unlike weak fairness, <a href="https://www.hillelwayne.com/post/fairness/#strong-fairness" target="_blank">strong fairness</a> guarantees something happens if it keeps becoming possible, even with interruptions. </p>
<div class="codehilite"><pre><span></span><code>Liveness == 
<span class="gi">+  SF_vars(Move(me)) =&gt; </span>
<span class="w"> </span>   &lt;&gt;(pos[me].fb = goal[me])
</code></pre></div>
<p>This makes the spec pass. Even if we weave back and forth for five minutes, as long as we eventually pass each other, I will reach my goal. Note we could also by making <code>Move</code> in <code>Fairness</code> strongly fair, which is preferable if we have a lot of different liveness properties to check.</p>
<h3>A small exercise for the reader</h3>
<p>There is a presumed invariant that is violated. Identify what it is, write it as a property in TLA+, and show the spec violates it. Then fix it.</p>
<p>Answer (in <a href="https://rot13.com/" target="_blank">rot13</a>): Gur vainevnag vf "ab gjb crbcyr ner va gur rknpg fnzr ybpngvba". <code>Zbir</code> thnenagrrf guvf ohg <code>Whxr</code> <em>qbrf abg</em>.</p>
<h3>More TLA+ Exercises</h3>
<p>I've started work on <a href="https://github.com/hwayne/tlaplus-exercises/" target="_blank">an exercises repo</a>. There's only a handful of specific problems now but I'm planning on adding more over the summer.</p>
<div class="footnote">
<hr/>
<ol>
<li id="fn:ltla">
<p><a href="https://learntla.com/" target="_blank">learntla</a> is still on the toolbox, but I'm hoping to get it all moved over this summer. <a class="footnote-backref" href="#fnref:ltla" title="Jump back to footnote 1 in the text">↩</a></p>
</li>
</ol>
</div>
