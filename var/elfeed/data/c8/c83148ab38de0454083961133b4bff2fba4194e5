
<h3>New Logic for Programmers Release!</h3>
<p><a href="https://leanpub.com/logic/" target="_blank">v0.11 is now available</a>! This is over 20%  longer than v0.10, with a new chapter on code proofs, three chapter overhauls, and more! <a href="https://github.com/logicforprogrammers/book-assets/blob/master/CHANGELOG.md" target="_blank">Full release notes here</a>.</p>
<p><img alt="Cover of the boooooook" class="newsletter-image" src="https://assets.buttondown.email/images/92b4a35d-2bdd-416a-92c7-15ff42b49d8d.jpg?w=960&amp;fit=max"/></p>
<h1>Software books I wish I could read</h1>
<p>I'm writing <em>Logic for Programmers</em> because it's a book I wanted to have ten years ago. I had to learn everything in it the hard way, which is why I'm ensuring that everybody else can learn it the easy way.</p>
<p>Books occupy a sort of weird niche in software. We're great at sharing information via blogs and git repos and entire websites. These have many benefits over books: they're free, they're easily accessible, they can be updated quickly, they can even be interactive. But no blog post has influenced me as profoundly as <a href="https://buttondown.com/hillelwayne/archive/why-you-should-read-data-and-reality/" target="_blank">Data and Reality</a> or <a href="https://www.oreilly.com/library/view/making-software/9780596808310/" target="_blank">Making Software</a>. There is no blog or talk about debugging as good as the 
<a href="https://debuggingrules.com/" target="_blank">Debugging</a> book.</p>
<p>It might not be anything deeper than "people spend more time per word on writing books than blog posts". I dunno.</p>
<p>So here are some other books I wish I could read. I don't <em>think</em> any of them exist yet but it's a big world out there. Also while they're probably best as books, a website or a series of blog posts would be ok too.</p>
<h4>Everything about Configurations</h4>
<p>The whole topic of how we configure software, whether by CLI flags, environmental vars, or JSON/YAML/XML/Dhall files. What causes the <a href="https://mikehadlow.blogspot.com/2012/05/configuration-complexity-clock.html" target="_blank">configuration complexity clock</a>? How do we distinguish between basic, advanced, and developer-only configuration options? When should we disallow configuration? How do we test all possible configurations for correctness? Why do so many widespread outages trace back to misconfiguration, and how do we prevent them? </p>
<p>I also want the same for plugin systems. Manifests, permissions, common APIs and architectures, etc. Configuration management is more universal, though, since everybody either uses software with configuration or has made software with configuration.</p>
<h4>The Big Book of Complicated Data Schemas</h4>
<p>I guess this would kind of be like <a href="https://schema.org/docs/full.html" target="_blank">Schema.org</a>, except with a lot more on the "why" and not the what. Why is important for the <a href="https://schema.org/Volcano" target="_blank">Volcano model</a> to have a "smokingAllowed" field?<sup id="fnref:volcano"><a class="footnote-ref" href="#fn:volcano">1</a></sup></p>
<p>I'd see this less as "here's your guide to putting Volcanos in your database" and more "here's recurring motifs in modeling interesting domains", to help a person see sources of complexity in their <em>own</em> domain. Does something crop up if the references can form a cycle? If a relationship needs to be strictly temporary, or a reference can change type? Bonus: path dependence in data models, where an additional requirement leads to a vastly different ideal data model that a company couldn't do because they made the old model.</p>
<p>(This has got to exist, right? Business modeling is a big enough domain that this must exist. Maybe <a href="https://essenceofsoftware.com/" target="_blank">The Essence of Software</a> touches on this? Man I feel bad I haven't read that yet.)</p>
<h4>Computer Science for Software Engineers</h4>
<p>Yes, I checked, this book does not exist (though maybe <a href="https://www.amazon.com/A-Programmers-Guide-to-Computer-Science-2-book-series/dp/B08433QR53" target="_blank">this</a> is the same thing). I don't have any formal software education; everything I know was either self-taught or learned on the job. But it's way easier to learn software engineering that way than computer science. And I bet there's a lot of other engineers in the same boat. </p>
<p>This book wouldn't have to be comprehensive or instructive: just enough about each topic to understand why it's an area of study and appreciate how research in it eventually finds its way into practice. </p>
<h4>MISU Patterns</h4>
<p>MISU, or "Make Illegal States Unrepresentable", is the idea of designing system invariants in the structure of your data. For example, if a <code>Contact</code> needs at least one of <code>email</code> or <code>phone</code> to be non-null, make it a sum type over <code>EmailContact, PhoneContact, EmailPhoneContact</code> (from <a href="https://fsharpforfunandprofit.com/posts/designing-with-types-making-illegal-states-unrepresentable/" target="_blank">this post</a>). MISU is great.</p>
<p>Most MISU in the wild look very different than that, though, because the concept of MISU is so broad there's lots of different ways to achieve it. And that means there are "patterns": smart constructors, product types, properly using sets, <a href="https://lexi-lambda.github.io/blog/2020/11/01/names-are-not-type-safety/" target="_blank">newtypes to some degree</a>, etc. Some of them are specific to typed FP, while others can be used in even untyped languages. Someone oughta make a pattern book.</p>
<p>My one request would be to not give them cutesy names. Do something like the <a href="https://ia600301.us.archive.org/18/items/Thompson2016MotifIndex/Thompson_2016_Motif-Index.pdf" target="_blank">Aarne–Thompson–Uther Index</a>, where items are given names like "Recognition by manner of throwing cakes of different weights into faces of old uncles". Names can come later.</p>
<h4>The Tools of '25</h4>
<p>Not something I'd read, but something to recommend to junior engineers. Starting out it's easy to think the only bit that matters is the language or framework and not realize the enormous amount of surrounding tooling you'll have to learn. This book would cover the basics of tools that <em>enough</em> developers will probably use at some point: git, VSCode, <em>very</em> basic Unix and bash, curl. Maybe the general concepts of tools that appear in every ecosystem, like package managers, build tools, task runners. That might be easier if we specialize this to one particular domain, like webdev or data science.</p>
<p>Ideally the book would only have to be updated every five years or so. No LLM stuff because I don't expect the tooling will be stable through 2026, to say nothing of 2030.</p>
<h4>A History of Obsolete Optimizations</h4>
<p>Probably better as a really long blog series. Each chapter would be broken up into two parts:</p>
<ol>
<li>A deep dive into a brilliant, elegant, insightful historical optimization designed to work within the constraints of that era's computing technology</li>
<li>What we started doing instead, once we had more compute/network/storage available.</li>
</ol>
<p>c.f. <a href="https://prog21.dadgum.com/29.html" target="_blank">A Spellchecker Used to Be a Major Feat of Software Engineering</a>. Bonus topics would be brilliance obsoleted by standardization (like what people did before git and json were universal), optimizations we do today that may not stand the test of time, and optimizations from the past that <em>did</em>.</p>
<h4>Sphinx Internals</h4>
<p><em>I need this</em>. I've spent so much goddamn time digging around in Sphinx and docutils source code I'm gonna throw up.</p>
<hr/>
<h3>Systems Distributed Talk Today!</h3>
<p>Online premier's at noon central / 5 PM UTC, <a href="https://www.youtube.com/watch?v=d9cM8f_qSLQ" target="_blank">here</a>! I'll be hanging out to answer questions and be awkward. You ever watch a recording of your own talk? It's real uncomfortable!</p>
<div class="footnote">
<hr/>
<ol>
<li id="fn:volcano">
<p>In <em>this</em> case because it's a field on one of <code>Volcano</code>'s supertypes. I guess schemas gotta follow LSP too <a class="footnote-backref" href="#fnref:volcano" title="Jump back to footnote 1 in the text">↩</a></p>
</li>
</ol>
</div>
