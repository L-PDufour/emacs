<h3>Jsx in Qooxdoo: What it can do and how to utilize it (and why you shouldn’t bother)</h3><p>Edited to add: seriously don’t bother. I had to use this god-awful framework at a company I previously worked at, and contributing to the project was part of our responsibilities. Don’t use Qooxdoo. It’s a dreadful paradigm, refuses to integrate with just about anything, and insists on a broken proprietary package registry for sharing components. It’s written, and you’re forced to write it, as if ES6 and beyond never happened. This Jsx stuff I made takes incredible effort to get even a clunky reactive system set up in, though it’s still arguably better than the unsafe, opaque, and impossible-to-debug reactivity in Qooxdoo’s main UI system, even after the version 8 update (if it ever gets released).</p><p>It is truly the worst piece of software I have had the misfortune to use, and I warn you, dear reader, never to use it yourself. Take my advice, learn and use <a href="https://svelte.dev/">SvelteKit</a>; it’s a modern framework designed around solving real problems faced in modern webapps, and has a legion of world-class developers improving it every day.</p><p>If you are foolish enough to touch this mess with a barge pole, here’s the original unedited article. I hope you’ve been praying, because only god can help you now.</p><figure><img alt="A code snippet containing a feature-diverse Jsx expression" src="https://cdn-images-1.medium.com/max/1024/1*Mb08RGfORD7HNBUqfKNK8g.png" /></figure><p>Jsx is a widely used syntax for expressing complex DOM manipulation as regular HTML within a JavaScript file. It’s typically used as a more declarative way of defining user interfaces, such as in React, and provides a high level of abstraction over the underlying DOM manipulation that the framework is doing behind the scenes.</p><p>Qooxdoo has supported Jsx <a href="https://github.com/qooxdoo/qooxdoo/commit/83c540a">since 2021</a> but has been largely forgotten with few users putting the feature to use. After more than two years of obscurity, Jsx in Qooxdoo is seeing a strong step forwards, taking inspiration from a wide range of Jsx-like frameworks to enhance and support Qooxdoo applications.</p><h3>How do Jsx and Qooxdoo connect?</h3><p>Qooxdoo Desktop is a system for building user interfaces and SPAs without using HTML or CSS — Jsx on the other hand almost <em>is</em> HTML.</p><p>The connection between Jsx and Qooxdoo is in their differing abilities. While a desktop application can be built in Qooxdoo with relative ease, it’s no simple task to serialize widgets between the client and server. Serializing Jsx on the other hand is quite straightforward as it transpiles down to calls to qx.html.Jsx.createElement, which uses the low-level qx.html.* classes to construct a VDOM tree. This completely steps over the layout system of Qooxdoo desktop, which introduces a need for CSS. There aren&#39;t (yet) any prebuilt Jsx components or user interactive structures. Instead, the simplified featureset and disconnect from Qoodxoo&#39;s Widget makes it ideal for displaying large data structures or generating printable data reports.</p><p>With a little effort, the existing serialization system (qx.html.Node.serialize and qx.html.Node.useNode) can be applied to server side rendering and client side hydration, making the lightweight, low-level control of Jsx increasingly valuable to both the developer and the user.</p><h3>QxJsx: What we’ve changed in Qooxdoo’s Jsx</h3><p>All the typical Jsx features found in most, if not all, Jsx implementations are still included. There are also several features inspired by a range of other tools and frameworks.</p><h4><strong>Custom Elements</strong></h4><p>Custom Elements are the backbone of Jsx’s abilities and provide a way to define html structures for replication and reuse. They must either have a PascalCase name, or be accessed via dot.notation when used in place of a tag name.</p><pre>/**<br> * @param {object} attrs<br> * @param {string} attrs.who<br> */<br>const MyCustomElem = ({ who = &quot;nobody :(&quot; }) =&gt; {<br>  return &lt;p&gt;Hello, {who}&lt;/p&gt;;<br>};<br>const world = &lt;MyCustomElem who=&quot;world&quot; /&gt;;</pre><h4><strong>Spread attributes</strong></h4><p>Spread attributes allow an object’s keys and values to be passed to an element as attributes. This syntax can be mixed with regular attribute syntax in any way, and items towards the end take precedence over those at the start.</p><pre>const attrs = {<br>  id: &quot;my-id&quot;,<br>  class: &quot;my-class&quot;,<br>  style: &quot;color: red;&quot;<br>};<br>const attrs2 = {<br>  &quot;data-my-thing&quot;: &quot;value&quot;<br>};<br><br>const spreadAttribute = (<br>  &lt;h1 id=&quot;overriden&quot; {...attrs} class=&quot;override&quot; {...attrs2}&gt;<br>    Lorem ipsum<br>  &lt;/h1&gt;<br>);</pre><h4><strong>Fragments</strong></h4><p>Functionally, fragments are almost the same as arrays of qx.html.Node. They provide a way to group several nodes together under one Jsx expression.</p><pre>const myFragment = (<br>  &lt;&gt;<br>    &lt;h1&gt;Hello&lt;/h1&gt;<br>    &lt;h2&gt;World&lt;/h2&gt;<br>  &lt;/&gt;<br>);</pre><h4><strong>Event Handlers</strong></h4><p>Events in QxJsx use the native html element events, and are different to Qooxdoo’s events system. Events can be added inline by passing functions to the relevant attribute such as onClick.</p><pre>const elem = &lt;button onClick={() =&gt; console.log(&quot;clicked&quot;)}&gt;Click me&lt;/button&gt;;</pre><h4><strong>Slots</strong></h4><p>Slots provide a mechanism for injecting arbitrary child content into one or more points in a custom element, allowing for default content and dynamic replacement at runtime.</p><pre>/**<br> * @param {object} attrs<br> * @param {string} attrs.who<br> *<br> * @slot default - the heading. Defaults to an h1 displaying &quot;Hello, {who}&quot;<br> * @slot name=&quot;subheading&quot; - a subheading<br> */<br>const MyCustomElem = ({ who = &quot;nobody :(&quot; }) =&gt; {<br>  return (<br>    &lt;header&gt;<br>      &lt;slot&gt;<br>        &lt;h1&gt;Hello, {who}&lt;/h1&gt;<br>      &lt;/slot&gt;<br>      &lt;slot name=&quot;subheading&quot; /&gt;<br>    &lt;/header&gt;<br>  );<br>};<br><br>// default heading, no subheading<br>const usage1 = &lt;MyCustomElem /&gt;;<br><br>// custom heading, custom subheading<br>const usage2 = (<br>  &lt;MyCustomElem&gt;<br>    &lt;h1&gt;Custom heading&lt;/h1&gt;<br>    &lt;h2 slot=&quot;subheading&quot;&gt;Custom subheading&lt;/h2&gt;<br>  &lt;/MyCustomElem&gt;<br>);</pre><h4><strong>CSS Variable Injection</strong></h4><p>Styling the DOM directly is a necessity when working with HTML via Jsx. In cases where the element which needs to be styled is deeper inside a hierarchy of custom elements, this can become difficult and often leads to reduced code quality and readability.</p><p>A custom element might benefit from providing a small API of CSS variables it will respond to for different purposes. This allows your page-wide CSS to define some defaults, while users of the custom element can override the values as needed. This abstraction also gives custom element authors control over how their component will be styled.</p><p>To inject a CSS variable, simply pass an attribute with the same name, replacing the leading double dash -- with double underscore __. To add a CSS variable to a custom element, simply use it either inline or in an external stylesheet.</p><pre>/**<br> * @css {Color} [my-custom-property=blue] the color applied to the text<br> *<br> * @slot default - paragraph content<br> */<br>const SomeText = () =&gt; (<br>  &lt;p style=&quot;color: var(--my-custom-property, blue);&quot;&gt;<br>    &lt;slot /&gt;<br>  &lt;/p&gt;<br>);<br><br>const myElem = &lt;SomeText __my-custom-property=&quot;red&quot;&gt;I am red!&lt;/SomeText&gt;;</pre><p>Jsx has plenty more to offer. While this recent enhancement provides many great additions such as custom elements and improved serialization and hydration, there is still room for more. There isn’t currently an automatic SSR/Hydration solution, and custom elements could benefit from a range of things such as builtin “magic” elements or easier ways of accessing static members.</p><p>For more information on Server Side Rendering, or to simply see an example of QxJsx in action, read the <a href="https://qooxdoo.org/documentation/v7.6/#/development/Jsx">Jsx documentation</a>.</p><p>The enhancements discussed here were added in <a href="https://github.com/qooxdoo/qooxdoo/pull/10637">#10637</a></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=e4273bfee211" width="1" height="1" alt=""><hr><p><a href="https://news.qooxdoo.org/jsx-in-qooxdoo-what-it-can-do-and-how-to-utilize-it-e4273bfee211">Jsx in Qooxdoo: What it can do and how to utilize it</a> was originally published in <a href="https://news.qooxdoo.org">Qooxdoo News</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>