<p>Cursory lets users define preset configurations for the cursor. Those
cover the style of the cursor (e.g. box or bar), whether it is
blinking or not, and how fast, as well as the colour it uses. Having
distinct presets makes it easy to switch between, say, a “reading
mode” with an ambient cursor and a “presentation mode” with a cursor
that is more noticeable and thus easier to spot.</p>

<ul>
  <li>Package name (GNU ELPA): <code class="language-plaintext highlighter-rouge">cursory</code></li>
  <li>Official manual: <a href="https://protesilaos.com/emacs/cursory">https://protesilaos.com/emacs/cursory</a></li>
  <li>Change log: <a href="https://protesilaos.com/emacs/cursory-changelog">https://protesilaos.com/emacs/cursory-changelog</a></li>
  <li>Git repositories:
    <ul>
      <li>GitHub: <a href="https://github.com/protesilaos/cursory">https://github.com/protesilaos/cursory</a></li>
      <li>GitLab: <a href="https://gitlab.com/protesilaos/cursory">https://gitlab.com/protesilaos/cursory</a></li>
    </ul>
  </li>
  <li>Backronym: Cursor Usability Requires Styles Objectively Rated Yearlong.</li>
</ul>

<p>Below are the release notes.</p>

<hr />

<h2>Version 1.2.0 on 2025-07-22</h2>

<p>This version contains small additions to a stable package.</p>

<h3>Set the last preset when starting up Emacs</h3>

<p>The new function <code class="language-plaintext highlighter-rouge">cursory-set-last-or-fallback</code> makes it easier to set
the last known preset when starting Emacs or via a hook such as <code class="language-plaintext highlighter-rouge">after-init-hook</code>.
Internally, it takes care to fall back to a set of default values that
always work.</p>

<p>Before the introduction of <code class="language-plaintext highlighter-rouge">cursory-set-last-or-fallback</code> users had to
do something like this:</p>

<div class="language-elisp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">;; Old way of setting a preset:</span>
<span class="p">(</span><span class="nv">cursory-set-preset</span> <span class="p">(</span><span class="nb">or</span> <span class="nv">cursory-last-selected-preset</span> <span class="nv">cursory-recovered-preset</span> <span class="ss">'box</span><span class="p">))</span>

<span class="c1">;; Old way of doing the above via a hook:</span>
<span class="p">(</span><span class="nv">add-hook</span> <span class="ss">'after-init-hook</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">()</span> <span class="p">(</span><span class="nv">cursory-set-preset</span> <span class="p">(</span><span class="nb">or</span> <span class="nv">cursory-last-selected-preset</span> <span class="nv">cursory-recovered-preset</span> <span class="ss">'box</span><span class="p">))))</span>
</code></pre></div></div>

<p>Those would also fail if the named preset did not exist (<code class="language-plaintext highlighter-rouge">box</code> in the
above example). Whereas the addition of a fallback preset guarantees a
result that works.</p>

<p>Note that I am defining the <code class="language-plaintext highlighter-rouge">cursory-fallback-preset</code> using <code class="language-plaintext highlighter-rouge">defconst</code>
instead of exposing it as a user option. This is to avoid a scenario
where the values are accidentally set incorrectly.</p>

<h3>Presets can define a <code class="language-plaintext highlighter-rouge">:cursor-color</code></h3>

<p>This is a new attribute which corresponds to the background value of
the <code class="language-plaintext highlighter-rouge">cursor</code> face.</p>

<ul>
  <li>
    <p>When the value is nil or <code class="language-plaintext highlighter-rouge">unspecified</code> (the default), Cursory does
not modify the <code class="language-plaintext highlighter-rouge">cursor</code> face.</p>
  </li>
  <li>
    <p>When the value is a hexadecimal RGB color value, like <code class="language-plaintext highlighter-rouge">#123456</code> it
is used as-is. Same if it is a named color among those produced by
the command <code class="language-plaintext highlighter-rouge">list-colors-display</code>.</p>
  </li>
  <li>
    <p>When the value is the symbol of a face (unquoted), then the
foreground of that face is used for the <code class="language-plaintext highlighter-rouge">cursor</code> face, falling back
to <code class="language-plaintext highlighter-rouge">default</code>.</p>
  </li>
</ul>

<p>Concretely, users can have something like this in their configuration:</p>

<div class="language-elisp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">setq</span> <span class="nv">cursory-presets</span>
      <span class="o">'</span><span class="p">((</span><span class="nv">box</span>
         <span class="ss">:cursor-color</span> <span class="s">"#21439f"</span>
         <span class="ss">:blink-cursor-interval</span> <span class="mf">1.2</span><span class="p">)</span>
        <span class="p">(</span><span class="nv">baring</span>
         <span class="ss">:cursor-type</span> <span class="p">(</span><span class="nv">bar</span> <span class="o">.</span> <span class="mi">2</span><span class="p">)</span>
         <span class="ss">:cursor-color</span> <span class="nb">error</span> <span class="c1">; the `error' face will typically be red (see `list-faces-display')</span>
         <span class="ss">:blink-cursor-interval</span> <span class="mf">0.8</span><span class="p">)</span>
        <span class="p">(</span><span class="nv">underscore</span>
         <span class="ss">:cursor-color</span> <span class="s">"green"</span> <span class="c1">; see `list-colors-display'</span>
         <span class="ss">:cursor-type</span> <span class="p">(</span><span class="nv">hbar</span> <span class="o">.</span> <span class="mi">1</span><span class="p">)</span>
         <span class="ss">:blink-cursor-interval</span> <span class="mf">0.3</span>
         <span class="ss">:blink-cursor-blinks</span> <span class="mi">50</span><span class="p">)</span>
        <span class="p">(</span><span class="no">t</span> <span class="c1">; the default values</span>
         <span class="ss">:cursor-color</span> <span class="nv">unspecified</span> <span class="c1">; use the theme's original</span>
         <span class="ss">:cursor-type</span> <span class="nv">box</span>
         <span class="ss">:cursor-in-non-selected-windows</span> <span class="nv">hollow</span>
         <span class="ss">:blink-cursor-mode</span> <span class="mi">1</span>
         <span class="ss">:blink-cursor-blinks</span> <span class="mi">10</span>
         <span class="ss">:blink-cursor-interval</span> <span class="mf">0.2</span>
         <span class="ss">:blink-cursor-delay</span> <span class="mf">0.2</span><span class="p">)))</span>
</code></pre></div></div>

<p>Remember to read the documentation of <code class="language-plaintext highlighter-rouge">cursory-presets</code> for all the rest.</p>

<h3>The <code class="language-plaintext highlighter-rouge">cursory-mode</code> persists the <code class="language-plaintext highlighter-rouge">:cursor-color</code> while changing themes</h3>

<p>Before, the <code class="language-plaintext highlighter-rouge">cursory-mode</code> would only take care to save the last
selected preset and to persist it across Emacs sessions. In addition
to that, it now also ensures that loading a new theme does not
override the <code class="language-plaintext highlighter-rouge">:cursor-color</code>.</p>

<h3>The <code class="language-plaintext highlighter-rouge">cursory-set-preset</code> prompt is smarter about its default value</h3>

<p>When the <code class="language-plaintext highlighter-rouge">cursory-set-preset</code> is called interactively, it uses the
minibuffer to prompt for a preset among the <code class="language-plaintext highlighter-rouge">cursory-presets</code>.</p>

<p>In the past, its default value would simply be the last selected
preset. Cursory would not check whether that symbol was still a member
of the <code class="language-plaintext highlighter-rouge">cursory-presets</code>. This had the potential to set the wrong
configurations.</p>

<p>Now the prompt only uses as its default value the last selected and
existing preset among those found in the history of selections. It
will not provide a default if it cannot find any.</p>

<p>Note that the “default value” in the context of the minibuffer refers
to the input that will normally be provided if the user types <code class="language-plaintext highlighter-rouge">RET</code>
without writing anything into the minibuffer.</p>