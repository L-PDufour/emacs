
<p>(<a href="https://buttondown.com/hillelwayne/archive/sapir-whorf-does-not-apply-to-programming/" target="_blank">Last week's newsletter</a> took too long and I'm way behind on <a href="https://leanpub.com/logic/" target="_blank">Logic for Programmers</a> revisions so short one this time.<sup id="fnref:retread"><a class="footnote-ref" href="#fn:retread">1</a></sup>)</p>
<p>In classical logic, two operators <code>F/G</code> are <strong>duals</strong> if <code>F(x) = !G(!x)</code>. Three examples:</p>
<ol>
<li><code>x || y</code> is the same as <code>!(!x &amp;&amp; !y)</code>.</li>
<li><code>&lt;&gt;P</code> ("P is possibly true") is the same as <code>![]!P</code> ("not P isn't definitely true").</li>
<li><code>some x in set: P(x)</code> is the same as <code>!(all x in set: !P(x))</code>.</li>
</ol>
<p>(1) is just a version of De Morgan's Law, which we regularly use to simplify boolean expressions. (2) is important in modal logic but has niche applications in software engineering, mostly in how it powers various formal methods.<sup id="fnref:fm"><a class="footnote-ref" href="#fn:fm">2</a></sup> The real interesting one is (3), the "quantifier duals". We use lots of software tools to either <em>find</em> a value satisfying <code>P</code> or <em>check</em> that all values satisfy <code>P</code>. And by duality, any tool that does one can do the other, by seeing if it <em>fails</em> to find/check <code>!P</code>. Some examples in the wild:</p>
<ul>
<li>Z3 is used to solve mathematical constraints, like "find x, where <code>f(x) &gt;= 0</code>. If I want to prove a property like "f is always positive", I ask z3 to solve "find x, where <code>!(f(x) &gt;= 0)</code>, and see if that is unsatisfiable. This use case powers a LOT of theorem provers and formal verification tooling.</li>
<li>Property testing checks that all inputs to a code block satisfy a property. I've used it to generate complex inputs with certain properties by checking that all inputs <em>don't</em> satisfy the property and reading out the test failure.</li>
<li>Model checkers check that all behaviors of a specification satisfy a property, so we can find a behavior that reaches a goal state G by checking that all states are <code>!G</code>. <a href="https://github.com/tlaplus/Examples/blob/master/specifications/DieHard/DieHard.tla" target="_blank">Here's TLA+ solving a puzzle this way</a>.<sup id="fnref:antithesis"><a class="footnote-ref" href="#fn:antithesis">3</a></sup></li>
<li>Planners find behaviors that reach a goal state, so we can check if all behaviors satisfy a property P by asking it to reach goal state <code>!P</code>.</li>
<li>The problem "find the shortest <a href="https://en.wikipedia.org/wiki/Travelling_salesman_problem" target="_blank">traveling salesman route</a>" can be broken into <code>some route: distance(route) = n</code> and <code>all route: !(distance(route) &lt; n)</code>. Then a route finder can find the first, and then convert the second into a <code>some</code> and <em>fail</em> to find it, proving <code>n</code> is optimal.</li>
</ul>
<p>Even cooler to me is when a tool does <em>both</em> finding and checking, but gives them different "meanings". In SQL, <code>some x: P(x)</code> is true if we can <em>query</em> for <code>P(x)</code> and get a nonempty response, while <code>all x: P(x)</code> is true if all records satisfy the <code>P(x)</code> <em>constraint</em>. Most SQL databases allow for complex queries but not complex constraints! You got <code>UNIQUE</code>, <code>NOT NULL</code>, <code>REFERENCES</code>, which are fixed predicates, and <code>CHECK</code>, which is one-record only.<sup id="fnref:check"><a class="footnote-ref" href="#fn:check">4</a></sup></p>
<p>Oh, and you got database triggers, which can run arbitrary queries and throw exceptions. So if you really need to enforce a complex constraint <code>P(x, y, z)</code>, you put in a database trigger that queries <code>some x, y, z: !P(x, y, z)</code> and throws an exception if it finds any results. That all works because of quantifier duality! See <a href="https://eddmann.com/posts/maintaining-invariant-constraints-in-postgresql-using-trigger-functions/" target="_blank">here</a> for an example of this in practice.</p>
<h3>Duals more broadly</h3>
<p>"Dual" doesn't have a strict meaning in math, it's more of a vibe thing where all of the "duals" are kinda similar in meaning but don't strictly follow all of the same rules. <em>Usually</em> things X and Y are duals if there is some transform <code>F</code> where <code>X = F(Y)</code> and <code>Y = F(X)</code>, but not always. Maybe the category theorists have a formal definition that covers all of the different uses. Usually duals switch properties of things, too: an example showing <code>some x: P(x)</code> becomes a <em>counterexample</em> of <code>all x: !P(x)</code>.</p>
<p>Under this definition, I think the dual of a list <code>l</code> could be <code>reverse(l)</code>. The first element of <code>l</code> becomes the last element of <code>reverse(l)</code>, the last becomes the first, etc. A more interesting case is the dual of a <code>K -&gt; set(V)</code> map is the <code>V -&gt; set(K)</code> map. IE the dual of <code>lived_in_city = {alice: {paris}, bob: {detroit}, charlie: {detroit, paris}}</code> is <code>city_lived_in_by = {paris: {alice, charlie}, detroit: {bob, charlie}}</code>. This preserves the property that <code>x in map[y] &lt;=&gt; y in dual[x]</code>.</p>
<p class="empty-line" style="height:16px; margin:0px !important;"></p>
<div class="footnote">
<hr/>
<ol>
<li id="fn:retread">
<p>And after writing this I just realized this is partial retread of a newsletter I wrote <a href="https://buttondown.com/hillelwayne/archive/logical-quantifiers-in-software/" target="_blank">a couple months ago</a>. But only a <em>partial</em> retread! <a class="footnote-backref" href="#fnref:retread" title="Jump back to footnote 1 in the text">↩</a></p>
</li>
<li id="fn:fm">
<p>Specifically "linear temporal logics" are modal logics, so "<code>eventually P</code> ("P is true in at least one state of each behavior") is the same as saying <code>!always !P</code> ("not P isn't true in all states of all behaviors"). This is the basis of <a href="https://www.hillelwayne.com/post/safety-and-liveness/" target="_blank">liveness checking</a>. <a class="footnote-backref" href="#fnref:fm" title="Jump back to footnote 2 in the text">↩</a></p>
</li>
<li id="fn:antithesis">
<p>I don't know for sure, but my best guess is that Antithesis does something similar <a href="https://antithesis.com/blog/tag/games/" target="_blank">when their fuzzer beats videogames</a>. They're doing fuzzing, not model checking, but they have the same purpose check that complex state spaces don't have bugs. Making the bug "we can't reach the end screen" can make a fuzzer output a complete end-to-end run of the game. Obvs a lot more complicated than that but that's the general idea at least. <a class="footnote-backref" href="#fnref:antithesis" title="Jump back to footnote 3 in the text">↩</a></p>
</li>
<li id="fn:check">
<p>For <code>CHECK</code> to constraint multiple records you would need to use a subquery. Core SQL does not support subqueries in check. It is an optional database "feature outside of core SQL" (F671), which <a href="https://www.postgresql.org/docs/current/unsupported-features-sql-standard.html" target="_blank">Postgres does not support</a>. <a class="footnote-backref" href="#fnref:check" title="Jump back to footnote 4 in the text">↩</a></p>
</li>
</ol>
</div>
