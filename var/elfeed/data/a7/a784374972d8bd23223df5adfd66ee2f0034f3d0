
<p>I realize that for all I've talked about <a href="https://leanpub.com/logic/" target="_blank">Logic for Programmers</a> in this newsletter, I never once explained basic logical quantifiers. They're both simple and incredibly useful, so let's do that this week! </p>
<h3>Sets and quantifiers</h3>
<p>A <strong>set</strong> is a collection of unordered, unique elements. <code>{1, 2, 3, …}</code> is a set, as are "every programming language", "every programming language's Wikipedia page", and "every function ever defined in any programming language's standard library". You can put whatever you want in a set, with some very specific limitations to avoid certain paradoxes.<sup id="fnref:paradox"><a class="footnote-ref" href="#fn:paradox">2</a></sup> </p>
<p>Once we have a set, we can ask "is something true for all elements of the set" and "is something true for at least one element of the set?" IE, is it true that every programming language has a <code>set</code> collection type in the core language? We would write it like this:</p>
<div class="codehilite"><pre><span></span><code># all of them
all l in ProgrammingLanguages: HasSetType(l)

# at least one
some l in ProgrammingLanguages: HasSetType(l)
</code></pre></div>
<p>This is the notation I use in the book because it's easy to read, type, and search for. Mathematicians historically had a few different formats; the one I grew up with was <code>∀x ∈ set: P(x)</code> to mean <code>all x in set</code>, and <code>∃</code> to mean <code>some</code>. I use these when writing for just myself, but find them confusing to programmers when communicating.</p>
<p>"All" and "some" are respectively referred to as "universal" and "existential" quantifiers.</p>
<h3>Some cool properties</h3>
<p>We can simplify expressions with quantifiers, in the same way that we can simplify <code>!(x &amp;&amp; y)</code> to <code>!x || !y</code>.</p>
<p>First of all, quantifiers are commutative with themselves. <code>some x: some y: P(x,y)</code> is the same as <code>some y: some x: P(x, y)</code>. For this reason we can write <code>some x, y: P(x,y)</code> as shorthand. We can even do this when quantifying over different sets, writing <code>some x, x' in X, y in Y</code> instead of <code>some x, x' in X: some y in Y</code>. We can <em>not</em> do this with "alternating quantifiers":</p>
<ul>
<li><code>all p in Person: some m in Person: Mother(m, p)</code> says that every person has a mother.</li>
<li><code>some m in Person: all p in Person: Mother(m, p)</code> says that someone is every person's mother.</li>
</ul>
<p>Second, existentials distribute over <code>||</code> while universals distribute over <code>&amp;&amp;</code>. "There is some url which returns a 403 or 404" is the same as "there is some url which returns a 403 or some url that returns a 404", and "all PRs pass the linter and the test suites" is the same as "all PRs pass the linter and all PRs pass the test suites".</p>
<p>Finally, <code>some</code> and <code>all</code> are <em>duals</em>: <code>some x: P(x) == !(all x: !P(x))</code>, and vice-versa. Intuitively: if some file is malicious, it's not true that all files are benign.</p>
<p>All these rules together mean we can manipulate quantifiers <em>almost</em> as easily as we can manipulate regular booleans, putting them in whatever form is easiest to use in programming. </p>
<p>Speaking of which, how <em>do</em> we use this in in programming?</p>
<h2>How we use this in programming</h2>
<p>First of all, people clearly have a need for directly using quantifiers in code. If we have something of the form:</p>
<div class="codehilite"><pre><span></span><code>for x in list:
    if P(x):
        return true
return false
</code></pre></div>
<p>That's just <code>some x in list: P(x)</code>. And this is a prevalent pattern, as you can see by using <a href="https://github.com/search?q=%2Ffor+.*%3A%5Cn%5Cs*if+.*%3A%5Cn%5Cs*return+%28False%7CTrue%29%5Cn%5Cs*return+%28True%7CFalse%29%2F+language%3Apython+NOT+is%3Afork&amp;type=code" target="_blank">GitHub code search</a>. It finds over 500k examples of this pattern in Python alone! That can be simplified via using the language's built-in quantifiers: the Python would be <code>any(P(x) for x in list)</code>.</p>
<p>(Note this is not quantifying over sets but iterables. But the idea translates cleanly enough.)</p>
<p>More generally, quantifiers are a key way we express higher-level properties of software. What does it mean for a list to be sorted in ascending order? That <code>all i, j in 0..&lt;len(l): if i &lt; j then l[i] &lt;= l[j]</code>. When should a <a href="https://qntm.org/ratchet" target="_blank">ratchet test fail</a>? When <code>some f in functions - exceptions: Uses(f, bad_function)</code>. Should the image classifier work upside down? <code>all i in images: classify(i) == classify(rotate(i, 180))</code>. These are the properties we verify with tests and types and <a href="https://www.hillelwayne.com/post/constructive/" target="_blank">MISU</a> and whatnot;<sup id="fnref:misu"><a class="footnote-ref" href="#fn:misu">1</a></sup> it helps to be able to make them explicit!</p>
<p>One cool use case that'll be in the book's next version: database invariants are universal statements over the set of all records, like <code>all a in accounts: a.balance &gt; 0</code>. That's enforceable with a <a href="https://sqlite.org/lang_createtable.html#check_constraints" target="_blank">CHECK</a> constraint. But what about something like <code>all i, i' in intervals: NoOverlap(i, i')</code>? That isn't covered by CHECK, since it spans two rows.</p>
<p>Quantifier duality to the rescue! The invariant is equivalent to <code>!(some i, i' in intervals: Overlap(i, i'))</code>, so is preserved if the <em>query</em> <code>SELECT COUNT(*) FROM intervals CROSS JOIN intervals …</code> returns 0 rows. This means we can test it via a <a href="https://sqlite.org/lang_createtrigger.html" target="_blank">database trigger</a>.<sup id="fnref:efficiency"><a class="footnote-ref" href="#fn:efficiency">3</a></sup></p>
<hr/>
<p>There are a lot more use cases for quantifiers, but this is enough to introduce the ideas! Next week's the one year anniversary of the book entering early access, so I'll be writing a bit about that experience and how the book changed. It's <em>crazy</em> how crude v0.1 was compared to the current version.</p>
<div class="footnote">
<hr/>
<ol>
<li id="fn:misu">
<p>MISU ("make illegal states unrepresentable") means using data representations that rule out invalid values. For example, if you have a <code>location -&gt; Optional(item)</code> lookup and want to make sure that each item is in exactly one location, consider instead changing the map to <code>item -&gt; location</code>. This is a means of <em>implementing</em> the property <code>all i in item, l, l' in location: if ItemIn(i, l) &amp;&amp; l != l' then !ItemIn(i, l')</code>. <a class="footnote-backref" href="#fnref:misu" title="Jump back to footnote 1 in the text">↩</a></p>
</li>
<li id="fn:paradox">
<p>Specifically, a set can't be an element of itself, which rules out constructing things like "the set of all sets" or "the set of sets that don't contain themselves". <a class="footnote-backref" href="#fnref:paradox" title="Jump back to footnote 2 in the text">↩</a></p>
</li>
<li id="fn:efficiency">
<p>Though note that when you're inserting or updating an interval, you already <em>have</em> that row's fields in the trigger's <code>NEW</code> keyword. So you can just query <code>!(some i in intervals: Overlap(new, i'))</code>, which is more efficient. <a class="footnote-backref" href="#fnref:efficiency" title="Jump back to footnote 3 in the text">↩</a></p>
</li>
</ol>
</div>
