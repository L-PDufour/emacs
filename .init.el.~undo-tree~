(undo-tree-save-format-version . 1)
"650f6256d081db79f7e28a8709e75ed8953a2ebf"
[nil nil nil nil (26587 17210 141177 920000) 0 nil]
([nil nil ((7020 . 7020) (7020 . 7022) (t 26586 45797 635926 661000)) nil (26587 17210 141177 389000) 0 nil])
([nil nil (("k" . -7020) ("k" . -7021) 7022) nil (26587 17210 141177 89000) 0 nil])
([nil nil ((6968 . 6969) ("   " . 6968) (6948 . 6949) (6969 . 6970) (6947 . 6948)) nil (26587 17210 141176 778000) 0 nil])
([nil nil (("	" . -6968) (6968 . 6969) ("	" . 6968) (6966 . 6968) ("d" . -6947) ("d" . -6948) 6949) nil (26587 17210 141176 317000) 0 nil])
([nil nil (("  " . -6948) ("(use-package jsdoc" . 6947)) nil (26587 17210 141175 866000) 0 nil])
([nil nil (("
" . 6947)) nil (26587 17210 141175 636000) 0 nil])
([nil nil ((":straight (:host github :repo \"isamert/jsdoc.el\"))" . 6947)) nil (26587 17210 141175 476000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6978 . 6979) (nil fontified nil 6949 . 6979) (6949 . 6979) (t 26587 10566 563635 15000)) nil (26587 17210 141175 255000) 0 nil])
([nil nil ((nil rear-nonsticky nil 7362 . 7363) (nil fontified nil 6980 . 7363) (6980 . 7363)) nil (26587 17210 141174 945000) 0 nil])
([nil nil (("(use-package tide
  :ensure t)
(defun setup-tide-js-mode ()
  (interactive)
  (tide-setup)
  (flycheck-mode +1)
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1)
  (company-mode +1))

;; Configure javascript-mode to use tide
(add-hook 'js-mode-hook #'setup-tide-js-mode)

;; If you use js2-mode instead
(add-hook 'js2-mode-hook #'setup-tide-js-mode)" . 6949) (undo-tree-id50 . -414) (undo-tree-id51 . -414) (undo-tree-id52 . -414) (t 26587 10576 34593 280000)) nil (26587 17210 141174 634000) 0 nil])
([nil nil ((6949 . 6949) (6949 . 6951)) nil (26587 17210 141173 91000) 0 nil])
([nil nil (("d" . -6949) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) ("d" . -6950) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) 6951) nil (26587 17210 141172 761000) 0 nil])
([nil nil ((";; Using straight" . 6929)) nil (26587 17210 141170 236000) 0 nil])
([nil nil (("
" . 6929)) nil (26587 17210 141170 75000) 0 nil])
([nil nil (("
" . 6929)) nil (26587 17210 141169 825000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6948 . 6949) (nil fontified nil 6948 . 6949) (nil fontified nil 6947 . 6948) (nil fontified nil 6933 . 6947) (nil fontified nil 6930 . 6933) (nil fontified nil 6929 . 6930) (6929 . 6949) (t 26587 16980 193982 896000)) nil (26587 17210 141169 555000) 0 nil])
([nil nil (("
" . 6929) (undo-tree-id43 . -1) 6930) nil (26587 17210 141169 34000) 0 nil])
([nil nil ((nil rear-nonsticky nil 7952 . 7953) (nil fontified nil 6948 . 7953) (6948 . 7953)) nil (26587 17210 141168 402000) 0 nil])
([nil nil ((";; Using straight

;; Ensure use-package is installed
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))" . 6929) (undo-tree-id39 . -159) (undo-tree-id40 . -19) (undo-tree-id41 . -159) (undo-tree-id42 . -19)) nil (26587 17210 141167 962000) 0 nil])
([nil nil (("
" . -6928) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) 6929) nil (26587 17210 141166 609000) 0 nil])
([nil nil ((6930 . 6930) (6930 . 6932)) nil (26587 17210 141163 924000) 0 nil])
([nil nil (("f" . -6930) (undo-tree-id30 . -1) ("k" . -6931) (undo-tree-id31 . -1) 6932) nil (26587 17210 141163 523000) 0 nil])
([nil nil (("(require 'use-package)" . 6930)) nil (26587 17210 141161 760000) 0 nil])
([nil nil (("
" . 6930)) nil (26587 17210 141161 600000) 0 nil])
([nil nil (("
" . 6930)) nil (26587 17210 141161 419000) 0 nil])
([nil nil ((7771 . 7772) (t 26587 17114 130449 0)) nil (26587 17210 141161 239000) 0 nil])
([nil nil ((nil rear-nonsticky nil 8047 . 8048) (nil fontified nil 7771 . 8048) (7771 . 8048)) nil (26587 17210 141160 968000) 0 nil])
([nil nil ((8049 . 8050)) nil (26587 17210 141160 698000) 0 nil])
([nil nil ((nil rear-nonsticky nil 8096 . 8097) (nil fontified nil 8050 . 8097) (8050 . 8097)) nil (26587 17210 141160 437000) 0 nil])
([nil nil ((8097 . 8098)) nil (26587 17210 141160 77000) 0 nil])
([nil nil ((";" . -8097) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) 8098) nil (26587 17210 141159 335000) 0 nil])
([nil nil ((nil rear-nonsticky nil 7366 . 7367) (nil fontified nil 6957 . 7367) (6957 . 7367) (#("(use-package evil
  :ensure t
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)  ;; Important for evil-collection
  (setq evil-default-state 'emacs) ;; Use Emacs state as default
  :config
  ;; Make evil active in prog-mode and all modes derived from it
  (evil-set-initial-state 'prog-mode 'normal)
  (evil-mode 1))
" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 12 (face font-lock-keyword-face fontified t) 12 20 (fontified t) 20 27 (face font-lock-builtin-face fontified t) 27 32 (fontified t) 32 37 (face font-lock-builtin-face fontified t) 37 40 (fontified t) 40 41 (face (rainbow-delimiters-depth-2-face) fontified t) 41 45 (face font-lock-keyword-face fontified t) 45 69 (fontified t) 69 70 (face (rainbow-delimiters-depth-2-face) fontified t) 70 73 (fontified t) 73 74 (face (rainbow-delimiters-depth-2-face) fontified t) 74 78 (face font-lock-keyword-face fontified t) 78 103 (fontified t) 103 104 (face (rainbow-delimiters-depth-2-face) fontified t) 104 106 (fontified t) 106 109 (face font-lock-comment-delimiter-face fontified t) 109 139 (face font-lock-comment-face fontified t) 139 141 (fontified t) 141 142 (face (rainbow-delimiters-depth-2-face) fontified t) 142 146 (face font-lock-keyword-face fontified t) 146 172 (fontified t) 172 173 (face (rainbow-delimiters-depth-2-face) fontified t) 173 174 (fontified t) 174 177 (face font-lock-comment-delimiter-face fontified t) 177 204 (face font-lock-comment-face fontified t) 204 206 (fontified t) 206 213 (face font-lock-builtin-face fontified t) 213 216 (fontified t) 216 219 (face font-lock-comment-delimiter-face fontified t) 219 279 (face font-lock-comment-face fontified t) 279 281 (fontified t) 281 282 (face (rainbow-delimiters-depth-2-face) fontified t) 282 323 (fontified t) 323 324 (face (rainbow-delimiters-depth-2-face) fontified t) 324 327 (fontified t) 327 328 (face (rainbow-delimiters-depth-2-face) fontified t) 328 339 (fontified t) 339 340 (face (rainbow-delimiters-depth-2-face) fontified t) 340 341 (face (rainbow-delimiters-depth-1-face) fontified t) 341 342 (fontified t)) . 6957) (undo-tree-id0 . -342) (undo-tree-id1 . -341) (undo-tree-id2 . -341) (undo-tree-id3 . -341) (undo-tree-id4 . -341) (undo-tree-id5 . -341) (undo-tree-id6 . -340) (undo-tree-id7 . -227) (undo-tree-id8 . -213) (undo-tree-id9 . -146) (undo-tree-id10 . -76) (undo-tree-id11 . -32) (undo-tree-id12 . -18) (undo-tree-id13 . -342) (undo-tree-id14 . -341) (t 26587 17129 545387 177000)) nil (26587 17210 141069 518000) 0 nil])
([nil nil ((nil rear-nonsticky nil 8739 . 8740) (nil fontified nil 8117 . 8740) (8117 . 8740) (t 26587 17210 147062 846000)) nil (26587 17223 155826 369000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -8702) (#(" " 0 1 (fontified t)) . -8698) (#(" " 0 1 (fontified t)) . -8676) (#(" " 0 1 (fontified t)) . -8639) (#(" " 0 1 (fontified t)) . -8635) (#(" " 0 1 (fontified t)) . -8612) (#(" " 0 1 (fontified t)) . -8589) (#(" " 0 1 (fontified t)) . -8568) (#(" " 0 1 (fontified t)) . -8545) (#(" " 0 1 (fontified t)) . -8521) (#(" " 0 1 (fontified t)) . -8480) (#(" " 0 1 (fontified t)) . -8476) (#(" " 0 1 (fontified t)) . -8455) (#(" " 0 1 (fontified t)) . -8429) (#(" " 0 1 (fontified t)) . -8388) (#(" " 0 1 (fontified t)) . -8384) (#(" " 0 1 (fontified t)) . -8363) (#(" " 0 1 (fontified t)) . -8344) (#(" " 0 1 (fontified t)) . -8305) 8117) nil (26587 17231 165288 82000) 0 nil] [nil nil ((#(" " 0 1 (fontified t)) . -8702) (#(" " 0 1 (fontified t)) . -8698) (#(" " 0 1 (fontified t)) . -8676) (#(" " 0 1 (fontified t)) . -8639) (#(" " 0 1 (fontified t)) . -8635) (#(" " 0 1 (fontified t)) . -8612) (#(" " 0 1 (fontified t)) . -8589) (#(" " 0 1 (fontified t)) . -8568) (#(" " 0 1 (fontified t)) . -8545) (#(" " 0 1 (fontified t)) . -8521) (#(" " 0 1 (fontified t)) . -8480) (#(" " 0 1 (fontified t)) . -8476) (#(" " 0 1 (fontified t)) . -8455) (#(" " 0 1 (fontified t)) . -8429) (#(" " 0 1 (fontified t)) . -8388) (#(" " 0 1 (fontified t)) . -8384) (#(" " 0 1 (fontified t)) . -8363) (#(" " 0 1 (fontified t)) . -8344) (#(" " 0 1 (fontified t)) . -8305) 8117) ((8305 . 8306) (8344 . 8345) (8363 . 8364) (8384 . 8385) (8388 . 8389) (8429 . 8430) (8455 . 8456) (8476 . 8477) (8480 . 8481) (8521 . 8522) (8545 . 8546) (8568 . 8569) (8589 . 8590) (8612 . 8613) (8635 . 8636) (8639 . 8640) (8676 . 8677) (8698 . 8699) (8702 . 8703)) (26587 17223 155514 587000) 0 nil])
([nil nil ((8117 . 8118)) nil (26587 17301 546341 199000) 0 nil])
nil
([nil nil ((8664 . 8665) (#("   " 0 3 (fontified t)) . 8664) (8662 . 8663) (#("   " 0 3 (fontified t)) . 8662) (8642 . 8643) (#("   " 0 3 (fontified t)) . 8642) (8607 . 8608) (#("   " 0 3 (fontified t)) . 8607) (8605 . 8606) (#("   " 0 3 (fontified t)) . 8605) (8584 . 8585) (#("   " 0 3 (fontified t)) . 8584) (8563 . 8564) (#("   " 0 3 (fontified t)) . 8563) (8544 . 8545) (#("   " 0 3 (fontified t)) . 8544) (8523 . 8524) (#("   " 0 3 (fontified t)) . 8523) (8501 . 8502) (#("   " 0 3 (fontified t)) . 8501) (8462 . 8463) (#("   " 0 3 (fontified t)) . 8462) (8460 . 8461) (#("   " 0 3 (fontified t)) . 8460) (8441 . 8442) (#("   " 0 3 (fontified t)) . 8441) (8417 . 8418) (#("   " 0 3 (fontified t)) . 8417) (8378 . 8379) (#("   " 0 3 (fontified t)) . 8378) (8376 . 8377) (#("   " 0 3 (fontified t)) . 8376) (8357 . 8358) (#("   " 0 3 (fontified t)) . 8357) (8340 . 8341) (#("   " 0 3 (fontified t)) . 8340) (8303 . 8304) (#("   " 0 3 (fontified t)) . 8303) 8118) nil (26587 17306 134221 96000) 0 nil] [nil nil ((#("   " 0 3 (fontified t)) . 8685) (#("   " 0 3 (fontified t)) . 8625) (#("   " 0 3 (fontified t)) . 8469) (#("   " 0 3 (fontified t)) . 8380) (#("  " 0 2 (fontified t)) . 8240) 8118) ((8240 . 8242) (8380 . 8383) (8469 . 8472) (8625 . 8628) (8685 . 8688) (t 26587 17231 171977 970000)) (26587 17301 331111 121000) 0 nil])
([nil current ((#("	" 0 1 (fontified nil)) . 8657) (#("	" 0 1 (fontified nil)) . 8601) (#("	" 0 1 (fontified nil)) . 8457) (#("	" 0 1 (fontified nil)) . 8374) (#("  " 0 2 (fontified nil)) . 8240)) nil (26587 17306 134214 914000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -8372) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (8657 . 8658) (#("   " 0 3 (fontified t)) . 8657) (8636 . 8637) (#("   " 0 3 (fontified t)) . 8636) (8601 . 8602) (#("   " 0 3 (fontified t)) . 8601) (8579 . 8580) (#("   " 0 3 (fontified t)) . 8579) (8558 . 8559) (#("   " 0 3 (fontified t)) . 8558) (8539 . 8540) (#("   " 0 3 (fontified t)) . 8539) (8518 . 8519) (#("   " 0 3 (fontified t)) . 8518) (8496 . 8497) (#("   " 0 3 (fontified t)) . 8496) (8457 . 8458) (#("   " 0 3 (fontified t)) . 8457) (8437 . 8438) (#("   " 0 3 (fontified t)) . 8437) (8413 . 8414) (#("   " 0 3 (fontified t)) . 8413) (8374 . 8375) (#("   " 0 3 (fontified t)) . 8374) (8338 . 8339) (#("   " 0 3 (fontified t)) . 8338) (8301 . 8302) (#("   " 0 3 (fontified t)) . 8301) (8358 . 8359) (#("   " 0 3 (fontified nil)) . 8358) (#("
" 0 1 (fontified t)) . -8358) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) 8340 (t 26587 17231 171977 970000)) ((8358 . 8359) (8358 . 8361) (#(" " 0 1 (fontified nil)) . 8358) (8301 . 8304) (#("	" 0 1 (fontified t)) . 8301) (8338 . 8341) (#("	" 0 1 (fontified nil)) . 8338) (8374 . 8377) (#("	" 0 1 (fontified t)) . 8374) (8413 . 8416) (#("	" 0 1 (fontified t)) . 8413) (8437 . 8440) (#("	" 0 1 (fontified t)) . 8437) (8457 . 8460) (#("	" 0 1 (fontified t)) . 8457) (8496 . 8499) (#("	" 0 1 (fontified t)) . 8496) (8518 . 8521) (#("	" 0 1 (fontified t)) . 8518) (8539 . 8542) (#("	" 0 1 (fontified t)) . 8539) (8558 . 8561) (#("	" 0 1 (fontified t)) . 8558) (8579 . 8582) (#("	" 0 1 (fontified t)) . 8579) (8601 . 8604) (#("	" 0 1 (fontified t)) . 8601) (8636 . 8639) (#("	" 0 1 (fontified t)) . 8636) (8657 . 8660) (#("	" 0 1 (fontified t)) . 8657) (8372 . 8373)) (26587 17301 146461 958000) 0 nil])
nil
([nil nil ((8410 . 8411) (#("	" 0 1 (fontified nil)) . 8410) (#("
" 0 1 (fontified t)) . -8410) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (8372 . 8373) (#("	" 0 1 (fontified nil)) . 8372) (#("
" 0 1 (fontified t)) . -8372) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) 8371) ((8372 . 8373) (8372 . 8373) (#(" " 0 1 (fontified nil)) . 8372) (8410 . 8411) (8410 . 8411) (#(" " 0 1 (fontified t)) . 8410)) (26587 17301 146313 70000) 0 nil])
nil
